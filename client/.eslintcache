[{"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/App.jsx":"1","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/MainPage/MainPage.jsx":"2","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/Chatpage/ChatPage.jsx":"3","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/MypageModal/MypageModal.jsx":"4","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comments/Comments.jsx":"5","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostDeleteModal/PostDeleteModal.jsx":"6","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Post/Post.jsx":"7","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/DeleteModal/DeleteModal.jsx":"8","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SimpleModal/SimpleModal.jsx":"9","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComments/SubComments.jsx":"10","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComment/SubComment.jsx":"11","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Posts/Posts.jsx":"12","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/ChatUser/ChatUser.jsx":"13","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Nav/Nav.jsx":"14","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostModal/PostModal.jsx":"15","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comment/Comment.jsx":"16","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/LandingPage/LandingPage.jsx":"17","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/AddroomModal/AddroomModal.jsx":"18","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/ImageSlide/ImageSlide.jsx":"19","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostCropModal/PostCropModal.jsx":"20","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/MyChat/MyChat.jsx":"21","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostNewFormModal/PostNewFormModal.jsx":"22","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/CropModal/CropModal.jsx":"23","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/EachSlide/EachSlide.jsx":"24"},{"size":5935,"mtime":1608088728149,"results":"25","hashOfConfig":"26"},{"size":4986,"mtime":1608094232999,"results":"27","hashOfConfig":"26"},{"size":8070,"mtime":1608087545015,"results":"28","hashOfConfig":"26"},{"size":9228,"mtime":1607903499054,"results":"29","hashOfConfig":"26"},{"size":1279,"mtime":1608007658529,"results":"30","hashOfConfig":"26"},{"size":2401,"mtime":1607903386659,"results":"31","hashOfConfig":"26"},{"size":413,"mtime":1607578991112,"results":"32","hashOfConfig":"26"},{"size":2288,"mtime":1606876971766,"results":"33","hashOfConfig":"26"},{"size":553,"mtime":1606809858418,"results":"34","hashOfConfig":"26"},{"size":1065,"mtime":1607680529659,"results":"35","hashOfConfig":"26"},{"size":5713,"mtime":1608012403998,"results":"36","hashOfConfig":"26"},{"size":1348,"mtime":1608020451472,"results":"37","hashOfConfig":"26"},{"size":1960,"mtime":1607952849696,"results":"38","hashOfConfig":"26"},{"size":1649,"mtime":1608095345171,"results":"39","hashOfConfig":"26"},{"size":16055,"mtime":1608019578830,"results":"40","hashOfConfig":"26"},{"size":6561,"mtime":1608028363172,"results":"41","hashOfConfig":"26"},{"size":2195,"mtime":1607396806747,"results":"42","hashOfConfig":"26"},{"size":2483,"mtime":1607952849695,"results":"43","hashOfConfig":"26"},{"size":2516,"mtime":1608097502901,"results":"44","hashOfConfig":"26"},{"size":3570,"mtime":1606905749699,"results":"45","hashOfConfig":"26"},{"size":874,"mtime":1607952849698,"results":"46","hashOfConfig":"26"},{"size":8208,"mtime":1608100109277,"results":"47","hashOfConfig":"26"},{"size":4533,"mtime":1608096014525,"results":"48","hashOfConfig":"26"},{"size":330,"mtime":1608097498772,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"19cocba",{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"67"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"63"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/App.jsx",["108","109","110"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/MainPage/MainPage.jsx",["111","112"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport styles from './MainPage.module.css';\nimport Posts from '../../components/Posts/Posts';\nimport addPostImg from '../../images/bark.png';\nimport PostModal from '../../components/PostModal/PostModal';\nimport PostNewFormModal from '../../components/PostNewFormModal/PostNewFormModal';\nimport chatBtn from '../../images/chat.png';\n// test용 fakedata\n// import fakedata from '../../fakeData';\n\nconst MainPage = ({\n  from,\n  offsetCount,\n  acceptUserData,\n  kind,\n  setProfileForDeleteAndAdd,\n  userProfile,\n  isDone,\n  setUserProfile,\n  setPosts,\n  posts,\n  getPosts,\n  profile,\n  deletePost,\n  getMorePosts,\n  axiosInform,\n}) => {\n  // 1) ComponentDidMount(첫 렌더링시에)로 유저 정보와 latest posts 정보를 받아오고 re render\n  const firstOptionFunc = () => {\n    getPosts(0);\n    acceptUserData(0);\n  };\n\n  useEffect(() => {\n    firstOptionFunc();\n  }, []);\n\n  const history = useHistory();\n\n  // 새로운 포스트를 만드는 모달창을 끄고, 켜는 state & functions\n  const [isAddPostOn, setIsAddPostOn] = useState(false);\n  const viewAddPost = () => {\n    setIsAddPostOn(!isAddPostOn);\n  };\n  // #######################################################\n\n  // #######################################################\n  // postModal창이 켜져있는지 아닌지, default : false\n  // PostModal창의 내용들 refresh 하는 function\n  const [postModaldata, setPostModalData] = useState({});\n  const refreshPost = async (data) => {\n    setPostModalData((prev) => {\n      return { ...prev, comments: data };\n    });\n  };\n  // #######################################################\n\n  // #######################################################\n  // 포스트 보기\n  const [isPostOn, setIsPostOn] = useState(false);\n  const viewPost = async (postId) => {\n    if (isPostOn) {\n      // 만약에 켜져있으면, false로 다시 끄기\n      setIsPostOn(false);\n    } else {\n      try {\n        const response = await axios.get(\n          `https://server.codestates-project.tk/post/${postId}`,\n          { withCredentials: true },\n        );\n        setPostModalData(response.data);\n      } catch (err) {\n        if (err.response.status === 401) {\n          history.push('/');\n        } else {\n          console.log(err);\n        }\n      } finally {\n        setIsPostOn(true);\n      }\n      // setPostModalData(fakedata.post);\n      // setIsPostOn(true);\n    }\n  };\n  // #######################################################\n\n  // #######################################################\n  // 프로필 div를 눌렀을 때 해당 프로필 grid data를 불러오는 logic\n  const viewProfile = () => {\n    getPosts(profile.userId);\n  };\n  // #######################################################\n\n  return (\n    <>\n      <PostNewFormModal\n        setProfileForDeleteAndAdd={setProfileForDeleteAndAdd}\n        setUserProfile={setUserProfile}\n        postsKind={posts.kind}\n        setPosts={setPosts}\n        isModalOn={isAddPostOn}\n        handleClose={viewAddPost}\n      />\n      {isPostOn ? (\n        <PostModal\n          axiosInform={axiosInform}\n          posts={posts}\n          kind={kind}\n          setProfileForDeleteAndAdd={setProfileForDeleteAndAdd}\n          setUserProfile={setUserProfile}\n          userProfileId={userProfile.userId}\n          setPostModalData={setPostModalData}\n          refreshPost={refreshPost}\n          setPosts={setPosts}\n          getPosts={getPosts}\n          getUserData={acceptUserData}\n          postData={postModaldata}\n          isModalOn={isPostOn}\n          handleClose={viewPost}\n          deletePost={deletePost}\n        />\n      ) : null}\n      <div className={styles.gridFrame} />\n      <div className={styles.profile} onClick={viewProfile}>\n        <img\n          src={profile.thumbnail}\n          className={styles.image}\n          alt=\"profile_img\"\n        />\n        <div className={styles.userInform}>\n          <div className={styles.petName}>{profile.petName}</div>\n          <div className={styles.breed}>{profile.breed}</div>\n          <div className={styles.postCountPart}>\n            <div className={styles.postsCount}>Posts</div>\n            <div className={styles.postsCountNumber}>{profile.postCount}</div>\n          </div>\n        </div>\n      </div>\n      <Posts\n        axiosInform={axiosInform}\n        getMorePosts={getMorePosts}\n        from={from}\n        offsetCount={offsetCount}\n        setPosts={setPosts}\n        userProfile={userProfile}\n        isDone={isDone}\n        userId={profile.userId}\n        addPosts={getPosts}\n        kind={posts.kind}\n        posts={posts.postData}\n        postsCount={posts.postsCount}\n        viewPost={viewPost}\n      />\n      <div className={styles.addButton} onClick={viewAddPost}>\n        <img className={styles.addPostImg} src={addPostImg} alt=\"addPost\" />\n      </div>\n    </>\n  );\n};\n\nexport default MainPage;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/Chatpage/ChatPage.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/MypageModal/MypageModal.jsx",["113","114","115","116","117"],"import { useEffect, React, useRef, useState } from 'react';\nimport axios from 'axios';\n\nimport styles from './MypageModal.module.css';\nimport Modal from '../Modal/Modal';\nimport defaultProfile from '../../images/defaultProfile.png';\nimport logoImg from '../../images/logo.png';\nimport DeleteModal from '../DeleteModal/DeleteModal';\nimport CropModal from '../CropModal/CropModal';\n\nconst MypageModal = ({\n  setProfile,\n  kind,\n  userProfile,\n  setUserProfile,\n  profile,\n  isModalOn,\n  handleClose,\n}) => {\n  // img 변경관련 로직\n  const [petnameCaution, setPetnameCaution] = useState(null);\n  const [breedCaution, setBreedCaution] = useState(null);\n  const [cropModalOn, setCropModalOn] = useState(false);\n  const handleCropModalOn = () => {\n    setCropModalOn(!cropModalOn);\n  };\n  const [imgSrc, setImgSrc] = useState(null);\n  const [nowImg, setNowImg] = useState(profile.thumbnail);\n  // const handleNowImg = (newImg) => {\n  //   setNowImg(newImg);\n  // };\n\n  const changeProfile = (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      // html5의 fileAPI\n      const reader = new FileReader();\n      reader.readAsDataURL(e.target.files[0]);\n      reader.addEventListener('load', () => {\n        setImgSrc(reader.result);\n      });\n      handleCropModalOn();\n    }\n  };\n\n  // 서버에서 보내준 정보를 렌더링(초기)할 때 useState 디폴트 값으로 받기\n  // + 유효성 검사 로직\n  const [nowPetName, setNowPetName] = useState(profile.petName);\n  const [nowBreed, setNowBreed] = useState(profile.petName);\n  const petnameRef = useRef(null);\n  const breedRef = useRef(null);\n\n  const [petName, setPetname] = useState(profile.petName);\n  const [breed, setBreed] = useState(profile.breed);\n  const [checked, setChecked] = useState({ petname: true, breed: true });\n\n  // 유효성 검사 로직\n  const checkInform = (e) => {\n    if (e.target.name === 'petname') {\n      setChecked({ ...checked, petname: true });\n      if (e.target.value.length > 18 || e.target.value.length === 0) {\n        setChecked({ ...checked, petname: false });\n        setPetnameCaution(\n          '펫네임은 최소 1글자 이상 18글자 이하로 작성해주세요',\n        );\n      }\n      setPetname(e.target.value);\n    } else if (e.target.name === 'breed') {\n      setChecked({ ...checked, breed: true });\n      if (e.target.value.length > 18 || e.target.value.length === 0) {\n        setChecked({ ...checked, breed: false });\n        setBreedCaution('품종은 최소 1글자 이상 18글자 이하로 작성해주세요');\n      }\n      setBreed(e.target.value);\n    }\n  };\n\n  // 실제 펫네임을 변경하기 위해 서버에 PATCH 요청을 보내는 로직\n  const changePetname = async () => {\n    if (checked.petname) {\n      try {\n        const response = await axios.patch(\n          'https://server.codestates-project.tk/user/petname',\n          {\n            petName,\n          },\n          { withCredentials: true },\n        );\n        if (response.status === 201) {\n          setNowPetName(petName);\n          setPetname(petName);\n          if (kind === 'latest' || kind === 'user') {\n            setProfile({ ...profile, petName });\n          }\n          setUserProfile({ ...userProfile, petName });\n          petnameRef.current.blur();\n        }\n      } catch (err) {\n        // 중복 펫네임 409\n        console.log('hre');\n        if (err.response.status === 501) {\n          alert('some errors occur at server, please try again');\n        } else if (err.response.status === 409) {\n          setChecked({ ...checked, petname: false });\n          setPetnameCaution('동일한 닉네임으로의 변경은 불가능합니다');\n        } else {\n          console.log(err);\n        }\n      }\n    }\n  };\n\n  // 실제 품종을 변경하기 위해 서버에 PATCH 요청을 보내는 로직\n  const changeBreed = async () => {\n    if (checked.breed) {\n      try {\n        const response = await axios.patch(\n          'https://server.codestates-project.tk/user/breed',\n          {\n            breed,\n          },\n          { withCredentials: true },\n        );\n        if (response.status === 201) {\n          setNowBreed(breed);\n          setBreed(breed);\n          if (kind === 'latest' || kind === 'user') {\n            setProfile({ ...profile, breed });\n          }\n          setUserProfile({ ...userProfile, breed });\n          breedRef.current.blur();\n        }\n      } catch (err) {\n        if (err.response.status === 501) {\n          alert('some errors occur at server, please try again');\n        } else if (err.response.status === 409) {\n          setChecked({ ...checked, breed: false });\n          setPetnameCaution('동일한 품종으로의 변경은 불가능합니다');\n        }\n      }\n    }\n  };\n\n  const resetAndTurnOffTheModal = () => {\n    setPetname(nowPetName);\n    setBreed(nowBreed);\n    setChecked({ petname: true, breed: true });\n    handleClose();\n  };\n\n  // 회원 탈퇴 모달은 디폴트 모달을 재활용하지 않는 것이기에 따로 state로 관리\n  const [deleteModalOn, setDeleteModalOn] = useState(false);\n  const viewDeleteModal = () => {\n    setDeleteModalOn(!deleteModalOn);\n  };\n\n  useEffect(() => {\n    if (isModalOn === false) {\n      setPetname(nowPetName);\n      setBreed(nowBreed);\n      setChecked({ petname: true, breed: true });\n    }\n  }, [isModalOn]);\n\n  return (\n    <>\n      <DeleteModal isModalOn={deleteModalOn} handleClose={viewDeleteModal} />\n      <Modal isModalOn={isModalOn} handleClose={resetAndTurnOffTheModal}>\n        <div className={styles.MypageModal}>\n          <div className={styles.profile}>\n            <div className={styles.imgPart}>\n              <img src={nowImg} className={styles.profileImg} alt=\"profile\" />\n            </div>\n            <div className={styles.informPart}>\n              <div className={styles.title}>프로필 사진</div>\n              <input\n                id=\"profileImgInput\"\n                type=\"file\"\n                className={styles.profileImgInput}\n                onChange={changeProfile}\n              />\n              <label htmlFor=\"profileImgInput\">\n                <div className={styles.editButton}>Edit Picture</div>\n              </label>\n            </div>\n          </div>\n          <div className={styles.editPart}>\n            <div className={styles.petnameEdit}>\n              <div className={styles.petnameTitle}>\n                <img className={styles.logoImg} src={logoImg} alt=\"logo\" />\n                Pet Name\n              </div>\n              <div className={styles.petnameEditPart}>\n                <input\n                  ref={petnameRef}\n                  className={styles.myPageInput}\n                  spellCheck={false}\n                  onChange={checkInform}\n                  value={petName}\n                  name=\"petname\"\n                />\n                <button\n                  className={`${styles.informEditButton} ${\n                    checked.petname && styles.isOn\n                  }`}\n                  type=\"button\"\n                  onClick={changePetname}\n                >\n                  Edit\n                </button>\n              </div>\n              {checked.petname ? null : (\n                <div className={styles.caution}>{petnameCaution}</div>\n              )}\n            </div>\n            <div className={styles.breedEdit}>\n              <div className={styles.breedTitle}>\n                <img className={styles.logoImg} src={logoImg} alt=\"logo\" />\n                Breed\n              </div>\n              <div className={styles.breedEditPart}>\n                <input\n                  ref={breedRef}\n                  className={styles.myPageInput}\n                  spellCheck={false}\n                  name=\"breed\"\n                  value={breed}\n                  onChange={checkInform}\n                />\n                <button\n                  className={`${styles.informEditButton} ${\n                    checked.breed && styles.isOn\n                  }`}\n                  type=\"button\"\n                  onClick={changeBreed}\n                >\n                  Edit\n                </button>\n              </div>\n              {checked.breed ? null : (\n                <div className={styles.caution}>{breedCaution}</div>\n              )}\n            </div>\n            <div className={styles.deleteEdit}>\n              <div className={styles.deleteTitle}>\n                <img className={styles.logoImg} src={logoImg} alt=\"logo\" />\n                Delete Account\n              </div>\n              <button\n                id={styles.deleteButton}\n                className={styles.deleteEditButton}\n                type=\"button\"\n                onClick={viewDeleteModal}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      </Modal>\n      <CropModal\n        setProfile={setProfile}\n        profile={profile}\n        userProfile={userProfile}\n        kind={kind}\n        setUserProfile={setUserProfile}\n        setNowImg={setNowImg}\n        imgSrc={imgSrc}\n        setImgSrc={setImgSrc}\n        isModalOn={cropModalOn}\n        handleClose={handleCropModalOn}\n      />\n    </>\n  );\n};\n\nexport default MypageModal;\n",["118","119","120","121"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comments/Comments.jsx",[],["122","123","124","125"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostDeleteModal/PostDeleteModal.jsx",["126"],"import { React, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport styles from './PostDeleteModal.module.css';\nimport deleteMotionImg from '../../images/trashcan.png';\nimport SimpleModal from '../SimpleModal/SimpleModal';\n\nconst PostDeleteModal = ({\n  setProfileForDeleteAndAdd,\n  setUserProfile,\n  postId,\n  deletePost,\n  isModalOn,\n  handleClose,\n  kind,\n}) => {\n  const [deleted, setDeleted] = useState(false);\n\n  // 포스트 삭제\n  const deletePostFunc = async () => {\n    try {\n      await axios.delete(\n        `https://server.codestates-project.tk/post`,\n        { data: { postId } },\n        {\n          withCredentials: true,\n        },\n      );\n      setUserProfile((prev) => {\n        return { ...prev, postCount: prev.postCount - 1 };\n      });\n      if (kind === 'user' || kind === 'latest') {\n        setProfileForDeleteAndAdd((prev) => {\n          return { ...prev, postCount: prev.postCount - 1 };\n        });\n      }\n      deletePost(postId);\n      await setDeleted(true);\n    } catch (err) {\n      if (err.response.status === 401) {\n        history.push('/');\n      } else {\n        console.log(err);\n      }\n    }\n  };\n\n  return (\n    <SimpleModal isModalOn={isModalOn} handleClose={handleClose}>\n      <img\n        className={styles.deleteMotion}\n        src={deleteMotionImg}\n        alt=\"trash can\"\n      />\n      {deleted ? (\n        <>\n          <div className={styles.completedMessage}>\n            정상적으로 처리되었습니다\n          </div>\n        </>\n      ) : (\n        <>\n          <div id={styles.firstMessage} className={styles.message}>\n            정말로 삭제를 원하시나요?\n          </div>\n          <div id={styles.deleteMessage} className={styles.message}>\n            삭제 요청은 되돌릴 수 없습니다\n          </div>\n          <div className={styles.yesOrNoButton}>\n            <button\n              className={styles.yesButton}\n              type=\"button\"\n              onClick={deletePostFunc}\n            >\n              Yes\n            </button>\n            <button\n              className={styles.noButton}\n              type=\"button\"\n              onClick={() => {\n                handleClose();\n              }}\n            >\n              No\n            </button>\n          </div>\n        </>\n      )}\n    </SimpleModal>\n  );\n};\n\nexport default PostDeleteModal;\n",["127","128","129","130"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Post/Post.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/DeleteModal/DeleteModal.jsx",["131","132"],"import { React, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport styles from './DeleteModal.module.css';\nimport deleteMotionImg from '../../images/deleteMotion.png';\nimport SimpleModal from '../SimpleModal/SimpleModal';\n\nconst DeleteModal = ({ isModalOn, handleClose }) => {\n  const history = useHistory();\n  const [deleted, setDeleted] = useState(false);\n\n  const deleteAccount = async () => {\n    try {\n      const response = await axios.delete(\n        'https://server.codestates-project.tk/user',\n      );\n      if (response.status === 201) {\n        setDeleted(true);\n        setTimeout(() => {\n          // 탈퇴 완료후에 랜딩페이지로 자동 이동(4초후에)\n          history.push('/');\n        }, 5000);\n      }\n    } catch (err) {\n      if (err.response.status === 501) {\n        alert('some errors occur at server, please try again');\n      } else {\n        console.log(err);\n      }\n    }\n  };\n\n  return (\n    <SimpleModal isModalOn={isModalOn} handleClose={handleClose}>\n      <img\n        className={styles.deleteMotion}\n        src={deleteMotionImg}\n        alt=\"handsign\"\n      />\n      {deleted ? (\n        <>\n          <div className={styles.message}>정상적으로 처리되었습니다</div>\n          <div className={styles.message}>이용해주셔서 감사합니다</div>\n          <div className={styles.caution} id={styles.deleteMessage}>\n            4초 후에 로그인 페이지로 이동합니다\n          </div>\n        </>\n      ) : (\n        <>\n          <div className={styles.message}>정말로 회원 탈퇴를 원하시나요?</div>\n          <div id={styles.deleteMessage} className={styles.message}>\n            삭제 요청은 되돌릴 수 없습니다\n          </div>\n          <div className={styles.yesOrNoButton}>\n            <button\n              className={styles.yesButton}\n              type=\"button\"\n              onClick={deleteAccount}\n            >\n              Yes\n            </button>\n            <button\n              className={styles.noButton}\n              type=\"button\"\n              onClick={handleClose}\n            >\n              No\n            </button>\n          </div>\n        </>\n      )}\n    </SimpleModal>\n  );\n};\n\nexport default DeleteModal;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SimpleModal/SimpleModal.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComments/SubComments.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComment/SubComment.jsx",["133","134","135","136","137"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Posts/Posts.jsx",["138"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/ChatUser/ChatUser.jsx",["139","140","141","142","143","144","145","146"],"import React, { createRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport styles from './ChatUser.module.css';\nimport iguanaImg from '../../images/iguana.jpeg';\nimport OutImg from '../../images/roomOut.png';\n\nconst socket = io('https://zootopia-chat.herokuapp.com/', {\n  withCredentials: true,\n});\n\nconst ChatUser = ({\n  idValue,\n  unread,\n  targetId,\n  targetToggle,\n  roomTitle,\n  userImg,\n  roomPeople,\n  dataFunc,\n  clearFunc,\n  Myid,\n}) => {\n  const Card = createRef();\n\n  useEffect(() => {\n    if (targetId !== idValue) {\n      Card.current.style.backgroundColor = 'white';\n      // socket.emit('leaveRoom', idValue);\n    }\n  }, [targetId]);\n\n  const handleCard = function () {\n    Card.current.style.backgroundColor = 'rgba(255,198,0)';\n    targetToggle(idValue);\n    console.log(idValue);\n    dataFunc(idValue);\n  };\n\n  const roomBye = function () {\n    const goobyeData = { id: 5 };\n    const config = {\n      method: 'post',\n      url: `https://zootopia-chat.herokuapp.com/room/${idValue}`,\n      headers: { 'Content-Type': 'application/json' },\n      data: goobyeData,\n    };\n    axios(config)\n      .then(function (response) {\n        console.log(JSON.stringify(response.data));\n        clearFunc();\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  return (\n    <>\n      <div className={styles.usercard} ref={Card} onClick={handleCard}>\n        <img className={styles.userProfile} src={iguanaImg} alt=\"userprofile\" />\n        <div className={styles.username}>{roomTitle + userImg}</div>\n        <div className={styles.userbreed}>{roomPeople}</div>\n        <div className={styles.status}>\n          {!unread ? '안 읽은 메시지가 있습니다.' : ''}\n        </div>\n        <img\n          className={styles.outButton}\n          src={OutImg}\n          alt=\"roomOut\"\n          onClick={roomBye}\n        />\n      </div>\n    </>\n  );\n};\nexport default ChatUser;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Nav/Nav.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostModal/PostModal.jsx",["147","148","149","150","151","152","153","154"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comment/Comment.jsx",["155","156","157","158","159","160","161","162"],"/* eslint-disable no-nested-ternary */\nimport { React, useState, useRef, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport styles from './Comment.module.css';\nimport SubComments from '../SubComments/SubComments';\nimport updateBtn from '../../images/commentUpdateBtn.jpg';\nimport chatBtn from '../../images/chat.png';\n\nconst Comment = ({\n  userProfileId,\n  userId,\n  getSpecificUser,\n  setCommentId,\n  setCommentToWhom,\n  refreshPost,\n  postId,\n  replies,\n  deleteComment,\n  commentId,\n  thumbnail,\n  petName,\n  text,\n  time,\n  handleCommentBtn,\n}) => {\n  // 수정권한이 있는지에 관한 처리\n  const [today, setToday] = useState(null);\n  const [hasRights, setHasRights] = useState(false);\n  const textRef = useRef(null);\n  const [updateToggled, setUpdateToggled] = useState(false);\n  const [textUpdateToggled, setTextUpdateToggled] = useState(false);\n  const [textInput, setTextInput] = useState(null);\n\n  // 댓글 수정\n  const updateComment = async () => {\n    console.log(commentId);\n    if (textUpdateToggled === true) {\n      try {\n        const response = await axios.patch(\n          'https://server.codestates-project.tk/post/comment',\n          {\n            postId,\n            commentId,\n            text: textInput,\n          },\n          {\n            withCredentials: true,\n          },\n        );\n        refreshPost(response.data.comments);\n        setTextUpdateToggled(false);\n        setUpdateToggled(false);\n      } catch (err) {\n        if (err.response.status === 401) {\n          history.push('/');\n        } else if (err.response.status === 400) {\n          alert('1글자 이상의 댓글을 입력해주세요');\n        } else {\n          console.log(err);\n        }\n      }\n    } else {\n      setTextInput(text);\n      await setTextUpdateToggled(true);\n      textRef.current.focus();\n    }\n  };\n\n  const checkEnterPress = (e) => {\n    if (e.keyCode === 13) {\n      updateComment();\n    }\n  };\n\n  // 수정권한이 있는지에 관한 처리\n  useEffect(() => {\n    if (userProfileId === userId) {\n      setHasRights(true);\n    }\n  }, [userProfileId, userId]);\n\n  const getDateType = () => {\n    const todayDate = new Date();\n    const date = new Date(time);\n    console.log(todayDate.getTime() / 1000 / 60);\n    console.log(date.getTime() / 1000 / 60);\n    const betweenTime = Math.floor(\n      (todayDate.getTime() - date.getTime()) / 1000 / 60,\n    );\n    console.log(betweenTime);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const dates = date.getDate();\n    let day = date.getDay();\n    if (day === 1) day = '월';\n    if (day === 2) day = '화';\n    if (day === 3) day = '수';\n    if (day === 4) day = '목';\n    if (day === 5) day = '금';\n    if (day === 6) day = '토';\n    if (day === 0) day = '일';\n    const dateForm = `${year}/${month}/${dates} (${day})`;\n    return dateForm;\n  };\n\n  useEffect(() => {\n    setToday(getDateType());\n  }, []);\n  return (\n    <>\n      <div className={styles.eachComment}>\n        <div className={styles.subComment}>\n          <div className={styles.contentsPart}>\n            <img\n              className={styles.profile}\n              onClick={() => {\n                getSpecificUser(userId);\n              }}\n              src={thumbnail}\n              alt=\"profile\"\n            />\n            <div className={styles.commentPart}>\n              <span\n                className={styles.nickname}\n                onClick={() => {\n                  getSpecificUser(userId);\n                }}\n              >\n                {petName}\n              </span>\n              {textUpdateToggled ? (\n                <input\n                  onKeyDown={checkEnterPress}\n                  spellCheck={false}\n                  ref={textRef}\n                  className={styles.textInput}\n                  type=\"text\"\n                  value={textInput}\n                  onChange={(e) => {\n                    setTextInput(e.target.value);\n                  }}\n                />\n              ) : (\n                <span className={styles.textPart}>{text}</span>\n              )}\n            </div>\n          </div>\n          <div className={styles.dateAndBtnPart}>\n            <span className={styles.date}>{today}</span>\n            <img\n              className={styles.chatBtn}\n              src={chatBtn}\n              alt=\"chat button\"\n              onClick={() => {\n                console.log(userId);\n              }}\n            />\n            <span\n              className={styles.commentBtn}\n              onClick={async () => {\n                await setCommentId(commentId);\n                await setCommentToWhom(petName);\n                handleCommentBtn();\n              }}\n            >\n              답글 달기\n            </span>\n            {hasRights ? (\n              updateToggled ? (\n                <div className={styles.updateBtns}>\n                  <img\n                    className={styles.closeUpdateBtn}\n                    src={updateBtn}\n                    alt=\"updateBtn\"\n                    onClick={() => {\n                      setTextUpdateToggled(false);\n                      setTextInput(text);\n                      setUpdateToggled(false);\n                    }}\n                  />\n                  <i\n                    id={styles.goToInputBtn}\n                    className=\"far fa-edit\"\n                    onClick={updateComment}\n                  />\n                  <i\n                    id={styles.commentDeleteBtn}\n                    className=\"fas fa-trash-alt\"\n                    onClick={() => {\n                      deleteComment(commentId);\n                      setUpdateToggled(false);\n                    }}\n                  />\n                </div>\n              ) : (\n                <img\n                  className={styles.updateBtn}\n                  src={updateBtn}\n                  alt=\"updateBtn\"\n                  onClick={() => {\n                    setUpdateToggled(true);\n                  }}\n                />\n              )\n            ) : null}\n          </div>\n        </div>\n        <SubComments\n          userProfileId={userProfileId}\n          getSpecificUser={getSpecificUser}\n          commentId={commentId}\n          setCommentId={setCommentId}\n          setCommentToWhom={setCommentToWhom}\n          postId={postId}\n          refreshPost={refreshPost}\n          replies={replies}\n          handleCommentBtn={handleCommentBtn}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Comment;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/LandingPage/LandingPage.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/AddroomModal/AddroomModal.jsx",["163","164","165","166","167","168","169","170","171","172"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/ImageSlide/ImageSlide.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostCropModal/PostCropModal.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/MyChat/MyChat.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostNewFormModal/PostNewFormModal.jsx",["173","174"],"import { createRef, React, useState, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport styles from './PostNewFormModal.module.css';\nimport close from '../../images/close.png';\nimport PostCropModal from '../PostCropModal/PostCropModal';\n// import FAKEIMG from '../../thumbnails/post_a.png';\n\nconst PostNewFormModal = ({\n  setProfileForDeleteAndAdd,\n  setUserProfile,\n  postsKind,\n  setPosts,\n  isModalOn,\n  handleClose,\n}) => {\n  const history = useHistory();\n  const imgInput1 = createRef();\n  const imgInput2 = createRef();\n  const imgInput3 = createRef();\n  const textAreaRef = useRef(null);\n  const [isCropModalOn, setIsCropModalOn] = useState(false);\n  const [inputNum, setInputNum] = useState(null);\n  const [checked, setChecked] = useState(false);\n  const [imgChecked, setImgChecked] = useState(false);\n\n  const handleCropModal = () => {\n    setIsCropModalOn(!isCropModalOn);\n  };\n  const [imgSrc, setImgSrc] = useState(null);\n\n  const [imgSrcs, setImgSrcs] = useState({ 1: '+', 2: '+', 3: '+' });\n\n  const setImgSrcsFunc = (inputNumber, urlSrc) => {\n    if (inputNumber === 1) {\n      setImgSrcs({ ...imgSrcs, 1: urlSrc });\n    } else if (inputNumber === 2) {\n      setImgSrcs({ ...imgSrcs, 2: urlSrc });\n    } else if (inputNumber === 3) {\n      setImgSrcs({ ...imgSrcs, 3: urlSrc });\n    }\n  };\n\n  const imgOnChange = (e) => {\n    setImgChecked(false);\n    try {\n      const urlSrc = URL.createObjectURL(e.target.files[0]);\n      if (e.target.name === 'imgInput1') {\n        setInputNum(1);\n        setImgSrc(urlSrc);\n        handleCropModal();\n      } else if (e.target.name === 'imgInput2') {\n        setInputNum(2);\n        setImgSrc(urlSrc);\n        handleCropModal();\n      } else if (e.target.name === 'imgInput3') {\n        setInputNum(3);\n        setImgSrc(urlSrc);\n        handleCropModal();\n      }\n    } catch (err) {\n      alert('we only accept image files');\n    }\n  };\n\n  const resetAndCloseModal = () => {\n    setImgSrcs({ 1: '+', 2: '+', 3: '+' });\n    setChecked(false);\n    setImgChecked(false);\n    textAreaRef.current.value = null;\n    handleClose();\n  };\n\n  const sendNewPost = async () => {\n    if (textAreaRef.current.value.trim().length === 0) {\n      setChecked(true);\n    } else {\n      // 이미지가 1개 미만이면 즉, 0개 업로딩이면 못보내게 하기\n      const formData = new FormData();\n      const dataArr = [];\n      for (const el of Object.values(imgSrcs)) {\n        if (el !== '+') {\n          const encodeData = el.replace('data:image/png;base64,', '');\n          const decodImg = atob(encodeData);\n          const array = [];\n          for (let i = 0; i < decodImg.length; i += 1) {\n            array.push(decodImg.charCodeAt(i));\n          }\n          const file = new Blob([new Uint8Array(array)], { type: 'image/png' });\n          dataArr.push(file);\n        }\n      }\n      // 현재 dataArr 에 이미지가 있음 (Blob 타입의)\n      let image1;\n      if (dataArr[0]) {\n        // eslint-disable-next-line prefer-destructuring\n        image1 = dataArr[0];\n      } else {\n        setImgChecked(true);\n        return null;\n      }\n      const image2 = dataArr[1] ? dataArr[1] : null;\n      const image3 = dataArr[2] ? dataArr[2] : null;\n\n      const fileName = 'canvas_img_'.concat(\n        new Date().getMilliseconds(),\n        '.png',\n      );\n\n      if (image1) formData.append('image1', image1, fileName);\n      if (image2) formData.append('image2', image2, fileName);\n      if (image3) formData.append('image3', image3, fileName);\n      formData.append('text', textAreaRef.current.value);\n      try {\n        const response = await axios({\n          method: 'post',\n          url: 'https://9a782e31b176.ngrok.io/post',\n          data: formData,\n          headers: {\n            'Content-Type': `multipart/form-data`,\n          },\n        });\n        setUserProfile((prev) => {\n          return { ...prev, postCount: prev.postCount + 1 };\n        });\n        if (postsKind === 'latest' || postsKind === 'user') {\n          setPosts((prev) => {\n            const copyArr = prev.postData.slice();\n            copyArr.unshift(response.data);\n            return { ...prev, postData: copyArr };\n          });\n          setProfileForDeleteAndAdd((prev) => {\n            return { ...prev, postCount: prev.postCount + 1 };\n          });\n        }\n        resetAndCloseModal();\n      } catch (err) {\n        if (err.response) {\n          if (err.response.status === 401) {\n            history.push('/');\n          }\n        } else {\n          alert('sorry, server got an error. please try again');\n        }\n      }\n    }\n  };\n\n  return (\n    <>\n      <PostCropModal\n        setImgSrcs={setImgSrcsFunc}\n        inputNum={inputNum}\n        setImgSrc={setImgSrc}\n        imgSrc={imgSrc}\n        isModalOn={isCropModalOn}\n        handleClose={handleCropModal}\n      />\n      <div className={`${styles.modal} ${isModalOn && styles.isOn}`}>\n        <div className={styles.box}>\n          <img\n            className={styles.close}\n            src={close}\n            alt=\"close\"\n            onClick={resetAndCloseModal}\n          />\n          <div className={styles.postNewFormModal}>\n            <div className={styles.imgInputPart}>\n              <input\n                className={styles.imgInput}\n                type=\"file\"\n                accept=\"image/gif, image/jpeg, image/png\"\n                name=\"imgInput1\"\n                id=\"imgInput1\"\n                ref={imgInput1}\n                onChange={imgOnChange}\n              />\n              <input\n                className={styles.imgInput}\n                type=\"file\"\n                accept=\"image/gif, image/jpeg, image/png\"\n                name=\"imgInput2\"\n                id=\"imgInput2\"\n                ref={imgInput2}\n                onChange={imgOnChange}\n              />\n              <input\n                className={styles.imgInput}\n                type=\"file\"\n                accept=\"image/gif, image/jpeg, image/png\"\n                name=\"imgInput3\"\n                id=\"imgInput3\"\n                ref={imgInput3}\n                onChange={imgOnChange}\n              />\n              <label className={styles.labels} htmlFor=\"imgInput1\">\n                {imgSrcs[1] === '+' ? (\n                  '+'\n                ) : (\n                  <img\n                    className={styles.uploadedImg}\n                    src={imgSrcs[1]}\n                    alt=\"upload img\"\n                  />\n                )}\n              </label>\n              <label className={styles.labels} htmlFor=\"imgInput2\">\n                {imgSrcs[2] === '+' ? (\n                  '+'\n                ) : (\n                  <img\n                    className={styles.uploadedImg}\n                    src={imgSrcs[2]}\n                    alt=\"upload img\"\n                  />\n                )}\n              </label>\n              <label className={styles.labels} htmlFor=\"imgInput3\">\n                {imgSrcs[3] === '+' ? (\n                  '+'\n                ) : (\n                  <img\n                    className={styles.uploadedImg}\n                    src={imgSrcs[3]}\n                    alt=\"upload img\"\n                  />\n                )}\n              </label>\n            </div>\n            {imgChecked && (\n              <div className={styles.imgCheck}>\n                하나 이상의 이미지를 업로드 해주세요\n              </div>\n            )}\n            <div className={styles.textInputPart}>\n              <textarea\n                onKeyDown={() => {\n                  setChecked(false);\n                }}\n                ref={textAreaRef}\n                placeholder=\"내용을 입력해주세요\"\n                spellCheck={false}\n                className={`${styles.textInput} ${checked && styles.isOn}`}\n              />\n            </div>\n            <div className={styles.btnInputPart}>\n              <button\n                className={styles.barkBtn}\n                type=\"button\"\n                onClick={sendNewPost}\n              >\n                Bark\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PostNewFormModal;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/CropModal/CropModal.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/EachSlide/EachSlide.jsx",[],{"ruleId":"175","severity":1,"message":"176","line":93,"column":9,"nodeType":"177","messageId":"178","endLine":93,"endColumn":20},{"ruleId":"175","severity":1,"message":"176","line":140,"column":9,"nodeType":"177","messageId":"178","endLine":140,"endColumn":20},{"ruleId":"175","severity":1,"message":"176","line":159,"column":9,"nodeType":"177","messageId":"178","endLine":159,"endColumn":20},{"ruleId":"179","severity":1,"message":"180","line":38,"column":6,"nodeType":"181","endLine":38,"endColumn":8,"suggestions":"182"},{"ruleId":"175","severity":1,"message":"176","line":78,"column":11,"nodeType":"177","messageId":"178","endLine":78,"endColumn":22},{"ruleId":"175","severity":1,"message":"176","line":99,"column":9,"nodeType":"177","messageId":"178","endLine":99,"endColumn":20},{"ruleId":"183","severity":1,"message":"184","line":101,"column":11,"nodeType":"185","messageId":"178","endLine":101,"endColumn":65},{"ruleId":"175","severity":1,"message":"176","line":106,"column":11,"nodeType":"177","messageId":"178","endLine":106,"endColumn":22},{"ruleId":"183","severity":1,"message":"184","line":134,"column":11,"nodeType":"185","messageId":"178","endLine":134,"endColumn":65},{"ruleId":"179","severity":1,"message":"186","line":162,"column":6,"nodeType":"181","endLine":162,"endColumn":17,"suggestions":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"188","replacedBy":"196"},{"ruleId":"190","replacedBy":"197"},{"ruleId":"192","replacedBy":"198"},{"ruleId":"194","replacedBy":"199"},{"ruleId":"175","severity":1,"message":"176","line":43,"column":9,"nodeType":"177","messageId":"178","endLine":43,"endColumn":20},{"ruleId":"188","replacedBy":"200"},{"ruleId":"190","replacedBy":"201"},{"ruleId":"192","replacedBy":"202"},{"ruleId":"194","replacedBy":"203"},{"ruleId":"183","severity":1,"message":"184","line":26,"column":9,"nodeType":"185","messageId":"178","endLine":26,"endColumn":63},{"ruleId":"175","severity":1,"message":"176","line":28,"column":9,"nodeType":"177","messageId":"178","endLine":28,"endColumn":20},{"ruleId":"175","severity":1,"message":"176","line":51,"column":9,"nodeType":"177","messageId":"178","endLine":51,"endColumn":20},{"ruleId":"183","severity":1,"message":"184","line":74,"column":11,"nodeType":"185","messageId":"178","endLine":74,"endColumn":38},{"ruleId":"175","severity":1,"message":"176","line":76,"column":11,"nodeType":"177","messageId":"178","endLine":76,"endColumn":22},{"ruleId":"179","severity":1,"message":"204","line":110,"column":3,"nodeType":"205","endLine":110,"endColumn":12,"suggestions":"206"},{"ruleId":"175","severity":1,"message":"176","line":163,"column":13,"nodeType":"177","messageId":"178","endLine":163,"endColumn":24},{"ruleId":"179","severity":1,"message":"207","line":23,"column":6,"nodeType":"181","endLine":23,"endColumn":8,"suggestions":"208"},{"ruleId":"179","severity":1,"message":"209","line":31,"column":6,"nodeType":"181","endLine":31,"endColumn":16,"suggestions":"210"},{"ruleId":"211","severity":1,"message":"212","line":33,"column":22,"nodeType":"213","messageId":"214","endLine":33,"endColumn":31},{"ruleId":"175","severity":1,"message":"176","line":36,"column":5,"nodeType":"177","messageId":"178","endLine":36,"endColumn":16},{"ruleId":"211","severity":1,"message":"212","line":40,"column":19,"nodeType":"213","messageId":"214","endLine":40,"endColumn":28},{"ruleId":"211","severity":1,"message":"212","line":49,"column":13,"nodeType":"213","messageId":"214","endLine":49,"endColumn":22},{"ruleId":"175","severity":1,"message":"176","line":50,"column":9,"nodeType":"177","messageId":"178","endLine":50,"endColumn":20},{"ruleId":"211","severity":1,"message":"212","line":53,"column":14,"nodeType":"213","messageId":"214","endLine":53,"endColumn":23},{"ruleId":"175","severity":1,"message":"176","line":54,"column":9,"nodeType":"177","messageId":"178","endLine":54,"endColumn":20},{"ruleId":"175","severity":1,"message":"176","line":86,"column":9,"nodeType":"177","messageId":"178","endLine":86,"endColumn":20},{"ruleId":"183","severity":1,"message":"184","line":157,"column":11,"nodeType":"185","messageId":"178","endLine":157,"endColumn":38},{"ruleId":"175","severity":1,"message":"176","line":159,"column":11,"nodeType":"177","messageId":"178","endLine":159,"endColumn":22},{"ruleId":"175","severity":1,"message":"176","line":193,"column":11,"nodeType":"177","messageId":"178","endLine":193,"endColumn":22},{"ruleId":"175","severity":1,"message":"176","line":216,"column":11,"nodeType":"177","messageId":"178","endLine":216,"endColumn":22},{"ruleId":"175","severity":1,"message":"176","line":242,"column":9,"nodeType":"177","messageId":"178","endLine":242,"endColumn":20},{"ruleId":"179","severity":1,"message":"215","line":272,"column":6,"nodeType":"181","endLine":272,"endColumn":8,"suggestions":"216"},{"ruleId":"175","severity":1,"message":"176","line":415,"column":21,"nodeType":"177","messageId":"178","endLine":415,"endColumn":32},{"ruleId":"175","severity":1,"message":"176","line":37,"column":5,"nodeType":"177","messageId":"178","endLine":37,"endColumn":16},{"ruleId":"183","severity":1,"message":"184","line":58,"column":11,"nodeType":"185","messageId":"178","endLine":58,"endColumn":38},{"ruleId":"175","severity":1,"message":"176","line":60,"column":11,"nodeType":"177","messageId":"178","endLine":60,"endColumn":22},{"ruleId":"175","severity":1,"message":"176","line":86,"column":5,"nodeType":"177","messageId":"178","endLine":86,"endColumn":16},{"ruleId":"175","severity":1,"message":"176","line":87,"column":5,"nodeType":"177","messageId":"178","endLine":87,"endColumn":16},{"ruleId":"175","severity":1,"message":"176","line":91,"column":5,"nodeType":"177","messageId":"178","endLine":91,"endColumn":16},{"ruleId":"179","severity":1,"message":"215","line":109,"column":6,"nodeType":"181","endLine":109,"endColumn":8,"suggestions":"217"},{"ruleId":"175","severity":1,"message":"176","line":156,"column":17,"nodeType":"177","messageId":"178","endLine":156,"endColumn":28},{"ruleId":"175","severity":1,"message":"176","line":29,"column":5,"nodeType":"177","messageId":"178","endLine":29,"endColumn":16},{"ruleId":"175","severity":1,"message":"176","line":33,"column":5,"nodeType":"177","messageId":"178","endLine":33,"endColumn":16},{"ruleId":"175","severity":1,"message":"176","line":44,"column":7,"nodeType":"177","messageId":"178","endLine":44,"endColumn":18},{"ruleId":"211","severity":1,"message":"212","line":46,"column":15,"nodeType":"213","messageId":"214","endLine":46,"endColumn":24},{"ruleId":"175","severity":1,"message":"176","line":47,"column":11,"nodeType":"177","messageId":"178","endLine":47,"endColumn":22},{"ruleId":"211","severity":1,"message":"212","line":49,"column":16,"nodeType":"213","messageId":"214","endLine":49,"endColumn":25},{"ruleId":"175","severity":1,"message":"176","line":50,"column":11,"nodeType":"177","messageId":"178","endLine":50,"endColumn":22},{"ruleId":"211","severity":1,"message":"212","line":52,"column":30,"nodeType":"213","messageId":"214","endLine":52,"endColumn":39},{"ruleId":"175","severity":1,"message":"176","line":53,"column":9,"nodeType":"177","messageId":"178","endLine":53,"endColumn":20},{"ruleId":"211","severity":1,"message":"212","line":56,"column":31,"nodeType":"213","messageId":"214","endLine":56,"endColumn":40},{"ruleId":"183","severity":1,"message":"184","line":62,"column":7,"nodeType":"185","messageId":"178","endLine":62,"endColumn":42},{"ruleId":"183","severity":1,"message":"184","line":143,"column":11,"nodeType":"185","messageId":"178","endLine":143,"endColumn":64},"no-console","Unexpected console statement.","MemberExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'firstOptionFunc'. Either include it or remove the dependency array.","ArrayExpression",["218"],"no-alert","Unexpected alert.","CallExpression","React Hook useEffect has missing dependencies: 'nowBreed' and 'nowPetName'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPetname' needs the current value of 'nowPetName'.",["219"],"lines-around-directive",["220"],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],["220"],[],[],[],["220"],[],[],[],"React Hook useEffect contains a call to 'setToday'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [getDateType] as a second argument to the useEffect Hook.","Identifier",["221"],"React Hook useEffect has a missing dependency: 'observer'. Either include it or remove the dependency array.",["222"],"React Hook useEffect has missing dependencies: 'Card' and 'idValue'. Either include them or remove the dependency array.",["223"],"func-names","Unexpected unnamed function.","FunctionExpression","unnamed","React Hook useEffect has a missing dependency: 'getDateType'. Either include it or remove the dependency array.",["224"],["225"],{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},"padding-line-between-statements",{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"236","fix":"238"},"Update the dependencies array to be: [firstOptionFunc]",{"range":"239","text":"240"},"Update the dependencies array to be: [isModalOn, nowBreed, nowPetName]",{"range":"241","text":"242"},"Add dependencies array: [getDateType]",{"range":"243","text":"244"},"Update the dependencies array to be: [observer]",{"range":"245","text":"246"},"Update the dependencies array to be: [Card, idValue, targetId]",{"range":"247","text":"248"},"Update the dependencies array to be: [getDateType]",{"range":"249","text":"250"},{"range":"251","text":"250"},[960,962],"[firstOptionFunc]",[4946,4957],"[isModalOn, nowBreed, nowPetName]",[2868,2868],", [getDateType]",[707,709],"[observer]",[683,693],"[Card, idValue, targetId]",[7744,7746],"[getDateType]",[2881,2883]]