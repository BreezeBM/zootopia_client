[{"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostModal/PostModal.jsx":"1","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/LandingPage/LandingPage.jsx":"2","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/App.jsx":"3","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/CropModal/CropModal.jsx":"4","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostNewFormModal/PostNewFormModal.jsx":"5","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Nav/Nav.jsx":"6","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/MypageModal/MypageModal.jsx":"7","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/MainPage/MainPage.jsx":"8","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostDeleteModal/PostDeleteModal.jsx":"9","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Modal/Modal.jsx":"10","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComment/SubComment.jsx":"11"},{"size":16478,"mtime":1608221384621,"results":"12","hashOfConfig":"13"},{"size":2751,"mtime":1608123232636,"results":"14","hashOfConfig":"13"},{"size":5571,"mtime":1608182550547,"results":"15","hashOfConfig":"13"},{"size":4562,"mtime":1608182190782,"results":"16","hashOfConfig":"13"},{"size":8248,"mtime":1608172139360,"results":"17","hashOfConfig":"13"},{"size":2402,"mtime":1608221173309,"results":"18","hashOfConfig":"13"},{"size":9152,"mtime":1608182407795,"results":"19","hashOfConfig":"13"},{"size":5520,"mtime":1608221480103,"results":"20","hashOfConfig":"13"},{"size":2399,"mtime":1608178159135,"results":"21","hashOfConfig":"13"},{"size":588,"mtime":1608190756674,"results":"22","hashOfConfig":"13"},{"size":5890,"mtime":1608250671129,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"19cocba",{"filePath":"26","messages":"27","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostModal/PostModal.jsx",["49","50","51","52","53","54","55","56","57","58","59","60","61","62","63"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/LandingPage/LandingPage.jsx",["64","65","66","67","68","69"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/App.jsx",["70","71","72"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/CropModal/CropModal.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostNewFormModal/PostNewFormModal.jsx",["73","74"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Nav/Nav.jsx",["75"],"/* eslint-disable radix */\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport styles from './Nav.module.css';\nimport logoImg from '../../images/zootopiaLogo.png';\nimport MypageModal from '../MypageModal/MypageModal';\n\nconst Nav = ({\n  kind,\n  userProfile,\n  acceptUserData,\n  setUserProfile,\n  profile,\n  acceptPosts,\n  setProfile,\n}) => {\n  const [isMypageOn, setIsMypageOn] = useState(false);\n  const history = useHistory();\n  const viewMypage = () => {\n    if (isMypageOn) {\n      document.body.style.position = '';\n      document.body.style.top = '';\n      window.scrollTo(0, parseInt(scrollY || '0') * -1);\n      setIsMypageOn(!isMypageOn);\n    } else {\n      document.body.style.position = 'fixed';\n      document.body.style.top = `-${window.scrollY}px`;\n      setIsMypageOn(!isMypageOn);\n    }\n  };\n\n  const clickLogoFunc = () => {\n    if (window.location.href === 'https://www.codestates-project.tk/main') {\n      acceptPosts(0);\n      acceptUserData(0);\n    }\n    history.push('/main');\n  };\n\n  const logoutFunc = async () => {\n    try {\n      await axios.post('https://server.codestates-project.tk/auth/logout', {\n        withCredentials: true,\n      });\n      history.push('/');\n    } catch (err) {\n      if (err.response.status === 401) {\n        history.push('/');\n      } else {\n        console.log(err);\n      }\n    }\n  };\n\n  return (\n    <>\n      {Object.keys(profile).length !== 0 && (\n        <MypageModal\n          kind={kind}\n          setProfile={setProfile}\n          userProfile={userProfile}\n          setUserProfile={setUserProfile}\n          profile={profile}\n          isModalOn={isMypageOn}\n          handleClose={viewMypage}\n        />\n      )}\n\n      <div className={styles.navBar}>\n        <img\n          className={styles.logoImg}\n          src={logoImg}\n          alt=\"logo\"\n          onClick={clickLogoFunc}\n        />\n        <div className={styles.menu}>\n          <div\n            className={styles.chat}\n            onClick={() => {\n              history.push('/chat');\n            }}\n          >\n            Chat\n          </div>\n          <div className={styles.mypage} onClick={viewMypage}>\n            Mypage\n          </div>\n          <div className={styles.logout} onClick={logoutFunc}>\n            Logout\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\nexport default Nav;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/MypageModal/MypageModal.jsx",["76","77","78","79"],"import { useEffect, React, useRef, useState } from 'react';\nimport axios from 'axios';\n\nimport styles from './MypageModal.module.css';\nimport Modal from '../Modal/Modal';\nimport logoImg from '../../images/logo.png';\nimport DeleteModal from '../DeleteModal/DeleteModal';\nimport CropModal from '../CropModal/CropModal';\n\nconst MypageModal = ({\n  setProfile,\n  kind,\n  userProfile,\n  setUserProfile,\n  profile,\n  isModalOn,\n  handleClose,\n}) => {\n  // img 변경관련 로직\n  const [petnameCaution, setPetnameCaution] = useState(null);\n  const [breedCaution, setBreedCaution] = useState(null);\n  const [cropModalOn, setCropModalOn] = useState(false);\n  const handleCropModalOn = () => {\n    setCropModalOn(!cropModalOn);\n  };\n  const [imgSrc, setImgSrc] = useState(null);\n  const [nowImg, setNowImg] = useState(profile.thumbnail);\n  // const handleNowImg = (newImg) => {\n  //   setNowImg(newImg);\n  // };\n\n  const changeProfile = (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      // html5의 fileAPI\n      const reader = new FileReader();\n      reader.readAsDataURL(e.target.files[0]);\n      reader.addEventListener('load', () => {\n        setImgSrc(reader.result);\n      });\n      handleCropModalOn();\n    }\n  };\n\n  // 서버에서 보내준 정보를 렌더링(초기)할 때 useState 디폴트 값으로 받기\n  // + 유효성 검사 로직\n  const [nowPetName, setNowPetName] = useState(userProfile.petName);\n  const [nowBreed, setNowBreed] = useState(userProfile.breed);\n  const petnameRef = useRef(null);\n  const breedRef = useRef(null);\n\n  const [petName, setPetname] = useState(userProfile.petName);\n  const [breed, setBreed] = useState(userProfile.breed);\n  const [checked, setChecked] = useState({ petname: true, breed: true });\n\n  // 유효성 검사 로직\n  const checkInform = (e) => {\n    if (e.target.name === 'petname') {\n      setChecked({ ...checked, petname: true });\n      if (e.target.value.length > 18 || e.target.value.length === 0) {\n        setChecked({ ...checked, petname: false });\n        setPetnameCaution(\n          '펫네임은 최소 1글자 이상 18글자 이하로 작성해주세요',\n        );\n      }\n      setPetname(e.target.value);\n    } else if (e.target.name === 'breed') {\n      setChecked({ ...checked, breed: true });\n      if (e.target.value.length > 18 || e.target.value.length === 0) {\n        setChecked({ ...checked, breed: false });\n        setBreedCaution('품종은 최소 1글자 이상 18글자 이하로 작성해주세요');\n      }\n      setBreed(e.target.value);\n    }\n  };\n\n  // 실제 펫네임을 변경하기 위해 서버에 PATCH 요청을 보내는 로직\n  const changePetname = async () => {\n    if (checked.petname) {\n      try {\n        const response = await axios.patch(\n          'https://server.codestates-project.tk/user/petname',\n          {\n            petName,\n          },\n          { withCredentials: true },\n        );\n        if (response.status === 201) {\n          setNowPetName(petName);\n          setPetname(petName);\n          if (kind === 'latest' || kind === 'user') {\n            setProfile({ ...profile, petName });\n          }\n          setUserProfile({ ...userProfile, petName });\n          petnameRef.current.blur();\n        }\n      } catch (err) {\n        // 중복 펫네임 409\n        if (err.response.status === 501) {\n          alert('some errors occur at server, please try again');\n        } else if (err.response.status === 409) {\n          setChecked({ ...checked, petname: false });\n          setPetnameCaution('동일한 닉네임으로의 변경은 불가능합니다');\n        } else {\n          console.log(err);\n        }\n      }\n    }\n  };\n\n  // 실제 품종을 변경하기 위해 서버에 PATCH 요청을 보내는 로직\n  const changeBreed = async () => {\n    if (checked.breed) {\n      try {\n        const response = await axios.patch(\n          'https://server.codestates-project.tk/user/breed',\n          {\n            breed,\n          },\n          { withCredentials: true },\n        );\n        if (response.status === 201) {\n          setNowBreed(breed);\n          setBreed(breed);\n          if (kind === 'latest' || kind === 'user') {\n            setProfile({ ...profile, breed });\n          }\n          setUserProfile({ ...userProfile, breed });\n          breedRef.current.blur();\n        }\n      } catch (err) {\n        if (err.response.status === 501) {\n          alert('some errors occur at server, please try again');\n        } else if (err.response.status === 409) {\n          setChecked({ ...checked, breed: false });\n          setPetnameCaution('동일한 품종으로의 변경은 불가능합니다');\n        }\n      }\n    }\n  };\n\n  const resetAndTurnOffTheModal = () => {\n    setPetname(nowPetName);\n    setBreed(nowBreed);\n    setChecked({ petname: true, breed: true });\n    handleClose();\n  };\n\n  // 회원 탈퇴 모달은 디폴트 모달을 재활용하지 않는 것이기에 따로 state로 관리\n  const [deleteModalOn, setDeleteModalOn] = useState(false);\n  const viewDeleteModal = () => {\n    setDeleteModalOn(!deleteModalOn);\n  };\n\n  useEffect(() => {\n    if (isModalOn === false) {\n      setPetname(nowPetName);\n      setBreed(nowBreed);\n      setChecked({ petname: true, breed: true });\n    }\n  }, [isModalOn]);\n\n  return (\n    <>\n      <DeleteModal isModalOn={deleteModalOn} handleClose={viewDeleteModal} />\n      <Modal isModalOn={isModalOn} handleClose={resetAndTurnOffTheModal}>\n        <div className={styles.MypageModal}>\n          <div className={styles.profile}>\n            <div className={styles.imgPart}>\n              <img src={nowImg} className={styles.profileImg} alt=\"profile\" />\n            </div>\n            <div className={styles.informPart}>\n              <div className={styles.title}>프로필 사진</div>\n              <input\n                id=\"profileImgInput\"\n                type=\"file\"\n                className={styles.profileImgInput}\n                onChange={changeProfile}\n              />\n              <label htmlFor=\"profileImgInput\">\n                <div className={styles.editButton}>Edit Picture</div>\n              </label>\n            </div>\n          </div>\n          <div className={styles.editPart}>\n            <div className={styles.petnameEdit}>\n              <div className={styles.petnameTitle}>\n                <img className={styles.logoImg} src={logoImg} alt=\"logo\" />\n                Pet Name\n              </div>\n              <div className={styles.petnameEditPart}>\n                <input\n                  ref={petnameRef}\n                  className={styles.myPageInput}\n                  spellCheck={false}\n                  onChange={checkInform}\n                  value={petName}\n                  name=\"petname\"\n                />\n                <button\n                  className={`${styles.informEditButton} ${\n                    checked.petname && styles.isOn\n                  }`}\n                  type=\"button\"\n                  onClick={changePetname}\n                >\n                  Edit\n                </button>\n              </div>\n              {checked.petname ? null : (\n                <div className={styles.caution}>{petnameCaution}</div>\n              )}\n            </div>\n            <div className={styles.breedEdit}>\n              <div className={styles.breedTitle}>\n                <img className={styles.logoImg} src={logoImg} alt=\"logo\" />\n                Breed\n              </div>\n              <div className={styles.breedEditPart}>\n                <input\n                  ref={breedRef}\n                  className={styles.myPageInput}\n                  spellCheck={false}\n                  name=\"breed\"\n                  value={breed}\n                  onChange={checkInform}\n                />\n                <button\n                  className={`${styles.informEditButton} ${\n                    checked.breed && styles.isOn\n                  }`}\n                  type=\"button\"\n                  onClick={changeBreed}\n                >\n                  Edit\n                </button>\n              </div>\n              {checked.breed ? null : (\n                <div className={styles.caution}>{breedCaution}</div>\n              )}\n            </div>\n            <div className={styles.deleteEdit}>\n              <div className={styles.deleteTitle}>\n                <img className={styles.logoImg} src={logoImg} alt=\"logo\" />\n                Delete Account\n              </div>\n              <button\n                id={styles.deleteButton}\n                className={styles.deleteEditButton}\n                type=\"button\"\n                onClick={viewDeleteModal}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      </Modal>\n      <CropModal\n        setProfile={setProfile}\n        profile={profile}\n        userProfile={userProfile}\n        kind={kind}\n        setUserProfile={setUserProfile}\n        setNowImg={setNowImg}\n        imgSrc={imgSrc}\n        setImgSrc={setImgSrc}\n        isModalOn={cropModalOn}\n        handleClose={handleCropModalOn}\n      />\n    </>\n  );\n};\n\nexport default MypageModal;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/MainPage/MainPage.jsx",["80","81"],"/* eslint-disable radix */\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport styles from './MainPage.module.css';\nimport Posts from '../../components/Posts/Posts';\nimport addPostImg from '../../images/bark.png';\nimport PostModal from '../../components/PostModal/PostModal';\nimport PostNewFormModal from '../../components/PostNewFormModal/PostNewFormModal';\n// test용 fakedata\n// import fakedata from '../../fakeData';\n\nconst MainPage = ({\n  from,\n  offsetCount,\n  acceptUserData,\n  kind,\n  setProfileForDeleteAndAdd,\n  userProfile,\n  isDone,\n  setUserProfile,\n  setPosts,\n  posts,\n  getPosts,\n  profile,\n  deletePost,\n  getMorePosts,\n  axiosInform,\n}) => {\n  // 1) ComponentDidMount(첫 렌더링시에)로 유저 정보와 latest posts 정보를 받아오고 re render\n  const firstOptionFunc = () => {\n    getPosts(0);\n    acceptUserData(0);\n  };\n\n  useEffect(() => {\n    firstOptionFunc();\n  }, []);\n\n  const history = useHistory();\n\n  // 새로운 포스트를 만드는 모달창을 끄고, 켜는 state & functions\n  const [isAddPostOn, setIsAddPostOn] = useState(false);\n  const viewAddPost = () => {\n    if (isAddPostOn) {\n      document.body.style.position = '';\n      document.body.style.top = '';\n      window.scrollTo(0, parseInt(scrollY || '0') * -1);\n      setIsAddPostOn(!isAddPostOn);\n    } else {\n      document.body.style.position = 'fixed';\n      document.body.style.top = `-${window.scrollY}px`;\n      setIsAddPostOn(!isAddPostOn);\n    }\n  };\n  // #######################################################\n\n  // #######################################################\n  // postModal창이 켜져있는지 아닌지, default : false\n  // PostModal창의 내용들 refresh 하는 function\n  const [postModaldata, setPostModalData] = useState({});\n  const refreshPost = async (data) => {\n    setPostModalData((prev) => {\n      return { ...prev, comments: data };\n    });\n  };\n  // #######################################################\n\n  // #######################################################\n  // 포스트 보기\n  const [isPostOn, setIsPostOn] = useState(false);\n  const viewPost = async (postId) => {\n    if (isPostOn) {\n      // 만약에 켜져있으면, false로 다시 끄기\n      document.body.style.position = '';\n      document.body.style.top = '';\n      window.scrollTo(0, parseInt(scrollY || '0') * -1);\n      setIsPostOn(false);\n    } else {\n      document.body.style.position = 'fixed';\n      document.body.style.top = `-${window.scrollY}px`;\n      try {\n        const response = await axios.get(\n          `https://server.codestates-project.tk/post/${postId}`,\n          { withCredentials: true },\n        );\n        setPostModalData(response.data);\n      } catch (err) {\n        if (err.response.status === 401) {\n          history.push('/');\n        } else {\n          console.log(err);\n        }\n      } finally {\n        setIsPostOn(true);\n      }\n      // setPostModalData(fakedata.post);\n      // setIsPostOn(true);\n    }\n  };\n  // #######################################################\n\n  // #######################################################\n  // 프로필 div를 눌렀을 때 해당 프로필 grid data를 불러오는 logic\n  const viewProfile = () => {\n    getPosts(profile.userId);\n  };\n  // #######################################################\n\n  return (\n    <>\n      <PostNewFormModal\n        setProfileForDeleteAndAdd={setProfileForDeleteAndAdd}\n        setUserProfile={setUserProfile}\n        postsKind={posts.kind}\n        setPosts={setPosts}\n        isModalOn={isAddPostOn}\n        handleClose={viewAddPost}\n      />\n      {isPostOn ? (\n        <PostModal\n          axiosInform={axiosInform}\n          posts={posts}\n          kind={kind}\n          setProfileForDeleteAndAdd={setProfileForDeleteAndAdd}\n          setUserProfile={setUserProfile}\n          userProfileId={userProfile.userId}\n          setPostModalData={setPostModalData}\n          refreshPost={refreshPost}\n          setPosts={setPosts}\n          getPosts={getPosts}\n          getUserData={acceptUserData}\n          postData={postModaldata}\n          isModalOn={isPostOn}\n          handleClose={viewPost}\n          deletePost={deletePost}\n        />\n      ) : null}\n      <div className={styles.gridFrame} />\n      <div className={styles.profile} onClick={viewProfile}>\n        <img\n          src={profile.thumbnail}\n          className={styles.image}\n          alt=\"profile_img\"\n        />\n        <div className={styles.userInform}>\n          <div className={styles.petName}>{profile.petName}</div>\n          <div className={styles.breed}>{profile.breed}</div>\n          <div className={styles.postCountPart}>\n            <div className={styles.postsCount}>Posts</div>\n            <div className={styles.postsCountNumber}>{profile.postCount}</div>\n          </div>\n        </div>\n      </div>\n      <Posts\n        axiosInform={axiosInform}\n        getMorePosts={getMorePosts}\n        from={from}\n        offsetCount={offsetCount}\n        setPosts={setPosts}\n        userProfile={userProfile}\n        isDone={isDone}\n        userId={profile.userId}\n        addPosts={getPosts}\n        kind={posts.kind}\n        posts={posts.postData}\n        postsCount={posts.postsCount}\n        viewPost={viewPost}\n      />\n      <div className={styles.addButton} onClick={viewAddPost}>\n        <img className={styles.addPostImg} src={addPostImg} alt=\"addPost\" />\n      </div>\n    </>\n  );\n};\n\nexport default MainPage;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostDeleteModal/PostDeleteModal.jsx",["82"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Modal/Modal.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComment/SubComment.jsx",["83","84","85","86","87"],{"ruleId":"88","severity":1,"message":"89","line":87,"column":9,"nodeType":"90","messageId":"91","endLine":87,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":161,"column":11,"nodeType":"94","messageId":"91","endLine":161,"endColumn":38},{"ruleId":"88","severity":1,"message":"89","line":163,"column":11,"nodeType":"90","messageId":"91","endLine":163,"endColumn":22},{"ruleId":"88","severity":1,"message":"89","line":197,"column":11,"nodeType":"90","messageId":"91","endLine":197,"endColumn":22},{"ruleId":"88","severity":1,"message":"89","line":220,"column":11,"nodeType":"90","messageId":"91","endLine":220,"endColumn":22},{"ruleId":"88","severity":1,"message":"89","line":244,"column":9,"nodeType":"90","messageId":"91","endLine":244,"endColumn":20},{"ruleId":"88","severity":1,"message":"89","line":250,"column":5,"nodeType":"90","messageId":"91","endLine":250,"endColumn":16},{"ruleId":"88","severity":1,"message":"89","line":251,"column":5,"nodeType":"90","messageId":"91","endLine":251,"endColumn":16},{"ruleId":"88","severity":1,"message":"89","line":252,"column":5,"nodeType":"90","messageId":"91","endLine":252,"endColumn":16},{"ruleId":"95","severity":1,"message":"96","line":264,"column":13,"nodeType":"97","messageId":"98","endLine":264,"endColumn":22},{"ruleId":"88","severity":1,"message":"89","line":265,"column":9,"nodeType":"90","messageId":"91","endLine":265,"endColumn":20},{"ruleId":"88","severity":1,"message":"89","line":267,"column":9,"nodeType":"90","messageId":"91","endLine":267,"endColumn":20},{"ruleId":"95","severity":1,"message":"96","line":269,"column":14,"nodeType":"97","messageId":"98","endLine":269,"endColumn":23},{"ruleId":"88","severity":1,"message":"89","line":270,"column":9,"nodeType":"90","messageId":"91","endLine":270,"endColumn":20},{"ruleId":"99","severity":1,"message":"100","line":299,"column":6,"nodeType":"101","endLine":299,"endColumn":8,"suggestions":"102"},{"ruleId":"95","severity":1,"message":"96","line":29,"column":15,"nodeType":"97","messageId":"98","endLine":29,"endColumn":24},{"ruleId":"88","severity":1,"message":"89","line":30,"column":11,"nodeType":"90","messageId":"91","endLine":30,"endColumn":22},{"ruleId":"95","severity":1,"message":"96","line":33,"column":16,"nodeType":"97","messageId":"98","endLine":33,"endColumn":25},{"ruleId":"88","severity":1,"message":"89","line":34,"column":11,"nodeType":"90","messageId":"91","endLine":34,"endColumn":22},{"ruleId":"88","severity":1,"message":"89","line":46,"column":7,"nodeType":"90","messageId":"91","endLine":46,"endColumn":18},{"ruleId":"99","severity":1,"message":"103","line":52,"column":6,"nodeType":"101","endLine":52,"endColumn":8,"suggestions":"104"},{"ruleId":"88","severity":1,"message":"89","line":95,"column":9,"nodeType":"90","messageId":"91","endLine":95,"endColumn":20},{"ruleId":"88","severity":1,"message":"89","line":131,"column":9,"nodeType":"90","messageId":"91","endLine":131,"endColumn":20},{"ruleId":"88","severity":1,"message":"89","line":150,"column":9,"nodeType":"90","messageId":"91","endLine":150,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":62,"column":7,"nodeType":"94","messageId":"91","endLine":62,"endColumn":42},{"ruleId":"92","severity":1,"message":"93","line":144,"column":11,"nodeType":"94","messageId":"91","endLine":144,"endColumn":64},{"ruleId":"88","severity":1,"message":"89","line":51,"column":9,"nodeType":"90","messageId":"91","endLine":51,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":99,"column":11,"nodeType":"94","messageId":"91","endLine":99,"endColumn":65},{"ruleId":"88","severity":1,"message":"89","line":104,"column":11,"nodeType":"90","messageId":"91","endLine":104,"endColumn":22},{"ruleId":"92","severity":1,"message":"93","line":132,"column":11,"nodeType":"94","messageId":"91","endLine":132,"endColumn":65},{"ruleId":"99","severity":1,"message":"105","line":160,"column":6,"nodeType":"101","endLine":160,"endColumn":17,"suggestions":"106"},{"ruleId":"99","severity":1,"message":"107","line":38,"column":6,"nodeType":"101","endLine":38,"endColumn":8,"suggestions":"108"},{"ruleId":"88","severity":1,"message":"89","line":92,"column":11,"nodeType":"90","messageId":"91","endLine":92,"endColumn":22},{"ruleId":"88","severity":1,"message":"89","line":40,"column":9,"nodeType":"90","messageId":"91","endLine":40,"endColumn":20},{"ruleId":"88","severity":1,"message":"89","line":52,"column":9,"nodeType":"90","messageId":"91","endLine":52,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":75,"column":11,"nodeType":"94","messageId":"91","endLine":75,"endColumn":38},{"ruleId":"88","severity":1,"message":"89","line":77,"column":11,"nodeType":"90","messageId":"91","endLine":77,"endColumn":22},{"ruleId":"99","severity":1,"message":"109","line":116,"column":3,"nodeType":"110","endLine":116,"endColumn":12,"suggestions":"111"},{"ruleId":"88","severity":1,"message":"89","line":169,"column":13,"nodeType":"90","messageId":"91","endLine":169,"endColumn":24},"no-console","Unexpected console statement.","MemberExpression","unexpected","no-alert","Unexpected alert.","CallExpression","func-names","Unexpected unnamed function.","FunctionExpression","unnamed","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getDateType'. Either include it or remove the dependency array.","ArrayExpression",["112"],"React Hook useEffect has a missing dependency: 'checkToken'. Either include it or remove the dependency array.",["113"],"React Hook useEffect has missing dependencies: 'nowBreed' and 'nowPetName'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPetname' needs the current value of 'nowPetName'.",["114"],"React Hook useEffect has a missing dependency: 'firstOptionFunc'. Either include it or remove the dependency array.",["115"],"React Hook useEffect contains a call to 'setToday'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [getDateType] as a second argument to the useEffect Hook.","Identifier",["116"],{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},"Update the dependencies array to be: [getDateType]",{"range":"127","text":"128"},"Update the dependencies array to be: [checkToken]",{"range":"129","text":"130"},"Update the dependencies array to be: [isModalOn, nowBreed, nowPetName]",{"range":"131","text":"132"},"Update the dependencies array to be: [firstOptionFunc]",{"range":"133","text":"134"},"Add dependencies array: [getDateType]",{"range":"135","text":"136"},[8395,8397],"[getDateType]",[1748,1750],"[checkToken]",[4870,4881],"[isModalOn, nowBreed, nowPetName]",[942,944],"[firstOptionFunc]",[3035,3035],", [getDateType]"]