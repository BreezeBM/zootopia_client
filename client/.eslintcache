[{"/Users/user/Desktop/final-project/zootopia_client/client/src/index.js":"1","/Users/user/Desktop/final-project/zootopia_client/client/src/components/ChatUser/ChatUser.jsx":"2","/Users/user/Desktop/final-project/zootopia_client/client/src/components/MyChat/MyChat.jsx":"3","/Users/user/Desktop/final-project/zootopia_client/client/src/components/MypageModal/MypageModal.jsx":"4","/Users/user/Desktop/final-project/zootopia_client/client/src/pages/MainPage/MainPage.jsx":"5","/Users/user/Desktop/final-project/zootopia_client/client/src/pages/Chatpage/ChatPage.jsx":"6","/Users/user/Desktop/final-project/zootopia_client/client/src/pages/LandingPage/LandingPage.jsx":"7","/Users/user/Desktop/final-project/zootopia_client/client/src/components/Posts/Posts.jsx":"8","/Users/user/Desktop/final-project/zootopia_client/client/src/components/Nav/Nav.jsx":"9","/Users/user/Desktop/final-project/zootopia_client/client/src/components/CropModal/CropModal.jsx":"10","/Users/user/Desktop/final-project/zootopia_client/client/src/components/PostModal/PostModal.jsx":"11","/Users/user/Desktop/final-project/zootopia_client/client/src/components/UserChat/UserChat.jsx":"12"},{"size":309,"mtime":1606450337812,"results":"13","hashOfConfig":"14"},{"size":1109,"mtime":1607067627602,"results":"15","hashOfConfig":"14"},{"size":850,"mtime":1607353413147,"results":"16","hashOfConfig":"14"},{"size":8107,"mtime":1606919965767,"results":"17","hashOfConfig":"14"},{"size":4512,"mtime":1607061628320,"results":"18","hashOfConfig":"14"},{"size":6464,"mtime":1607353869240,"results":"19","hashOfConfig":"14"},{"size":2195,"mtime":1607315950358,"results":"20","hashOfConfig":"14"},{"size":1465,"mtime":1607003696213,"results":"21","hashOfConfig":"14"},{"size":1149,"mtime":1607003696212,"results":"22","hashOfConfig":"14"},{"size":4266,"mtime":1606919965765,"results":"23","hashOfConfig":"14"},{"size":2960,"mtime":1607061442581,"results":"24","hashOfConfig":"14"},{"size":525,"mtime":1607354314127,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"mdxs5q",{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":2,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/user/Desktop/final-project/zootopia_client/client/src/index.js",[],["56","57","58","59"],"/Users/user/Desktop/final-project/zootopia_client/client/src/components/ChatUser/ChatUser.jsx",["60","61","62"],"import React, { createRef, useEffect, useState } from 'react';\nimport styles from './ChatUser.module.css';\nimport iguanaImg from '../../images/iguana.jpeg';\n\nconst ChatUser = ({ idValue, state, stateFunc }) => {\n  const Card = createRef();\n\n  const [changes, changeToggle] = useState(state);\n\n  useEffect(() => {\n    if (state !== idValue && changeToggle) {\n      Card.current.style.backgroundColor = 'white';\n    }\n  });\n\n  const handleCard = function () {\n    stateFunc(idValue);\n    console.log(changes);\n    Card.current.style.backgroundColor = 'rgba(255,198,0)';\n  };\n  return (\n    <div className={styles.usercard} ref={Card} onClick={handleCard}>\n      <img className={styles.userProfile} src={iguanaImg} alt=\"userprofile\" />\n      <div className={styles.username}>\n        크리스마스에는눈이내릴까요?왔음좋겠어\n      </div>\n      <div className={styles.userbreed}>\n        모두가행복한나늘들을보낼수있길바랍니다20자넘는다\n      </div>\n      <div className={styles.status}>안 읽은 메시지가 있습니다.</div>\n    </div>\n  );\n};\nexport default ChatUser;\n","/Users/user/Desktop/final-project/zootopia_client/client/src/components/MyChat/MyChat.jsx",[],"/Users/user/Desktop/final-project/zootopia_client/client/src/components/MypageModal/MypageModal.jsx",["63","64","65"],"import { createRef, React, useState } from 'react';\nimport axios from 'axios';\n\nimport styles from './MypageModal.module.css';\nimport Modal from '../Modal/Modal';\nimport defaultProfile from '../../images/defaultProfile.png';\nimport logoImg from '../../images/logo.png';\nimport DeleteModal from '../DeleteModal/DeleteModal';\nimport CropModal from '../CropModal/CropModal';\n\nconst MypageModal = ({ isModalOn, handleClose }) => {\n  // img 변경관련 로직\n  const [cropModalOn, setCropModalOn] = useState(false);\n  const handleCropModalOn = () => {\n    setCropModalOn(!cropModalOn);\n  };\n  const [imgSrc, setImgSrc] = useState(null);\n  const [nowImg, setNowImg] = useState(defaultProfile);\n  // const handleNowImg = (newImg) => {\n  //   setNowImg(newImg);\n  // };\n\n  const changeProfile = (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      // html5의 fileAPI\n      const reader = new FileReader();\n      reader.readAsDataURL(e.target.files[0]);\n      reader.addEventListener('load', () => {\n        setImgSrc(reader.result);\n      });\n      handleCropModalOn();\n    }\n  };\n\n  // 서버에서 보내준 정보를 렌더링(초기)할 때 useState 디폴트 값으로 받기\n  // + 유효성 검사 로직\n  const [nowPetName, setNowPetName] = useState('스눕독');\n  const [nowBreed, setNowBreed] = useState('시바견');\n  const petnameRef = createRef();\n  const breedRef = createRef();\n\n  const [petName, setPetname] = useState(nowPetName);\n  const [breed, setBreed] = useState(nowBreed);\n  const [checked, setChecked] = useState({ petname: true, breed: true });\n\n  // 유효성 검사 로직\n  const checkInform = (e) => {\n    if (e.target.name === 'petname') {\n      setChecked({ ...checked, petname: true });\n      if (e.target.value.length > 18 || e.target.value.length === 0) {\n        setChecked({ ...checked, petname: false });\n      }\n      setPetname(e.target.value);\n    } else if (e.target.name === 'breed') {\n      setChecked({ ...checked, breed: true });\n      if (e.target.value.length > 18 || e.target.value.length === 0) {\n        setChecked({ ...checked, breed: false });\n      }\n      setBreed(e.target.value);\n    }\n  };\n\n  // 실제 펫네임을 변경하기 위해 서버에 PATCH 요청을 보내는 로직\n  const changePetname = async () => {\n    if (checked.petname) {\n      try {\n        const response = await axios.patch(\n          'https://server.codestates-project.tk/user/petname',\n          {\n            petName,\n          },\n          { withCredentials: true },\n        );\n        if (response.status === 201) {\n          setNowPetName(petName);\n          setPetname(petName);\n          petnameRef.current.blur(); // 해결하기\n        }\n      } catch (err) {\n        // 중복 펫네임 409\n        if (err.response.status === 501) {\n          alert('some errors occur at server, please try again');\n        } else if (err.response.status === 404) {\n          setChecked({ ...checked, petname: false });\n        } else {\n          console.log(err);\n        }\n      }\n    }\n  };\n\n  // 실제 품종을 변경하기 위해 서버에 PATCH 요청을 보내는 로직\n  const changeBreed = async () => {\n    if (checked.breed) {\n      try {\n        const response = await axios.patch(\n          'https://server.codestates-project.tk/user/breed',\n          {\n            breed,\n          },\n          { withCredentials: true },\n        );\n        if (response.status === 201) {\n          setNowBreed(breed);\n          setBreed(breed);\n          breedRef.current.blur();\n        }\n      } catch (err) {\n        if (err.response.status === 501) {\n          alert('some errors occur at server, please try again');\n        } else if (err.response.status === 404) {\n          setChecked({ ...checked, breed: false });\n        }\n      }\n    }\n  };\n\n  const resetAndTurnOffTheModal = () => {\n    setPetname(nowPetName);\n    setBreed(nowBreed);\n    setChecked({ petname: true, breed: true });\n    handleClose();\n  };\n\n  // 회원 탈퇴 모달은 디폴트 모달을 재활용하지 않는 것이기에 따로 state로 관리\n  const [deleteModalOn, setDeleteModalOn] = useState(false);\n  const viewDeleteModal = () => {\n    setDeleteModalOn(!deleteModalOn);\n  };\n\n  return (\n    <>\n      <DeleteModal isModalOn={deleteModalOn} handleClose={viewDeleteModal} />\n      <Modal isModalOn={isModalOn} handleClose={resetAndTurnOffTheModal}>\n        <div className={styles.MypageModal}>\n          <div className={styles.profile}>\n            <div className={styles.imgPart}>\n              <img src={nowImg} className={styles.profileImg} alt=\"profile\" />\n            </div>\n            <div className={styles.informPart}>\n              <div className={styles.title}>프로필 사진</div>\n              <input\n                id=\"profileImgInput\"\n                type=\"file\"\n                className={styles.profileImgInput}\n                onChange={changeProfile}\n              />\n              <label htmlFor=\"profileImgInput\">\n                <div className={styles.editButton}>Edit Picture</div>\n              </label>\n            </div>\n          </div>\n          <div className={styles.editPart}>\n            <div className={styles.petnameEdit}>\n              <div className={styles.petnameTitle}>\n                <img className={styles.logoImg} src={logoImg} alt=\"logo\" />\n                Pet Name\n              </div>\n              <div className={styles.petnameEditPart}>\n                <input\n                  ref={petnameRef}\n                  className={styles.myPageInput}\n                  spellCheck={false}\n                  onChange={checkInform}\n                  value={petName}\n                  name=\"petname\"\n                />\n                <button\n                  className={`${styles.informEditButton} ${\n                    checked.petname && styles.isOn\n                  }`}\n                  type=\"button\"\n                  onClick={changePetname}\n                >\n                  Edit\n                </button>\n              </div>\n              {checked.petname ? null : (\n                <div className={styles.caution}>\n                  펫네임은 최소 1글자 이상 18글자 이하로 작성해주세요\n                </div>\n              )}\n            </div>\n            <div className={styles.breedEdit}>\n              <div className={styles.breedTitle}>\n                <img className={styles.logoImg} src={logoImg} alt=\"logo\" />\n                Breed\n              </div>\n              <div className={styles.breedEditPart}>\n                <input\n                  ref={breedRef}\n                  className={styles.myPageInput}\n                  spellCheck={false}\n                  name=\"breed\"\n                  value={breed}\n                  onChange={checkInform}\n                />\n                <button\n                  className={`${styles.informEditButton} ${\n                    checked.breed && styles.isOn\n                  }`}\n                  type=\"button\"\n                  onClick={changeBreed}\n                >\n                  Edit\n                </button>\n              </div>\n              {checked.breed ? null : (\n                <div className={styles.caution}>\n                  품종은 최소 1글자 이상 18글자 이하로 작성해주세요\n                </div>\n              )}\n            </div>\n            <div className={styles.deleteEdit}>\n              <div className={styles.deleteTitle}>\n                <img className={styles.logoImg} src={logoImg} alt=\"logo\" />\n                Delete Account\n              </div>\n              <button\n                id={styles.deleteButton}\n                className={styles.deleteEditButton}\n                type=\"button\"\n                onClick={viewDeleteModal}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      </Modal>\n      <CropModal\n        setNowImg={setNowImg}\n        imgSrc={imgSrc}\n        setImgSrc={setImgSrc}\n        isModalOn={cropModalOn}\n        handleClose={handleCropModalOn}\n      />\n    </>\n  );\n};\n\nexport default MypageModal;\n",["66","67","68","69"],"/Users/user/Desktop/final-project/zootopia_client/client/src/pages/MainPage/MainPage.jsx",["70"],"/Users/user/Desktop/final-project/zootopia_client/client/src/pages/Chatpage/ChatPage.jsx",["71","72","73"],"/Users/user/Desktop/final-project/zootopia_client/client/src/pages/LandingPage/LandingPage.jsx",[],"/Users/user/Desktop/final-project/zootopia_client/client/src/components/Posts/Posts.jsx",[],"/Users/user/Desktop/final-project/zootopia_client/client/src/components/Nav/Nav.jsx",[],["74","75","76","77"],"/Users/user/Desktop/final-project/zootopia_client/client/src/components/CropModal/CropModal.jsx",[],"/Users/user/Desktop/final-project/zootopia_client/client/src/components/PostModal/PostModal.jsx",["78","79"],"import React, { useState } from 'react';\nimport styles from './PostModal.module.css';\nimport Modal from '../Modal/Modal';\nimport ImageSlide from '../ImageSlide/ImageSlide';\nimport Comments from '../Comments/Comments';\nimport dummyImg from '../../thumbnails/post_f.png';\nimport likeImg from '../../images/fulfilledHeart.png';\nimport unLikeImg from '../../images/unfulfilledHeart.png';\nimport chatImg from '../../images/chat.png';\n\nconst PostModal = ({ imageUrls, isModalOn, handleClose }) => {\n  const [like, setLike] = useState(false);\n  const handleLike = () => {\n    setLike(!like);\n  };\n  return (\n    <Modal isModalOn={isModalOn} handleClose={handleClose}>\n      <div className={styles.postModal}>\n        <ImageSlide imageUrls={imageUrls} />\n        <div className={styles.contents}>\n          <div className={styles.userArea}>\n            <div className={styles.profile_imgage}>\n              <img\n                className={styles.profile_image_img}\n                src={dummyImg}\n                alt=\"profile\"\n              />\n            </div>\n            <div\n              className={styles.profile_inform}\n              onClick={() => {\n                console.log('해당 유저 grid 정보 요청');\n              }}\n            >\n              <div className={styles.nickname}>\n                스눕독스눕독스눕독스눕독스눕독스눕독\n              </div>\n              <div className={styles.breed}>시바견</div>\n            </div>\n          </div>\n          <div className={styles.textArea}>\n            Normally a WordPress developer will need to perform the task of\n            filling up an empty theme with dummy content, and doing this\n            manually can be really time consuming\n          </div>\n          <div className={styles.date}>2020/11/28 22:22 (수)</div>\n          <div className={styles.buttonArea}>\n            {like ? (\n              <img\n                className={styles.like}\n                src={likeImg}\n                alt=\"like\"\n                onClick={handleLike}\n              />\n            ) : (\n              <img\n                className={styles.unLike}\n                src={unLikeImg}\n                alt=\"unlike\"\n                onClick={handleLike}\n              />\n            )}\n            <img className={styles.chatImg} src={chatImg} alt=\"chat\" />\n            <div className={styles.likeCount}>좋아요 12개</div>\n          </div>\n          <Comments />\n          <div className={styles.inputPart}>\n            <input\n              className={styles.commentInput}\n              spellCheck=\"false\"\n              type=\"text\"\n              placeholder=\"댓글 달기..\u001c\"\n            />\n            <div\n              className={styles.commentButton}\n              onClick={() => {\n                console.log('hi');\n              }}\n            >\n              게시\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default PostModal;\n","/Users/user/Desktop/final-project/zootopia_client/client/src/components/UserChat/UserChat.jsx",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":10,"column":3,"nodeType":"90","endLine":10,"endColumn":12,"suggestions":"91"},{"ruleId":"92","severity":1,"message":"93","line":16,"column":22,"nodeType":"94","messageId":"95","endLine":16,"endColumn":31},{"ruleId":"96","severity":1,"message":"97","line":18,"column":5,"nodeType":"98","messageId":"99","endLine":18,"endColumn":16},{"ruleId":"100","severity":1,"message":"101","line":82,"column":11,"nodeType":"102","messageId":"99","endLine":82,"endColumn":65},{"ruleId":"96","severity":1,"message":"97","line":86,"column":11,"nodeType":"98","messageId":"99","endLine":86,"endColumn":22},{"ruleId":"100","severity":1,"message":"101","line":110,"column":11,"nodeType":"102","messageId":"99","endLine":110,"endColumn":65},{"ruleId":"80","replacedBy":"103"},{"ruleId":"82","replacedBy":"104"},{"ruleId":"84","replacedBy":"105"},{"ruleId":"86","replacedBy":"106"},{"ruleId":"96","severity":1,"message":"97","line":16,"column":5,"nodeType":"98","messageId":"99","endLine":16,"endColumn":16},{"ruleId":"107","severity":2,"message":"108","line":37,"column":5,"nodeType":"90","messageId":"109","endLine":37,"endColumn":16,"fix":"110"},{"ruleId":"111","severity":2,"message":"112","line":40,"column":10,"nodeType":"113","messageId":"99","endLine":42,"endColumn":4,"fix":"114"},{"ruleId":"92","severity":1,"message":"93","line":49,"column":22,"nodeType":"94","messageId":"95","endLine":49,"endColumn":31},{"ruleId":"80","replacedBy":"115"},{"ruleId":"82","replacedBy":"116"},{"ruleId":"84","replacedBy":"117"},{"ruleId":"86","replacedBy":"118"},{"ruleId":"96","severity":1,"message":"97","line":32,"column":17,"nodeType":"98","messageId":"99","endLine":32,"endColumn":28},{"ruleId":"96","severity":1,"message":"97","line":77,"column":17,"nodeType":"98","messageId":"99","endLine":77,"endColumn":28},"lines-around-directive",["119"],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'changeToggle'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [state, idValue, Card] as a second argument to the useEffect Hook.","Identifier",["120"],"func-names","Unexpected unnamed function.","FunctionExpression","unnamed","no-console","Unexpected console statement.","MemberExpression","unexpected","no-alert","Unexpected alert.","CallExpression",["119"],[],[],[],"prefer-const","'testContent' is never reassigned. Use 'const' instead.","useConst",{"range":"121","text":"122"},"no-else-return","Unnecessary 'else' after 'return'.","BlockStatement",{"range":"123","text":"124"},["119"],[],[],[],"padding-line-between-statements",{"desc":"125","fix":"126"},[957,960],"const",[988,1163],"(el) => {\n  if (el.userId === 1) {\n    return <MyChat textData={el.text} dateData={el.time} />;\n  } \n    return <UserChat textData={el.text} dateData={el.time} />;\n  \n}","Add dependencies array: [state, idValue, Card]",{"range":"127","text":"128"},[419,419],", [state, idValue, Card]"]