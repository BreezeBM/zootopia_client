[{"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/ChatUser/ChatUser.jsx":"1","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Nav/Nav.jsx":"2","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Posts/Posts.jsx":"3","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/MainPage/MainPage.jsx":"4","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Post/Post.jsx":"5","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComment/SubComment.jsx":"6","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostNewFormModal/PostNewFormModal.jsx":"7","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comments/Comments.jsx":"8","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/ImageSlide/ImageSlide.jsx":"9","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comment/Comment.jsx":"10","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostCropModal/PostCropModal.jsx":"11","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostModal/PostModal.jsx":"12","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComments/SubComments.jsx":"13","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/App.jsx":"14","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/useIntersectionObserver/useIntersectionObserver.jsx":"15"},{"size":738,"mtime":1606960795042,"results":"16","hashOfConfig":"17"},{"size":1149,"mtime":1606960982085,"results":"18","hashOfConfig":"17"},{"size":1465,"mtime":1607001405447,"results":"19","hashOfConfig":"17"},{"size":4111,"mtime":1607001174760,"results":"20","hashOfConfig":"17"},{"size":342,"mtime":1606983425830,"results":"21","hashOfConfig":"17"},{"size":491,"mtime":1606809858419,"results":"22","hashOfConfig":"17"},{"size":7291,"mtime":1606908093380,"results":"23","hashOfConfig":"17"},{"size":377,"mtime":1606809858394,"results":"24","hashOfConfig":"17"},{"size":329,"mtime":1606809858400,"results":"25","hashOfConfig":"17"},{"size":616,"mtime":1606809858392,"results":"26","hashOfConfig":"17"},{"size":3570,"mtime":1606905749699,"results":"27","hashOfConfig":"17"},{"size":2927,"mtime":1606809858411,"results":"28","hashOfConfig":"17"},{"size":296,"mtime":1606809858420,"results":"29","hashOfConfig":"17"},{"size":600,"mtime":1606809858391,"results":"30","hashOfConfig":"17"},{"size":503,"mtime":1606996654303,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1n26zk8",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/ChatUser/ChatUser.jsx",["66"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Nav/Nav.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Posts/Posts.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/MainPage/MainPage.jsx",["67"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Post/Post.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComment/SubComment.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostNewFormModal/PostNewFormModal.jsx",["68"],"import { createRef, React, useState } from 'react';\n// import axios from 'axios';\nimport styles from './PostNewFormModal.module.css';\nimport close from '../../images/close.png';\nimport PostCropModal from '../PostCropModal/PostCropModal';\n\nconst PostNewFormModal = ({ isModalOn, handleClose }) => {\n  const imgInput1 = createRef();\n  const imgInput2 = createRef();\n  const imgInput3 = createRef();\n  const textAreaRef = createRef();\n  const [isCropModalOn, setIsCropModalOn] = useState(false);\n  const [inputNum, setInputNum] = useState(null);\n  const [checked, setChecked] = useState(false);\n  const [imgChecked, setImgChecked] = useState(false);\n\n  const handleCropModal = () => {\n    setIsCropModalOn(!isCropModalOn);\n  };\n  const [imgSrc, setImgSrc] = useState(null);\n  const [imgSrcs, setImgSrcs] = useState({ 1: '+', 2: '+', 3: '+' });\n\n  const setImgSrcsFunc = (inputNumber, urlSrc) => {\n    if (inputNumber === 1) {\n      setImgSrcs({ ...imgSrcs, 1: urlSrc });\n    } else if (inputNumber === 2) {\n      setImgSrcs({ ...imgSrcs, 2: urlSrc });\n    } else if (inputNumber === 3) {\n      setImgSrcs({ ...imgSrcs, 3: urlSrc });\n    }\n  };\n\n  const imgOnChange = (e) => {\n    setImgChecked(false);\n    try {\n      const urlSrc = URL.createObjectURL(e.target.files[0]);\n      if (e.target.name === 'imgInput1') {\n        setInputNum(1);\n        setImgSrc(urlSrc);\n        handleCropModal();\n      } else if (e.target.name === 'imgInput2') {\n        setInputNum(2);\n        setImgSrc(urlSrc);\n        handleCropModal();\n      } else if (e.target.name === 'imgInput3') {\n        setInputNum(3);\n        setImgSrc(urlSrc);\n        handleCropModal();\n      }\n    } catch (err) {\n      alert('we only accept image files');\n    }\n  };\n\n  const resetAndCloseModal = () => {\n    setImgSrcs({ 1: '+', 2: '+', 3: '+' });\n    setChecked(false);\n    setImgChecked(false);\n    textAreaRef.current.value = null;\n    handleClose();\n  };\n\n  const sendNewPost = async () => {\n    if (textAreaRef.current.value.trim().length === 0) {\n      setChecked(true);\n    } else {\n      // 이미지가 1개 미만이면 즉, 0개 업로딩이면 못보내게 하기\n      const formData = new FormData();\n      formData.append('text', textAreaRef.current.value);\n      const dataArr = [];\n      for (const el of Object.values(imgSrcs)) {\n        if (el !== '+') {\n          const encodeData = el.replace('data:image/png;base64,', '');\n          const decodImg = atob(encodeData);\n          const array = [];\n          for (let i = 0; i < decodImg.length; i += 1) {\n            array.push(decodImg.charCodeAt(i));\n          }\n          const file = new Blob([new Uint8Array(array)], { type: 'image/png' });\n          dataArr.push(file);\n        }\n      }\n      // 현재 dataArr 에 이미지가 있음 (Blob 타입의)\n      let image1;\n      if (dataArr[0]) {\n        // eslint-disable-next-line prefer-destructuring\n        image1 = dataArr[0];\n      } else {\n        setImgChecked(true);\n        return null;\n      }\n      const image2 = dataArr[1] ? dataArr[1] : null;\n      const image3 = dataArr[2] ? dataArr[2] : null;\n\n      const fileName = 'canvas_img_'.concat(\n        new Date().getMilliseconds(),\n        '.png',\n      );\n\n      if (image1) formData.append('image1', image1, fileName);\n      if (image2) formData.append('image2', image2, fileName);\n      if (image3) formData.append('image3', image3, fileName);\n\n      // const response = await axios({\n      //   method: 'post',\n      //   url: 'https://server.codestates-project.tk/post',\n      //   data: formData,\n      //   headers: {\n      //     'Content-Type': `multipart/form-data`,\n      //   },\n      // });\n      // console.log(response);\n      resetAndCloseModal();\n    }\n  };\n\n  return (\n    <>\n      <PostCropModal\n        setImgSrcs={setImgSrcsFunc}\n        inputNum={inputNum}\n        setImgSrc={setImgSrc}\n        imgSrc={imgSrc}\n        isModalOn={isCropModalOn}\n        handleClose={handleCropModal}\n      />\n      <div className={`${styles.modal} ${isModalOn && styles.isOn}`}>\n        <div className={styles.box}>\n          <img\n            className={styles.close}\n            src={close}\n            alt=\"close\"\n            onClick={resetAndCloseModal}\n          />\n          <div className={styles.postNewFormModal}>\n            <div className={styles.imgInputPart}>\n              <input\n                className={styles.imgInput}\n                type=\"file\"\n                accept=\"image/gif, image/jpeg, image/png\"\n                name=\"imgInput1\"\n                id=\"imgInput1\"\n                ref={imgInput1}\n                onChange={imgOnChange}\n              />\n              <input\n                className={styles.imgInput}\n                type=\"file\"\n                accept=\"image/gif, image/jpeg, image/png\"\n                name=\"imgInput2\"\n                id=\"imgInput2\"\n                ref={imgInput2}\n                onChange={imgOnChange}\n              />\n              <input\n                className={styles.imgInput}\n                type=\"file\"\n                accept=\"image/gif, image/jpeg, image/png\"\n                name=\"imgInput3\"\n                id=\"imgInput3\"\n                ref={imgInput3}\n                onChange={imgOnChange}\n              />\n              <label className={styles.labels} htmlFor=\"imgInput1\">\n                {imgSrcs[1] === '+' ? (\n                  '+'\n                ) : (\n                  <img\n                    className={styles.uploadedImg}\n                    src={imgSrcs[1]}\n                    alt=\"upload img\"\n                  />\n                )}\n              </label>\n              <label className={styles.labels} htmlFor=\"imgInput2\">\n                {imgSrcs[2] === '+' ? (\n                  '+'\n                ) : (\n                  <img\n                    className={styles.uploadedImg}\n                    src={imgSrcs[2]}\n                    alt=\"upload img\"\n                  />\n                )}\n              </label>\n              <label className={styles.labels} htmlFor=\"imgInput3\">\n                {imgSrcs[3] === '+' ? (\n                  '+'\n                ) : (\n                  <img\n                    className={styles.uploadedImg}\n                    src={imgSrcs[3]}\n                    alt=\"upload img\"\n                  />\n                )}\n              </label>\n            </div>\n            {imgChecked && (\n              <div className={styles.imgCheck}>\n                하나 이상의 이미지를 업로드 해주세요\n              </div>\n            )}\n            <div className={styles.textInputPart}>\n              <textarea\n                onKeyDown={() => {\n                  setChecked(false);\n                }}\n                ref={textAreaRef}\n                placeholder=\"내용을 입력해주세요\"\n                spellCheck={false}\n                className={`${styles.textInput} ${checked && styles.isOn}`}\n              />\n            </div>\n            <div className={styles.btnInputPart}>\n              <button\n                className={styles.barkBtn}\n                type=\"button\"\n                onClick={sendNewPost}\n              >\n                Bark\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PostNewFormModal;\n",["69","70","71","72"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comments/Comments.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/ImageSlide/ImageSlide.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comment/Comment.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostCropModal/PostCropModal.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostModal/PostModal.jsx",["73","74"],"import React, { useState } from 'react';\nimport styles from './PostModal.module.css';\nimport Modal from '../Modal/Modal';\nimport ImageSlide from '../ImageSlide/ImageSlide';\nimport Comments from '../Comments/Comments';\nimport dummyImg from '../../thumbnails/post_f.png';\nimport likeImg from '../../images/fulfilledHeart.png';\nimport unLikeImg from '../../images/unfulfilledHeart.png';\nimport chatImg from '../../images/chat.png';\n\nconst PostModal = ({ isModalOn, handleClose }) => {\n  const [like, setLike] = useState(false);\n  const handleLike = () => {\n    setLike(!like);\n  };\n  return (\n    <Modal isModalOn={isModalOn} handleClose={handleClose}>\n      <div className={styles.postModal}>\n        <ImageSlide />\n        <div className={styles.contents}>\n          <div className={styles.userArea}>\n            <div className={styles.profile_imgage}>\n              <img\n                className={styles.profile_image_img}\n                src={dummyImg}\n                alt=\"profile\"\n              />\n            </div>\n            <div\n              className={styles.profile_inform}\n              onClick={() => {\n                console.log('해당 유저 grid 정보 요청');\n              }}\n            >\n              <div className={styles.nickname}>\n                스눕독스눕독스눕독스눕독스눕독스눕독\n              </div>\n              <div className={styles.breed}>시바견</div>\n            </div>\n          </div>\n          <div className={styles.textArea}>\n            Normally a WordPress developer will need to perform the task of\n            filling up an empty theme with dummy content, and doing this\n            manually can be really time consuming\n          </div>\n          <div className={styles.date}>2020/11/28 22:22 (수)</div>\n          <div className={styles.buttonArea}>\n            {like ? (\n              <img\n                className={styles.like}\n                src={likeImg}\n                alt=\"like\"\n                onClick={handleLike}\n              />\n            ) : (\n              <img\n                className={styles.unLike}\n                src={unLikeImg}\n                alt=\"unlike\"\n                onClick={handleLike}\n              />\n            )}\n            <img className={styles.chatImg} src={chatImg} alt=\"chat\" />\n            <div className={styles.likeCount}>좋아요 12개</div>\n          </div>\n          <Comments />\n          <div className={styles.inputPart}>\n            <input\n              className={styles.commentInput}\n              spellCheck=\"false\"\n              type=\"text\"\n              placeholder=\"댓글 달기..\u001c\"\n            />\n            <div\n              className={styles.commentButton}\n              onClick={() => {\n                console.log('hi');\n              }}\n            >\n              게시\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default PostModal;\n",["75","76","77","78"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComments/SubComments.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/App.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/useIntersectionObserver/useIntersectionObserver.jsx",[],{"ruleId":"79","severity":1,"message":"80","line":8,"column":22,"nodeType":"81","messageId":"82","endLine":8,"endColumn":31},{"ruleId":"83","severity":1,"message":"84","line":13,"column":5,"nodeType":"85","messageId":"86","endLine":13,"endColumn":16},{"ruleId":"87","severity":1,"message":"88","line":51,"column":7,"nodeType":"89","messageId":"86","endLine":51,"endColumn":42},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"83","severity":1,"message":"84","line":32,"column":17,"nodeType":"85","messageId":"86","endLine":32,"endColumn":28},{"ruleId":"83","severity":1,"message":"84","line":77,"column":17,"nodeType":"85","messageId":"86","endLine":77,"endColumn":28},{"ruleId":"90","replacedBy":"98"},{"ruleId":"92","replacedBy":"99"},{"ruleId":"94","replacedBy":"100"},{"ruleId":"96","replacedBy":"101"},"func-names","Unexpected unnamed function.","FunctionExpression","unnamed","no-console","Unexpected console statement.","MemberExpression","unexpected","no-alert","Unexpected alert.","CallExpression","lines-around-directive",["102"],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],["102"],[],[],[],"padding-line-between-statements"]