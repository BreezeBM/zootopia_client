[{"/Users/user/Desktop/final-project/zootopia_client/client/src/index.js":"1","/Users/user/Desktop/final-project/zootopia_client/client/src/components/UserChat/UserChat.jsx":"2","/Users/user/Desktop/final-project/zootopia_client/client/src/components/MypageModal/MypageModal.jsx":"3","/Users/user/Desktop/final-project/zootopia_client/client/src/components/Posts/Posts.jsx":"4","/Users/user/Desktop/final-project/zootopia_client/client/src/components/MyChat/MyChat.jsx":"5","/Users/user/Desktop/final-project/zootopia_client/client/src/components/ChatUser/ChatUser.jsx":"6","/Users/user/Desktop/final-project/zootopia_client/client/src/pages/Chatpage/ChatPage.jsx":"7","/Users/user/Desktop/final-project/zootopia_client/client/src/pages/MainPage/MainPage.jsx":"8","/Users/user/Desktop/final-project/zootopia_client/client/src/components/SubComment/SubComment.jsx":"9","/Users/user/Desktop/final-project/zootopia_client/client/src/components/PostModal/PostModal.jsx":"10","/Users/user/Desktop/final-project/zootopia_client/client/src/components/Nav/Nav.jsx":"11","/Users/user/Desktop/final-project/zootopia_client/client/src/components/AddroomModal/AddroomModal.jsx":"12","/Users/user/Desktop/final-project/zootopia_client/client/src/App.jsx":"13","/Users/user/Desktop/final-project/zootopia_client/client/src/components/PrivateChat/PrivateChat.jsx":"14"},{"size":309,"mtime":1607601102807,"results":"15","hashOfConfig":"16"},{"size":502,"mtime":1608092184349,"results":"17","hashOfConfig":"16"},{"size":9242,"mtime":1608182768147,"results":"18","hashOfConfig":"16"},{"size":1444,"mtime":1608119632636,"results":"19","hashOfConfig":"16"},{"size":874,"mtime":1607685603946,"results":"20","hashOfConfig":"16"},{"size":2539,"mtime":1608208191424,"results":"21","hashOfConfig":"16"},{"size":9667,"mtime":1608209931291,"results":"22","hashOfConfig":"16"},{"size":4941,"mtime":1608173576281,"results":"23","hashOfConfig":"16"},{"size":5856,"mtime":1608173196939,"results":"24","hashOfConfig":"16"},{"size":16559,"mtime":1608173156446,"results":"25","hashOfConfig":"16"},{"size":2102,"mtime":1608178644401,"results":"26","hashOfConfig":"16"},{"size":2213,"mtime":1608193791380,"results":"27","hashOfConfig":"16"},{"size":5611,"mtime":1608182728503,"results":"28","hashOfConfig":"16"},{"size":2994,"mtime":1608209841445,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1i507lh",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/user/Desktop/final-project/zootopia_client/client/src/index.js",[],["64","65","66","67"],"/Users/user/Desktop/final-project/zootopia_client/client/src/components/UserChat/UserChat.jsx",[],"/Users/user/Desktop/final-project/zootopia_client/client/src/components/MypageModal/MypageModal.jsx",["68","69","70","71","72"],"import { useEffect, React, useRef, useState } from 'react';\nimport axios from 'axios';\n\nimport styles from './MypageModal.module.css';\nimport Modal from '../Modal/Modal';\nimport defaultProfile from '../../images/defaultProfile.png';\nimport logoImg from '../../images/logo.png';\nimport DeleteModal from '../DeleteModal/DeleteModal';\nimport CropModal from '../CropModal/CropModal';\n\nconst MypageModal = ({\n  setProfile,\n  kind,\n  userProfile,\n  setUserProfile,\n  profile,\n  isModalOn,\n  handleClose,\n}) => {\n  // img 변경관련 로직\n  const [petnameCaution, setPetnameCaution] = useState(null);\n  const [breedCaution, setBreedCaution] = useState(null);\n  const [cropModalOn, setCropModalOn] = useState(false);\n  const handleCropModalOn = () => {\n    setCropModalOn(!cropModalOn);\n  };\n  const [imgSrc, setImgSrc] = useState(null);\n  const [nowImg, setNowImg] = useState(profile.thumbnail);\n  // const handleNowImg = (newImg) => {\n  //   setNowImg(newImg);\n  // };\n\n  const changeProfile = (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      // html5의 fileAPI\n      const reader = new FileReader();\n      reader.readAsDataURL(e.target.files[0]);\n      reader.addEventListener('load', () => {\n        setImgSrc(reader.result);\n      });\n      handleCropModalOn();\n    }\n  };\n\n  // 서버에서 보내준 정보를 렌더링(초기)할 때 useState 디폴트 값으로 받기\n  // + 유효성 검사 로직\n  const [nowPetName, setNowPetName] = useState(userProfile.petName);\n  const [nowBreed, setNowBreed] = useState(userProfile.breed);\n  const petnameRef = useRef(null);\n  const breedRef = useRef(null);\n\n  const [petName, setPetname] = useState(userProfile.petName);\n  const [breed, setBreed] = useState(userProfile.breed);\n  const [checked, setChecked] = useState({ petname: true, breed: true });\n\n  // 유효성 검사 로직\n  const checkInform = (e) => {\n    if (e.target.name === 'petname') {\n      setChecked({ ...checked, petname: true });\n      if (e.target.value.length > 18 || e.target.value.length === 0) {\n        setChecked({ ...checked, petname: false });\n        setPetnameCaution(\n          '펫네임은 최소 1글자 이상 18글자 이하로 작성해주세요',\n        );\n      }\n      setPetname(e.target.value);\n    } else if (e.target.name === 'breed') {\n      setChecked({ ...checked, breed: true });\n      if (e.target.value.length > 18 || e.target.value.length === 0) {\n        setChecked({ ...checked, breed: false });\n        setBreedCaution('품종은 최소 1글자 이상 18글자 이하로 작성해주세요');\n      }\n      setBreed(e.target.value);\n    }\n  };\n\n  // 실제 펫네임을 변경하기 위해 서버에 PATCH 요청을 보내는 로직\n  const changePetname = async () => {\n    if (checked.petname) {\n      try {\n        const response = await axios.patch(\n          'https://server.codestates-project.tk/user/petname',\n          {\n            petName,\n          },\n          { withCredentials: true },\n        );\n        if (response.status === 201) {\n          setNowPetName(petName);\n          setPetname(petName);\n          if (kind === 'latest' || kind === 'user') {\n            setProfile({ ...profile, petName });\n          }\n          setUserProfile({ ...userProfile, petName });\n          petnameRef.current.blur();\n        }\n      } catch (err) {\n        // 중복 펫네임 409\n        console.log('hre');\n        if (err.response.status === 501) {\n          alert('some errors occur at server, please try again');\n        } else if (err.response.status === 409) {\n          setChecked({ ...checked, petname: false });\n          setPetnameCaution('동일한 닉네임으로의 변경은 불가능합니다');\n        } else {\n          console.log(err);\n        }\n      }\n    }\n  };\n\n  // 실제 품종을 변경하기 위해 서버에 PATCH 요청을 보내는 로직\n  const changeBreed = async () => {\n    if (checked.breed) {\n      try {\n        const response = await axios.patch(\n          'https://server.codestates-project.tk/user/breed',\n          {\n            breed,\n          },\n          { withCredentials: true },\n        );\n        if (response.status === 201) {\n          setNowBreed(breed);\n          setBreed(breed);\n          if (kind === 'latest' || kind === 'user') {\n            setProfile({ ...profile, breed });\n          }\n          setUserProfile({ ...userProfile, breed });\n          breedRef.current.blur();\n        }\n      } catch (err) {\n        if (err.response.status === 501) {\n          alert('some errors occur at server, please try again');\n        } else if (err.response.status === 409) {\n          setChecked({ ...checked, breed: false });\n          setPetnameCaution('동일한 품종으로의 변경은 불가능합니다');\n        }\n      }\n    }\n  };\n\n  const resetAndTurnOffTheModal = () => {\n    setPetname(nowPetName);\n    setBreed(nowBreed);\n    setChecked({ petname: true, breed: true });\n    handleClose();\n  };\n\n  // 회원 탈퇴 모달은 디폴트 모달을 재활용하지 않는 것이기에 따로 state로 관리\n  const [deleteModalOn, setDeleteModalOn] = useState(false);\n  const viewDeleteModal = () => {\n    setDeleteModalOn(!deleteModalOn);\n  };\n\n  useEffect(() => {\n    if (isModalOn === false) {\n      setPetname(nowPetName);\n      setBreed(nowBreed);\n      setChecked({ petname: true, breed: true });\n    }\n  }, [isModalOn]);\n\n  return (\n    <>\n      <DeleteModal isModalOn={deleteModalOn} handleClose={viewDeleteModal} />\n      <Modal isModalOn={isModalOn} handleClose={resetAndTurnOffTheModal}>\n        <div className={styles.MypageModal}>\n          <div className={styles.profile}>\n            <div className={styles.imgPart}>\n              <img src={nowImg} className={styles.profileImg} alt=\"profile\" />\n            </div>\n            <div className={styles.informPart}>\n              <div className={styles.title}>프로필 사진</div>\n              <input\n                id=\"profileImgInput\"\n                type=\"file\"\n                className={styles.profileImgInput}\n                onChange={changeProfile}\n              />\n              <label htmlFor=\"profileImgInput\">\n                <div className={styles.editButton}>Edit Picture</div>\n              </label>\n            </div>\n          </div>\n          <div className={styles.editPart}>\n            <div className={styles.petnameEdit}>\n              <div className={styles.petnameTitle}>\n                <img className={styles.logoImg} src={logoImg} alt=\"logo\" />\n                Pet Name\n              </div>\n              <div className={styles.petnameEditPart}>\n                <input\n                  ref={petnameRef}\n                  className={styles.myPageInput}\n                  spellCheck={false}\n                  onChange={checkInform}\n                  value={petName}\n                  name=\"petname\"\n                />\n                <button\n                  className={`${styles.informEditButton} ${\n                    checked.petname && styles.isOn\n                  }`}\n                  type=\"button\"\n                  onClick={changePetname}\n                >\n                  Edit\n                </button>\n              </div>\n              {checked.petname ? null : (\n                <div className={styles.caution}>{petnameCaution}</div>\n              )}\n            </div>\n            <div className={styles.breedEdit}>\n              <div className={styles.breedTitle}>\n                <img className={styles.logoImg} src={logoImg} alt=\"logo\" />\n                Breed\n              </div>\n              <div className={styles.breedEditPart}>\n                <input\n                  ref={breedRef}\n                  className={styles.myPageInput}\n                  spellCheck={false}\n                  name=\"breed\"\n                  value={breed}\n                  onChange={checkInform}\n                />\n                <button\n                  className={`${styles.informEditButton} ${\n                    checked.breed && styles.isOn\n                  }`}\n                  type=\"button\"\n                  onClick={changeBreed}\n                >\n                  Edit\n                </button>\n              </div>\n              {checked.breed ? null : (\n                <div className={styles.caution}>{breedCaution}</div>\n              )}\n            </div>\n            <div className={styles.deleteEdit}>\n              <div className={styles.deleteTitle}>\n                <img className={styles.logoImg} src={logoImg} alt=\"logo\" />\n                Delete Account\n              </div>\n              <button\n                id={styles.deleteButton}\n                className={styles.deleteEditButton}\n                type=\"button\"\n                onClick={viewDeleteModal}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      </Modal>\n      <CropModal\n        setProfile={setProfile}\n        profile={profile}\n        userProfile={userProfile}\n        kind={kind}\n        setUserProfile={setUserProfile}\n        setNowImg={setNowImg}\n        imgSrc={imgSrc}\n        setImgSrc={setImgSrc}\n        isModalOn={cropModalOn}\n        handleClose={handleCropModalOn}\n      />\n    </>\n  );\n};\n\nexport default MypageModal;\n","/Users/user/Desktop/final-project/zootopia_client/client/src/components/Posts/Posts.jsx",["73"],"import { React, useRef, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport styles from './Posts.module.css';\nimport Post from '../Post/Post';\n\nconst Posts = ({ isDone, postsCount, posts, getMorePosts, viewPost }) => {\n  // infinite scroll logic with IntersectionObserver API\n  const targetRef = useRef(null);\n  const onIntersect = async ([entry], observer) => {\n    if (entry.isIntersecting) {\n      observer.unobserve(entry.target);\n      getMorePosts();\n    }\n    setTimeout(() => {\n      observer.observe(entry.target);\n    }, 4000);\n  };\n\n  const observer = new IntersectionObserver(onIntersect, { threshold: 0.5 });\n\n  useEffect(() => {\n    observer.observe(targetRef.current);\n  }, []);\n\n  return (\n    <>\n      <div className={styles.emptySpace} />\n      <div className={styles.container}>\n        <div className={styles.grid_container}>\n          {posts.map((post) => {\n            return (\n              <Post\n                thumbnail={post.thumbnail}\n                key={post.postId}\n                postId={post.postId}\n                viewPost={viewPost}\n              />\n            );\n          })}\n        </div>\n        <div\n          ref={targetRef}\n          className={`${styles.target} ${\n            !isDone && postsCount >= 15 && styles.isOn\n          }`}\n        >\n          Loading...\n          <i className=\"fas fa-fan fa-spin\" />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Posts;\n","/Users/user/Desktop/final-project/zootopia_client/client/src/components/MyChat/MyChat.jsx",[],["74","75","76","77"],"/Users/user/Desktop/final-project/zootopia_client/client/src/components/ChatUser/ChatUser.jsx",["78","79","80","81","82","83","84","85","86","87","88","89","90"],"/Users/user/Desktop/final-project/zootopia_client/client/src/pages/Chatpage/ChatPage.jsx",["91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125"],"/Users/user/Desktop/final-project/zootopia_client/client/src/pages/MainPage/MainPage.jsx",["126","127"],"/Users/user/Desktop/final-project/zootopia_client/client/src/components/SubComment/SubComment.jsx",["128","129","130","131","132"],"/* eslint-disable no-nested-ternary */\nimport { React, useRef, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport styles from './SubComment.module.css';\nimport updateBtn from '../../images/commentUpdateBtn.jpg';\nimport chatBtn from '../../images/chat.png';\n\nconst SubComment = ({\n  userProfileId,\n  getSpecificUser,\n  postId,\n  refreshPost,\n  replyId,\n  userId,\n  commentId,\n  setCommentId,\n  setCommentToWhom,\n  thumbnail,\n  petName,\n  text,\n  time,\n  handleCommentBtn,\n}) => {\n  const [today, setToday] = useState(null);\n  const [hasRights, setHasRights] = useState(false);\n  const textRef = useRef(null);\n  const [updateToggled, setUpdateToggled] = useState(false);\n  const [textUpdateToggled, setTextUpdateToggled] = useState(false);\n  const [textInput, setTextInput] = useState(null);\n\n  // 대댓글 삭제\n  const deleteSubComment = async () => {\n    try {\n      const response = await axios.delete(\n        `https://server.codestates-project.tk/post/reply`,\n        {\n          data: {\n            postId,\n            replyId,\n          },\n          withCredentials: true,\n        },\n      );\n      refreshPost(response.data.comments);\n      setUpdateToggled(false);\n    } catch (err) {\n      if (err.response.status === 401) {\n        history.push('/');\n      } else {\n        console.log(err);\n      }\n    }\n  };\n\n  // 대댓글 수정\n  const updateSubComment = async () => {\n    if (textUpdateToggled === true) {\n      try {\n        const response = await axios.patch(\n          `https://server.codestates-project.tk/post/reply`,\n          {\n            postId,\n            replyId,\n            text: textInput,\n          },\n          { withCredentials: true },\n        );\n        refreshPost(response.data.comments);\n      } catch (err) {\n        if (err.response.status === 401) {\n          history.push('/');\n        } else if (err.response.status === 400) {\n          alert('1글자 이상의 댓글을 입력해주세요');\n        } else {\n          console.log(err);\n        }\n      }\n      setTextUpdateToggled(false);\n      setUpdateToggled(false);\n    } else {\n      await setTextInput(text);\n      await setTextUpdateToggled(true);\n      textRef.current.focus();\n    }\n  };\n\n  const checkEnterPress = (e) => {\n    if (e.keyCode === 13) {\n      updateSubComment();\n    }\n  };\n\n  const getDateType = () => {\n    const todayDate = new Date();\n    const date = new Date(time);\n    const betweenTime = Math.floor(\n      (todayDate.getTime() - date.getTime()) / 1000 / 60,\n    );\n    if (betweenTime < 1) return '방금전';\n    if (betweenTime < 60) {\n      return `${betweenTime}분전`;\n    }\n    const betweenTimeHour = Math.floor(betweenTime / 60);\n    if (betweenTimeHour < 24) {\n      return `${betweenTimeHour}시간전`;\n    }\n    const betweenTimeDay = Math.floor(betweenTime / 60 / 24);\n    if (betweenTimeDay < 365) {\n      return `${betweenTimeDay}일전`;\n    }\n    return `${Math.floor(betweenTimeDay / 365)}년전`;\n  };\n\n  useEffect(() => {\n    setToday(getDateType());\n  });\n  useEffect(() => {\n    if (userId === userProfileId) {\n      setHasRights(true);\n    }\n  }, [userProfileId, userId]);\n\n  return (\n    <div className={styles.subComment}>\n      <div className={styles.contentsPart}>\n        <img\n          onClick={() => {\n            getSpecificUser(userId);\n          }}\n          className={styles.profile}\n          src={thumbnail}\n          alt=\"profile\"\n        />\n        <div className={styles.commentPart}>\n          <span\n            className={styles.nickname}\n            onClick={() => {\n              getSpecificUser(userId);\n            }}\n          >\n            {petName}\n          </span>\n          {textUpdateToggled ? (\n            <input\n              onKeyDown={checkEnterPress}\n              spellCheck={false}\n              ref={textRef}\n              className={styles.textInput}\n              type=\"text\"\n              value={textInput}\n              onChange={(e) => {\n                setTextInput(e.target.value);\n              }}\n            />\n          ) : (\n            <span className={styles.textPart}>{text}</span>\n          )}\n        </div>\n      </div>\n      <div className={styles.dateAndBtnPart}>\n        <span className={styles.date}>{today}</span>\n        <img\n          className={styles.chatBtn}\n          src={chatBtn}\n          alt=\"chat button\"\n          onClick={() => {\n            console.log(userId);\n          }}\n        />\n        <span\n          className={styles.commentBtn}\n          onClick={async () => {\n            await setCommentId(commentId);\n            await setCommentToWhom(petName);\n            handleCommentBtn();\n          }}\n        >\n          답글 달기\n        </span>\n        {hasRights ? (\n          updateToggled ? (\n            <div className={styles.updateBtns}>\n              <img\n                className={styles.closeUpdateBtn}\n                src={updateBtn}\n                alt=\"updateBtn\"\n                onClick={() => {\n                  setTextUpdateToggled(false);\n                  setTextInput(text);\n                  setUpdateToggled(false);\n                }}\n              />\n              <i\n                id={styles.goToInputBtn}\n                className=\"far fa-edit\"\n                onClick={updateSubComment}\n              />\n              <i\n                id={styles.commentDeleteBtn}\n                className=\"fas fa-trash-alt\"\n                onClick={deleteSubComment}\n              />\n            </div>\n          ) : (\n            <img\n              className={styles.updateBtn}\n              src={updateBtn}\n              alt=\"updateBtn\"\n              onClick={() => {\n                setUpdateToggled(true);\n              }}\n            />\n          )\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default SubComment;\n","/Users/user/Desktop/final-project/zootopia_client/client/src/components/PostModal/PostModal.jsx",["133","134","135","136","137","138","139","140","141","142","143","144","145","146","147"],"/* eslint-disable no-nested-ternary */\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport styles from './PostModal.module.css';\nimport ImageSlide from '../ImageSlide/ImageSlide';\nimport close from '../../images/close.png';\nimport Comments from '../Comments/Comments';\nimport likeImg from '../../images/fulfilledHeart.png';\nimport unLikeImg from '../../images/unfulfilledHeart.png';\nimport updateBtn from '../../images/updateBtn.png';\nimport PostDeleteModal from '../PostDeleteModal/PostDeleteModal';\nimport chatBtn from '../../images/chat.png';\n\nconst PostModal = ({\n  kind,\n  setProfileForDeleteAndAdd,\n  setUserProfile,\n  userProfileId,\n  setPostModalData,\n  refreshPost,\n  getPosts,\n  getUserData,\n  postData,\n  isModalOn,\n  handleClose,\n  deletePost,\n}) => {\n  // 포스팅에 대한 수정권한이 있는지에 대한 설정\n  const [today, setToday] = useState(null);\n  const [hasRights, setHasRights] = useState(false);\n  const history = useHistory();\n  // rerender 될 때마다 바뀔 수 있도록 변수로 post와 user정보는 const 변수로 선언\n  const userInform = postData.user;\n  const postDatas = postData.post;\n  const commentsInform = postData.comments;\n  const commentInputRef = useRef(null);\n  const textRef = useRef(null);\n  const [commentToggle, setCommentToggle] = useState(false);\n  const [updateBtnToggle, setUpdateBtnToggle] = useState(false);\n  const [textUpdateToggled, setTextUpdateToggled] = useState(false);\n  const [isDeleteOn, setIsDeleteOn] = useState(false);\n\n  const [textVal, setTextVal] = useState(null);\n\n  // post에 대한 댓글인지, 댓글에 대한 대댓글인지\n  const [whichComment, setWhichComment] = useState('comment');\n  const [commentToWhom, setCommentToWhom] = useState(null);\n  const [comment, setComment] = useState(null);\n  const [commentId, setCommentId] = useState(null);\n\n  // postModal 창 닫을 때 전부다 디폴트로 돌리는고 꺼주는 세팅\n  const makePostDefaultSetting = () => {\n    setIsDeleteOn(false);\n    handleClose();\n  };\n  // ################################################\n\n  // ################################################\n  // 좋아요 버튼 눌렀을 때 처리 logic\n  const handleLike = async () => {\n    try {\n      const response = await axios.post(\n        'https://server.codestates-project.tk/post/togglelike',\n        {\n          postId: postDatas.postId,\n          likeChecked: !postDatas.likeChecked,\n        },\n        {\n          withCredentials: true,\n        },\n      );\n\n      setPostModalData({\n        ...postData,\n        post: {\n          ...postData.post,\n          likeChecked: !postData.post.likeChecked,\n          likeCount: postData.post.likeCount + Number(response.data),\n        },\n      });\n    } catch (err) {\n      if (err.response.status === 401) {\n        history.push('/');\n      } else {\n        console.log(err);\n      }\n    }\n  };\n  // ################################################\n\n  // ################################################\n  // 답글 달기 버튼 눌렀을 때 처리 logic\n  const handleCommentBtn = async () => {\n    await setWhichComment('subComment');\n    commentInputRef.current.focus();\n  };\n  // ################################################\n  // 포스트 제거 버튼을 눌렀을 때 나오는 모달창 on off logic\n  const closeDeleteModal = async (deleted) => {\n    if (isDeleteOn && deleted) {\n      // 만약 모달창이 켜져있는데, 삭제가 이미 이루어졌다면, 삭제 모달창과 postModal 창 둘다 끄기\n      await setIsDeleteOn(false);\n      handleClose();\n    } else if (isDeleteOn) {\n      // 삭제는 안됐고, 모달창만 켜져있다면, 삭제 모달창만 끄기\n      await setIsDeleteOn(false);\n    } else {\n      // 모달창이 켜져있지 않다면 켜기\n      await setIsDeleteOn(true);\n    }\n  };\n  // ################################################\n\n  // ################################################\n  // 특정 유저 프로필 + 그에 따른 grid 데이터 불러오기(댓글 및 대댓글 창의 프로필을 클릭했을 때에도 이 function을 씀)\n  const getSpecificUser = async (id) => {\n    getPosts(id);\n    getUserData(id);\n    handleClose();\n  };\n  // ################################################\n\n  const checkEnterPress = (e) => {\n    if (e.keyCode === 13) {\n      updatePost();\n    }\n  };\n  const sendComment = (e) => {\n    if (e.keyCode === 13) {\n      commentInputRef.current.blur();\n    }\n  };\n  // 포스트 수정\n  const updatePost = async () => {\n    if (textUpdateToggled === true) {\n      setTextUpdateToggled(false);\n      setUpdateBtnToggle(false);\n      try {\n        await axios.patch(\n          `https://server.codestates-project.tk/post`,\n          {\n            postId: postDatas.postId,\n            text: textVal,\n          },\n          { withCredentials: true },\n        );\n        setPostModalData((prev) => {\n          return { ...prev, post: { ...prev.post, text: textVal } };\n        });\n        await setTextUpdateToggled(false);\n        setUpdateBtnToggle(false);\n      } catch (err) {\n        if (err.response.status === 401) {\n          history.push('/');\n        } else if (err.response.status === 400) {\n          alert('포스팅 내용을 반드시 입력해주세요');\n        } else {\n          console.log(err);\n        }\n      }\n      // test 용도\n      // await setPostInform({ ...postInform, text: textRef.current.value });\n      // await setTextUpdateToggled(false);\n      // setUpdateBtnToggle(false);\n    } else {\n      setTextVal(postDatas.text);\n      await setTextUpdateToggled(true);\n      textRef.current.focus();\n    }\n  };\n\n  // 코멘트 남기기\n  const postComment = async () => {\n    if (whichComment === 'comment') {\n      try {\n        const response = await axios.post(\n          'https://server.codestates-project.tk/post/comment',\n          {\n            postId: postDatas.postId,\n            text: comment,\n          },\n          {\n            withCredentials: true,\n          },\n        );\n        commentInputRef.current.value = null;\n        refreshPost(response.data.comments);\n      } catch (err) {\n        if (err.response.status === 401) {\n          history.push('/');\n        } else {\n          console.log(err);\n        }\n      }\n    } else if (whichComment === 'subComment') {\n      try {\n        const response = await axios.post(\n          'https://server.codestates-project.tk/post/reply',\n          {\n            postId: postDatas.postId,\n            commentId,\n            text: comment,\n          },\n          {\n            withCredentials: true,\n          },\n        );\n        commentInputRef.current.value = null;\n        setWhichComment('comment');\n        refreshPost(response.data.comments);\n      } catch (err) {\n        if (err.response.status === 401) {\n          history.push('/');\n        } else {\n          console.log(err);\n        }\n      }\n    }\n  };\n\n  // 코멘트 삭제\n  const deleteComment = async (id) => {\n    try {\n      const response = await axios.delete(\n        'https://server.codestates-project.tk/post/comment',\n        {\n          data: {\n            postId: postDatas.postId,\n            commentId: id,\n          },\n          withCredentials: true,\n        },\n      );\n      refreshPost(response.data.comments);\n    } catch (err) {\n      if (err.response.status === 401) {\n        history.push('/');\n      } else {\n        console.log(err);\n      }\n    }\n  };\n\n  const DMchat = () => {\n    console.log('DM 보내기');\n    console.log(userProfileId);\n    console.log(userInform.userId);\n\n    const idData = {\n      myId: userProfileId,\n    };\n    const config = {\n      method: 'post',\n      url: `https://chat.codestates-project.tk/room/private/${userInform.userId}`,\n      data: idData,\n      withCredentials: true,\n    };\n\n    axios(config)\n      .then(function (response) {\n        console.log(response);\n        history.push('/chat');\n        console.log('야호~~~');\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  const getDateType = () => {\n    const date = new Date(postDatas.time);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const dates = date.getDate();\n    let day = date.getDay();\n    if (day === 1) day = '월';\n    if (day === 2) day = '화';\n    if (day === 3) day = '수';\n    if (day === 4) day = '목';\n    if (day === 5) day = '금';\n    if (day === 6) day = '토';\n    if (day === 0) day = '일';\n    const dateForm = `${year}/${month}/${dates} (${day})`;\n    return dateForm;\n  };\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(max-width: 65rem)');\n    if (mediaQuery.matches) {\n      setCommentToggle(false);\n    } else {\n      setCommentToggle(true);\n    }\n    setToday(getDateType());\n  }, []);\n\n  // 포스팅에 대한 수정권한이 있는지에 대한 설정\n  useEffect(() => {\n    if (userInform.userId === userProfileId) {\n      setHasRights(true);\n    }\n  }, [userProfileId, userInform]);\n\n  useEffect(() => {\n    const body = document.querySelector('body');\n    body.setAttribute('overflow-y', 'hidden');\n    body.setAttribute('height', '100vh');\n    body.setAttribute('padding-right', '15px');\n  }, [isModalOn]);\n\n  return (\n    <>\n      <PostDeleteModal\n        kind={kind}\n        setProfileForDeleteAndAdd={setProfileForDeleteAndAdd}\n        setUserProfile={setUserProfile}\n        postId={postDatas.postId}\n        deletePost={deletePost}\n        isModalOn={isDeleteOn}\n        handleClose={closeDeleteModal}\n      />\n      <div className={`${styles.modal} ${isModalOn && styles.isOn}`}>\n        <div className={styles.box}>\n          <img\n            className={styles.close}\n            src={close}\n            alt=\"close\"\n            onClick={\n              // 무슨 액션이던지 중간에 모달창을 닫으면 다 리셋시켜줘야함\n              makePostDefaultSetting\n            }\n          />\n          <div className={styles.postModal}>\n            <ImageSlide\n              imageUrls={[\n                postDatas.picture_1,\n                postDatas.picture_2,\n                postDatas.picture_3,\n              ]}\n            />\n            <div className={styles.contents}>\n              <div\n                className={styles.userArea}\n                onClick={() => {\n                  getSpecificUser(userInform.userId);\n                }}\n              >\n                <div className={styles.profile_imgage}>\n                  <img\n                    className={styles.profile_image_img}\n                    src={userInform.thumbnail}\n                    alt=\"profile\"\n                  />\n                </div>\n                <div className={styles.profile_inform}>\n                  <div className={styles.nickname}>{userInform.petName}</div>\n                  <div className={styles.breed}>{userInform.breed}</div>\n                </div>\n                {hasRights ? (\n                  updateBtnToggle ? (\n                    <div className={styles.updateBtns}>\n                      <img\n                        className={styles.closeUpdateBtn}\n                        src={updateBtn}\n                        alt=\"updateBtn\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setTextUpdateToggled(false);\n                          setUpdateBtnToggle(false);\n                        }}\n                      />\n                      <i\n                        className=\"far fa-edit\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          updatePost();\n                        }}\n                      />\n                      <i\n                        className=\"fas fa-trash-alt\"\n                        id={styles.deleteBtn}\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          closeDeleteModal();\n                        }}\n                      />\n                    </div>\n                  ) : (\n                    <img\n                      className={styles.updateBtn}\n                      src={updateBtn}\n                      alt=\"updateBtn\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setUpdateBtnToggle(true);\n                      }}\n                    />\n                  )\n                ) : null}\n              </div>\n              {textUpdateToggled ? (\n                <textarea\n                  onKeyDown={checkEnterPress}\n                  ref={textRef}\n                  spellCheck={false}\n                  className={styles.updateText}\n                  value={textVal}\n                  onChange={(e) => {\n                    setTextVal(e.target.value);\n                  }}\n                />\n              ) : (\n                <div className={styles.textArea}>{postDatas.text}</div>\n              )}\n\n              <div className={styles.date}>{today}</div>\n              <div className={styles.buttonArea}>\n                {postDatas.likeChecked ? (\n                  <img\n                    className={styles.like}\n                    src={likeImg}\n                    alt=\"like\"\n                    onClick={handleLike}\n                  />\n                ) : (\n                  <img\n                    className={styles.unLike}\n                    src={unLikeImg}\n                    alt=\"unlike\"\n                    onClick={handleLike}\n                  />\n                )}\n                <img\n                  className={styles.chatBtn}\n                  src={chatBtn}\n                  alt=\"chat button\"\n                  onClick={DMchat}\n                />\n                <div className={styles.likeCount}>\n                  {`좋아요 ${postDatas.likeCount}개`}\n                </div>\n              </div>\n              {commentToggle ? (\n                <>\n                  <div\n                    className={styles.commentFolder}\n                    onClick={() => {\n                      setCommentToggle(false);\n                    }}\n                  >\n                    댓글 접기\n                  </div>\n                  <Comments\n                    userProfileId={userProfileId}\n                    getSpecificUser={getSpecificUser}\n                    setCommentId={setCommentId}\n                    setCommentToWhom={setCommentToWhom}\n                    setWhichComment={setWhichComment}\n                    postComment={postComment}\n                    postId={postDatas.postId}\n                    refreshPost={refreshPost}\n                    deleteComment={deleteComment}\n                    commentsInform={commentsInform}\n                    handleCommentBtn={handleCommentBtn}\n                  />\n                </>\n              ) : (\n                <div\n                  onClick={() => {\n                    setCommentToggle(true);\n                  }}\n                  className={styles.commentFolder}\n                >\n                  댓글 펼치기...\n                </div>\n              )}\n              <div className={styles.inputPart}>\n                <input\n                  onBlur={postComment}\n                  onKeyDown={sendComment}\n                  onChange={(e) => {\n                    setComment(e.target.value);\n                  }}\n                  ref={commentInputRef}\n                  className={styles.commentInput}\n                  spellCheck=\"false\"\n                  type=\"text\"\n                  placeholder=\"댓글 달기..\u001c\"\n                />\n                {whichComment === 'subComment' ? (\n                  <div\n                    className={styles.subCommentMessage}\n                    onClick={() => {\n                      setWhichComment('comment');\n                    }}\n                  >\n                    <span\n                      style={{\n                        fontWeight: 'bold',\n                        fontFamily: 'bazzi',\n                        fontSize: '1.2rem',\n                      }}\n                    >\n                      {commentToWhom}\n                    </span>\n                    님께 답글 달기 취소\n                  </div>\n                ) : null}\n                <span onClick={postComment} className={styles.commentBtn}>\n                  게시\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PostModal;\n","/Users/user/Desktop/final-project/zootopia_client/client/src/components/Nav/Nav.jsx",["148"],"/Users/user/Desktop/final-project/zootopia_client/client/src/components/AddroomModal/AddroomModal.jsx",["149","150","151","152","153","154","155"],"/Users/user/Desktop/final-project/zootopia_client/client/src/App.jsx",["156","157","158"],"/Users/user/Desktop/final-project/zootopia_client/client/src/components/PrivateChat/PrivateChat.jsx",["159","160","161","162","163","164","165","166","167","168","169","170","171","172"],{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":99,"column":9,"nodeType":"183","messageId":"184","endLine":99,"endColumn":20},{"ruleId":"185","severity":1,"message":"186","line":101,"column":11,"nodeType":"187","messageId":"184","endLine":101,"endColumn":65},{"ruleId":"181","severity":1,"message":"182","line":106,"column":11,"nodeType":"183","messageId":"184","endLine":106,"endColumn":22},{"ruleId":"185","severity":1,"message":"186","line":134,"column":11,"nodeType":"187","messageId":"184","endLine":134,"endColumn":65},{"ruleId":"188","severity":1,"message":"189","line":162,"column":6,"nodeType":"190","endLine":162,"endColumn":17,"suggestions":"191"},{"ruleId":"188","severity":1,"message":"192","line":23,"column":6,"nodeType":"190","endLine":23,"endColumn":8,"suggestions":"193"},{"ruleId":"173","replacedBy":"194"},{"ruleId":"175","replacedBy":"195"},{"ruleId":"177","replacedBy":"196"},{"ruleId":"179","replacedBy":"197"},{"ruleId":"188","severity":1,"message":"198","line":31,"column":6,"nodeType":"190","endLine":31,"endColumn":16,"suggestions":"199"},{"ruleId":"200","severity":1,"message":"201","line":33,"column":22,"nodeType":"202","messageId":"203","endLine":33,"endColumn":31},{"ruleId":"181","severity":1,"message":"182","line":36,"column":5,"nodeType":"183","messageId":"184","endLine":36,"endColumn":16},{"ruleId":"200","severity":1,"message":"201","line":40,"column":19,"nodeType":"202","messageId":"203","endLine":40,"endColumn":28},{"ruleId":"200","severity":1,"message":"201","line":50,"column":13,"nodeType":"202","messageId":"203","endLine":50,"endColumn":22},{"ruleId":"181","severity":1,"message":"182","line":51,"column":9,"nodeType":"183","messageId":"184","endLine":51,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":55,"column":14,"nodeType":"202","messageId":"203","endLine":55,"endColumn":23},{"ruleId":"181","severity":1,"message":"182","line":56,"column":9,"nodeType":"183","messageId":"184","endLine":56,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":60,"column":22,"nodeType":"202","messageId":"203","endLine":60,"endColumn":31},{"ruleId":"200","severity":1,"message":"201","line":70,"column":13,"nodeType":"202","messageId":"203","endLine":70,"endColumn":22},{"ruleId":"181","severity":1,"message":"182","line":71,"column":9,"nodeType":"183","messageId":"184","endLine":71,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":73,"column":14,"nodeType":"202","messageId":"203","endLine":73,"endColumn":23},{"ruleId":"181","severity":1,"message":"182","line":74,"column":9,"nodeType":"183","messageId":"184","endLine":74,"endColumn":20},{"ruleId":"181","severity":1,"message":"182","line":20,"column":3,"nodeType":"183","messageId":"184","endLine":20,"endColumn":14},{"ruleId":"200","severity":1,"message":"201","line":47,"column":23,"nodeType":"202","messageId":"203","endLine":47,"endColumn":32},{"ruleId":"200","severity":1,"message":"204","line":61,"column":20,"nodeType":"202","messageId":"203","endLine":61,"endColumn":35},{"ruleId":"181","severity":1,"message":"182","line":67,"column":7,"nodeType":"183","messageId":"184","endLine":67,"endColumn":18},{"ruleId":"181","severity":1,"message":"182","line":69,"column":7,"nodeType":"183","messageId":"184","endLine":69,"endColumn":18},{"ruleId":"181","severity":1,"message":"182","line":73,"column":7,"nodeType":"183","messageId":"184","endLine":73,"endColumn":18},{"ruleId":"200","severity":1,"message":"204","line":77,"column":23,"nodeType":"202","messageId":"203","endLine":77,"endColumn":38},{"ruleId":"181","severity":1,"message":"182","line":87,"column":7,"nodeType":"183","messageId":"184","endLine":87,"endColumn":18},{"ruleId":"200","severity":1,"message":"201","line":99,"column":13,"nodeType":"202","messageId":"203","endLine":99,"endColumn":22},{"ruleId":"181","severity":1,"message":"182","line":100,"column":9,"nodeType":"183","messageId":"184","endLine":100,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":103,"column":14,"nodeType":"202","messageId":"203","endLine":103,"endColumn":23},{"ruleId":"181","severity":1,"message":"182","line":104,"column":9,"nodeType":"183","messageId":"184","endLine":104,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":155,"column":23,"nodeType":"202","messageId":"203","endLine":155,"endColumn":32},{"ruleId":"200","severity":1,"message":"201","line":177,"column":15,"nodeType":"202","messageId":"203","endLine":177,"endColumn":24},{"ruleId":"181","severity":1,"message":"182","line":178,"column":11,"nodeType":"183","messageId":"184","endLine":178,"endColumn":22},{"ruleId":"200","severity":1,"message":"201","line":181,"column":16,"nodeType":"202","messageId":"203","endLine":181,"endColumn":25},{"ruleId":"181","severity":1,"message":"182","line":182,"column":11,"nodeType":"183","messageId":"184","endLine":182,"endColumn":22},{"ruleId":"200","severity":1,"message":"201","line":187,"column":21,"nodeType":"202","messageId":"203","endLine":187,"endColumn":30},{"ruleId":"200","severity":1,"message":"201","line":200,"column":13,"nodeType":"202","messageId":"203","endLine":200,"endColumn":22},{"ruleId":"181","severity":1,"message":"182","line":201,"column":9,"nodeType":"183","messageId":"184","endLine":201,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":204,"column":14,"nodeType":"202","messageId":"203","endLine":204,"endColumn":23},{"ruleId":"181","severity":1,"message":"182","line":205,"column":9,"nodeType":"183","messageId":"184","endLine":205,"endColumn":20},{"ruleId":"188","severity":1,"message":"205","line":212,"column":6,"nodeType":"190","endLine":212,"endColumn":8,"suggestions":"206"},{"ruleId":"200","severity":1,"message":"201","line":215,"column":28,"nodeType":"202","messageId":"203","endLine":215,"endColumn":37},{"ruleId":"181","severity":1,"message":"182","line":216,"column":7,"nodeType":"183","messageId":"184","endLine":216,"endColumn":18},{"ruleId":"181","severity":1,"message":"182","line":225,"column":7,"nodeType":"183","messageId":"184","endLine":225,"endColumn":18},{"ruleId":"188","severity":1,"message":"207","line":232,"column":6,"nodeType":"190","endLine":232,"endColumn":17,"suggestions":"208"},{"ruleId":"200","severity":1,"message":"201","line":235,"column":29,"nodeType":"202","messageId":"203","endLine":235,"endColumn":38},{"ruleId":"181","severity":1,"message":"182","line":236,"column":7,"nodeType":"183","messageId":"184","endLine":236,"endColumn":18},{"ruleId":"181","severity":1,"message":"182","line":239,"column":5,"nodeType":"183","messageId":"184","endLine":239,"endColumn":16},{"ruleId":"200","severity":1,"message":"201","line":244,"column":29,"nodeType":"202","messageId":"203","endLine":244,"endColumn":38},{"ruleId":"181","severity":1,"message":"182","line":249,"column":9,"nodeType":"183","messageId":"184","endLine":249,"endColumn":20},{"ruleId":"188","severity":1,"message":"209","line":257,"column":6,"nodeType":"190","endLine":257,"endColumn":8,"suggestions":"210"},{"ruleId":"188","severity":1,"message":"211","line":277,"column":6,"nodeType":"190","endLine":277,"endColumn":16,"suggestions":"212"},{"ruleId":"181","severity":1,"message":"182","line":280,"column":3,"nodeType":"183","messageId":"184","endLine":280,"endColumn":14},{"ruleId":"188","severity":1,"message":"213","line":37,"column":6,"nodeType":"190","endLine":37,"endColumn":8,"suggestions":"214"},{"ruleId":"181","severity":1,"message":"182","line":77,"column":11,"nodeType":"183","messageId":"184","endLine":77,"endColumn":22},{"ruleId":"181","severity":1,"message":"182","line":51,"column":9,"nodeType":"183","messageId":"184","endLine":51,"endColumn":20},{"ruleId":"185","severity":1,"message":"186","line":74,"column":11,"nodeType":"187","messageId":"184","endLine":74,"endColumn":38},{"ruleId":"181","severity":1,"message":"182","line":76,"column":11,"nodeType":"183","messageId":"184","endLine":76,"endColumn":22},{"ruleId":"188","severity":1,"message":"215","line":115,"column":3,"nodeType":"216","endLine":115,"endColumn":12,"suggestions":"217"},{"ruleId":"181","severity":1,"message":"182","line":168,"column":13,"nodeType":"183","messageId":"184","endLine":168,"endColumn":24},{"ruleId":"181","severity":1,"message":"182","line":86,"column":9,"nodeType":"183","messageId":"184","endLine":86,"endColumn":20},{"ruleId":"185","severity":1,"message":"186","line":157,"column":11,"nodeType":"187","messageId":"184","endLine":157,"endColumn":38},{"ruleId":"181","severity":1,"message":"182","line":159,"column":11,"nodeType":"183","messageId":"184","endLine":159,"endColumn":22},{"ruleId":"181","severity":1,"message":"182","line":193,"column":11,"nodeType":"183","messageId":"184","endLine":193,"endColumn":22},{"ruleId":"181","severity":1,"message":"182","line":216,"column":11,"nodeType":"183","messageId":"184","endLine":216,"endColumn":22},{"ruleId":"181","severity":1,"message":"182","line":240,"column":9,"nodeType":"183","messageId":"184","endLine":240,"endColumn":20},{"ruleId":"181","severity":1,"message":"182","line":246,"column":5,"nodeType":"183","messageId":"184","endLine":246,"endColumn":16},{"ruleId":"181","severity":1,"message":"182","line":247,"column":5,"nodeType":"183","messageId":"184","endLine":247,"endColumn":16},{"ruleId":"181","severity":1,"message":"182","line":248,"column":5,"nodeType":"183","messageId":"184","endLine":248,"endColumn":16},{"ruleId":"200","severity":1,"message":"201","line":261,"column":13,"nodeType":"202","messageId":"203","endLine":261,"endColumn":22},{"ruleId":"181","severity":1,"message":"182","line":262,"column":9,"nodeType":"183","messageId":"184","endLine":262,"endColumn":20},{"ruleId":"181","severity":1,"message":"182","line":264,"column":9,"nodeType":"183","messageId":"184","endLine":264,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":266,"column":14,"nodeType":"202","messageId":"203","endLine":266,"endColumn":23},{"ruleId":"181","severity":1,"message":"182","line":267,"column":9,"nodeType":"183","messageId":"184","endLine":267,"endColumn":20},{"ruleId":"188","severity":1,"message":"218","line":296,"column":6,"nodeType":"190","endLine":296,"endColumn":8,"suggestions":"219"},{"ruleId":"181","severity":1,"message":"182","line":45,"column":9,"nodeType":"183","messageId":"184","endLine":45,"endColumn":20},{"ruleId":"181","severity":1,"message":"182","line":23,"column":5,"nodeType":"183","messageId":"184","endLine":23,"endColumn":16},{"ruleId":"181","severity":1,"message":"182","line":27,"column":5,"nodeType":"183","messageId":"184","endLine":27,"endColumn":16},{"ruleId":"181","severity":1,"message":"182","line":39,"column":7,"nodeType":"183","messageId":"184","endLine":39,"endColumn":18},{"ruleId":"200","severity":1,"message":"201","line":41,"column":15,"nodeType":"202","messageId":"203","endLine":41,"endColumn":24},{"ruleId":"181","severity":1,"message":"182","line":42,"column":11,"nodeType":"183","messageId":"184","endLine":42,"endColumn":22},{"ruleId":"200","severity":1,"message":"201","line":44,"column":16,"nodeType":"202","messageId":"203","endLine":44,"endColumn":25},{"ruleId":"181","severity":1,"message":"182","line":45,"column":11,"nodeType":"183","messageId":"184","endLine":45,"endColumn":22},{"ruleId":"181","severity":1,"message":"182","line":91,"column":9,"nodeType":"183","messageId":"184","endLine":91,"endColumn":20},{"ruleId":"181","severity":1,"message":"182","line":127,"column":9,"nodeType":"183","messageId":"184","endLine":127,"endColumn":20},{"ruleId":"181","severity":1,"message":"182","line":146,"column":9,"nodeType":"183","messageId":"184","endLine":146,"endColumn":20},{"ruleId":"188","severity":1,"message":"198","line":35,"column":6,"nodeType":"190","endLine":35,"endColumn":16,"suggestions":"220"},{"ruleId":"200","severity":1,"message":"201","line":37,"column":22,"nodeType":"202","messageId":"203","endLine":37,"endColumn":31},{"ruleId":"181","severity":1,"message":"182","line":40,"column":5,"nodeType":"183","messageId":"184","endLine":40,"endColumn":16},{"ruleId":"200","severity":1,"message":"201","line":57,"column":19,"nodeType":"202","messageId":"203","endLine":57,"endColumn":28},{"ruleId":"200","severity":1,"message":"201","line":67,"column":13,"nodeType":"202","messageId":"203","endLine":67,"endColumn":22},{"ruleId":"181","severity":1,"message":"182","line":68,"column":9,"nodeType":"183","messageId":"184","endLine":68,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":72,"column":14,"nodeType":"202","messageId":"203","endLine":72,"endColumn":23},{"ruleId":"181","severity":1,"message":"182","line":73,"column":9,"nodeType":"183","messageId":"184","endLine":73,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":77,"column":22,"nodeType":"202","messageId":"203","endLine":77,"endColumn":31},{"ruleId":"200","severity":1,"message":"201","line":87,"column":13,"nodeType":"202","messageId":"203","endLine":87,"endColumn":22},{"ruleId":"181","severity":1,"message":"182","line":88,"column":9,"nodeType":"183","messageId":"184","endLine":88,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":90,"column":14,"nodeType":"202","messageId":"203","endLine":90,"endColumn":23},{"ruleId":"181","severity":1,"message":"182","line":91,"column":9,"nodeType":"183","messageId":"184","endLine":91,"endColumn":20},{"ruleId":"181","severity":1,"message":"182","line":95,"column":3,"nodeType":"183","messageId":"184","endLine":95,"endColumn":14},"lines-around-directive",["221"],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","no-alert","Unexpected alert.","CallExpression","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'nowBreed' and 'nowPetName'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPetname' needs the current value of 'nowPetName'.","ArrayExpression",["222"],"React Hook useEffect has a missing dependency: 'observer'. Either include it or remove the dependency array.",["223"],["221"],[],[],[],"React Hook useEffect has missing dependencies: 'Card', 'disconnect', and 'idValue'. Either include them or remove the dependency array.",["224"],"func-names","Unexpected unnamed function.","FunctionExpression","unnamed","Unexpected unnamed async function.","React Hook useEffect has missing dependencies: 'acceptUserData' and 'getRooms'. Either include them or remove the dependency array. If 'acceptUserData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["225"],"React Hook useEffect has a missing dependency: 'myIdData'. Either include it or remove the dependency array.",["226"],"React Hook useEffect has a missing dependency: 'roomState'. Either include it or remove the dependency array.",["227"],"React Hook useEffect has missing dependencies: 'targetChat' and 'targetList'. Either include them or remove the dependency array.",["228"],"React Hook useEffect has a missing dependency: 'firstOptionFunc'. Either include it or remove the dependency array.",["229"],"React Hook useEffect contains a call to 'setToday'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [getDateType] as a second argument to the useEffect Hook.","Identifier",["230"],"React Hook useEffect has a missing dependency: 'getDateType'. Either include it or remove the dependency array.",["231"],["232"],"padding-line-between-statements",{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"237","fix":"253"},"Update the dependencies array to be: [isModalOn, nowBreed, nowPetName]",{"range":"254","text":"255"},"Update the dependencies array to be: [observer]",{"range":"256","text":"257"},"Update the dependencies array to be: [Card, disconnect, idValue, targetId]",{"range":"258","text":"259"},"Update the dependencies array to be: [acceptUserData, getRooms]",{"range":"260","text":"261"},"Update the dependencies array to be: [myIdData, roomState]",{"range":"262","text":"263"},"Update the dependencies array to be: [roomState]",{"range":"264","text":"265"},"Update the dependencies array to be: [targetChat, targetId, targetList]",{"range":"266","text":"267"},"Update the dependencies array to be: [firstOptionFunc]",{"range":"268","text":"269"},"Add dependencies array: [getDateType]",{"range":"270","text":"271"},"Update the dependencies array to be: [getDateType]",{"range":"272","text":"273"},{"range":"274","text":"259"},[4960,4971],"[isModalOn, nowBreed, nowPetName]",[707,709],"[observer]",[684,694],"[Card, disconnect, idValue, targetId]",[5976,5978],"[acceptUserData, getRooms]",[6431,6442],"[myIdData, roomState]",[7147,7149],"[roomState]",[7592,7602],"[targetChat, targetId, targetList]",[915,917],"[firstOptionFunc]",[3001,3001],", [getDateType]",[8311,8313],"[getDateType]",[766,776]]