[{"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/ImageSlide/ImageSlide.jsx":"1","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/EachSlide/EachSlide.jsx":"2","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/index.js":"3","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/LandingPage/LandingPage.jsx":"4","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/MainPage/MainPage.jsx":"5","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/Chatpage/ChatPage.jsx":"6","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/MypageModal/MypageModal.jsx":"7","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Posts/Posts.jsx":"8","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostModal/PostModal.jsx":"9","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/ChatUser/ChatUser.jsx":"10","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/MyChat/MyChat.jsx":"11","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Modal/Modal.jsx":"12","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/DeleteModal/DeleteModal.jsx":"13","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/CropModal/CropModal.jsx":"14","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/useIntersectionObserver/useIntersectionObserver.jsx":"15","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comment/Comment.jsx":"16","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SimpleModal/SimpleModal.jsx":"17","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComment/SubComment.jsx":"18","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Nav/Nav.jsx":"19","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/App.jsx":"20","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostCropModal/PostCropModal.jsx":"21","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostNewFormModal/PostNewFormModal.jsx":"22","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Post/Post.jsx":"23","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comments/Comments.jsx":"24","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComments/SubComments.jsx":"25"},{"size":2178,"mtime":1607078376154,"results":"26","hashOfConfig":"27"},{"size":330,"mtime":1607072594693,"results":"28","hashOfConfig":"27"},{"size":309,"mtime":1606809858434,"results":"29","hashOfConfig":"27"},{"size":1905,"mtime":1607055288946,"results":"30","hashOfConfig":"27"},{"size":4443,"mtime":1607066201018,"results":"31","hashOfConfig":"27"},{"size":3969,"mtime":1607044022768,"results":"32","hashOfConfig":"27"},{"size":8107,"mtime":1606908953038,"results":"33","hashOfConfig":"27"},{"size":1465,"mtime":1607001405447,"results":"34","hashOfConfig":"27"},{"size":7212,"mtime":1607186630483,"results":"35","hashOfConfig":"27"},{"size":1304,"mtime":1607064649687,"results":"36","hashOfConfig":"27"},{"size":349,"mtime":1607044022765,"results":"37","hashOfConfig":"27"},{"size":573,"mtime":1606817202927,"results":"38","hashOfConfig":"27"},{"size":2288,"mtime":1606876971766,"results":"39","hashOfConfig":"27"},{"size":4266,"mtime":1606893058021,"results":"40","hashOfConfig":"27"},{"size":503,"mtime":1606996654303,"results":"41","hashOfConfig":"27"},{"size":954,"mtime":1607185336404,"results":"42","hashOfConfig":"27"},{"size":553,"mtime":1606809858418,"results":"43","hashOfConfig":"27"},{"size":834,"mtime":1607185457197,"results":"44","hashOfConfig":"27"},{"size":1149,"mtime":1606960982085,"results":"45","hashOfConfig":"27"},{"size":600,"mtime":1606809858391,"results":"46","hashOfConfig":"27"},{"size":3570,"mtime":1606905749699,"results":"47","hashOfConfig":"27"},{"size":7291,"mtime":1606908093380,"results":"48","hashOfConfig":"27"},{"size":342,"mtime":1606983425830,"results":"49","hashOfConfig":"27"},{"size":305,"mtime":1607185936949,"results":"50","hashOfConfig":"27"},{"size":296,"mtime":1606809858420,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1n26zk8",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"60"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/ImageSlide/ImageSlide.jsx",[],["114","115","116","117"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/EachSlide/EachSlide.jsx",[],["118","119","120","121"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/index.js",[],["122","123","124","125"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/LandingPage/LandingPage.jsx",["126","127"],"import React from 'react';\nimport styles from './LandingPage.module.css';\nimport googleImg from '../../images/google.png';\nimport githubImg from '../../images/github.png';\nimport gusetImg from '../../images/guest.png';\n\nconst LandingPage = () => {\n  const githubId = 'c88e8e9bc0063cfe57df';\n  const githubReURI = 'https://server.codestates-project.tk/auth/github';\n\n  const handleLogin = async (e) => {\n    if (e.target.name === 'google') {\n      alert('1.2패치 이후 제공예정');\n      window.location.href = 'https://e3fc39a5efdc.ngrok.io/main';\n    } else if (e.target.name === 'github') {\n      window.location.href = `https://github.com/login/oauth/authorize?client_id=${githubId}&scope=user:email&redirect_uri=${githubReURI}`;\n    } else if (e.target.name === 'guest') {\n      alert('1.2패치 이후 제공예정');\n      window.location.href = 'https://e3fc39a5efdc.ngrok.io/chat';\n    }\n  };\n\n  return (\n    <>\n      <div className={styles.landingpage}>\n        <div className={styles.login}> Select Login Option</div>\n        <div className={styles.buttonBox}>\n          <img\n            className={styles.google}\n            src={googleImg}\n            alt=\"google_img\"\n            name=\"google\"\n            onClick={handleLogin}\n          />\n          <img\n            className={styles.github}\n            src={githubImg}\n            alt=\"github_img\"\n            name=\"github\"\n            onClick={handleLogin}\n          />\n          <img\n            className={styles.guest}\n            src={gusetImg}\n            alt=\"guest_img\"\n            name=\"guest\"\n            onClick={handleLogin}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default LandingPage;\n\n/*  <div className={styles.whitebox}>\n          <div className={styles.nohuman}> </div>\n          <div className={styles.catman}> </div>\n          <div className={styles.huntingman}> </div>\n        </div>\n\n*/\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/MainPage/MainPage.jsx",["128"],"import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\nimport styles from './MainPage.module.css';\nimport Posts from '../../components/Posts/Posts';\nimport profileImg from '../../images/iguana.jpeg';\nimport addPostImg from '../../images/bark.png';\nimport PostModal from '../../components/PostModal/PostModal';\nimport PostNewFormModal from '../../components/PostNewFormModal/PostNewFormModal';\nimport img from '../../thumbnails/post_g.png';\n\nconst MainPage = () => {\n  const viewProfile = () => {\n    console.log('해당 프로필 유저의 posts를 렌더링');\n  };\n\n  const [posts, setPosts] = useState({ postData: [], postsCount: 0 });\n  // 서버에 요청중일 때\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAddPostOn, setIsAddPostOn] = useState(false);\n  const [isPostOn, setIsPostOn] = useState(false);\n\n  const [imageUrls, setImageUrls] = useState([]);\n  const viewAddPost = () => {\n    setIsAddPostOn(!isAddPostOn);\n  };\n\n  const viewPost = () => {\n    const fakeImageUrls = [img, img, img];\n    setImageUrls((prev) => {\n      return [...prev, ...fakeImageUrls];\n    });\n    setIsPostOn(!isPostOn);\n  };\n\n  // 처음에 ComponentDidMount에 쓰이는 함수\n  // postCount, count\n  const acceptPosts = async () => {\n    setIsLoading(true);\n    // 일단 로딩중을 띄우고(자료를 받는데 꽤 걸릴 수 있으니) 나중에 스피너 만들어서 container 안에 넣기\n    // try {\n    //   const response = await axios.post(\n    //     'https://server.codestates-project.tk/post/grid/latest',\n    //     { offset: postCount, count },\n    //     { withCredentials: true },\n    //   );\n    //   const acceptedPosts = response.data;\n    //   setIsLoading(false);\n    //   setPosts((prev) => {\n    //     acceptedPosts = acceptedPosts.concat(prev.postData);\n    //     return { postData: acceptedPosts, postsCount: acceptedPosts.length };\n    //   });\n    // } catch(err) {\n    //   console.log(err);\n    // }\n\n    // 서버에 요청을 보내고, 배열 형태의 자료를 받아서,\n    // [{postId=30, thumbnail:'http://...'}] 이런 형태의 자료\n    let acceptedPosts = [\n      { postId: 1, thumbnail: img },\n      { postId: 2, thumbnail: img },\n      { postId: 3, thumbnail: img },\n      { postId: 4, thumbnail: img },\n      { postId: 5, thumbnail: img },\n      { postId: 6, thumbnail: img },\n      { postId: 7, thumbnail: img },\n      { postId: 8, thumbnail: img },\n      { postId: 9, thumbnail: img },\n      { postId: 10, thumbnail: img },\n      { postId: 11, thumbnail: img },\n      { postId: 12, thumbnail: img },\n      { postId: 13, thumbnail: img },\n      { postId: 14, thumbnail: img },\n      { postId: 15, thumbnail: img },\n    ];\n    // flex로 바꿨기에 배열 내 요소를 세개의 요소로 이루어진 배열로 만들어놔야함\n    setIsLoading(false);\n    setPosts((prev) => {\n      acceptedPosts = acceptedPosts.concat(prev.postData);\n      return { postData: acceptedPosts, postsCount: acceptedPosts.length };\n    });\n  };\n\n  // 처음에 ComponentDidMount\n  useEffect(() => {\n    acceptPosts();\n    // render 완료!\n  }, []);\n\n  return (\n    <>\n      <PostNewFormModal isModalOn={isAddPostOn} handleClose={viewAddPost} />\n      <PostModal\n        imageUrls={imageUrls}\n        isModalOn={isPostOn}\n        handleClose={viewPost}\n      />\n      <div className={styles.main}>\n        <div className={styles.flexBox}>\n          <div className={styles.profile} onClick={viewProfile}>\n            <img src={profileImg} className={styles.image} alt=\"profile_img\" />\n            <div className={styles.userInform}>\n              <div className={styles.petName}>곤살로 이구아인</div>\n              <div className={styles.breed}>아르헨티나산 이구아인</div>\n              <div className={styles.postCountPart}>\n                <div className={styles.postsCount}>Posts</div>\n                <div className={styles.postsCountNumber}>22</div>\n              </div>\n            </div>\n          </div>\n          <Posts\n            isLoading={isLoading}\n            addPosts={acceptPosts}\n            posts={posts.postData}\n            viewPost={viewPost}\n            postsCount={posts.postsCount}\n          />\n        </div>\n        <div className={styles.addButton} onClick={viewAddPost}>\n          <img className={styles.addPostImg} src={addPostImg} alt=\"addPost\" />\n        </div>\n      </div>\n    </>\n  );\n};\nexport default MainPage;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/Chatpage/ChatPage.jsx",["129","130","131","132"],"import React, { createRef, useEffect, useState } from 'react';\nimport styles from './ChatPage.module.css';\nimport iguanaImg from '../../images/iguana.jpeg';\nimport ChatUser from '../../components/ChatUser/ChatUser';\nimport MyChat from '../../components/MyChat/MyChat';\n\nconst username = '닉네임은팔글자요';\nconst breedname = '글자수는열다섯으로기준을잡겠다';\nconst messageContent =\n  '본사는 소규모창업아이템으로 성공한 사례와 실패 사례에관한 경험을 바탕으로 외식업 창업 성공에 관한 전문지식을 갖춘 창업 전문가들이 상권분석, 매장계약, 오픈 전까지의 모든 과정을 컨설팅하여 진행 중”이라며 “한식도시락배달 창업 또는 샵인샵배달창업을 고려하고 있는 예비 가맹점주들은 전문 상담을 통해 문의 해보길 바란다”고 전했다.';\n\nconst ChatPage = () => {\n  const test = createRef();\n  const test2 = createRef();\n\n  const myFunction = function (e) {\n    if (e.keyCode === 13) {\n      console.log(isOn);\n      alert('엔터치셨네요. 채팅치는 기능은 곧 나옵니다!');\n    }\n  };\n  const [isOn, isOntoggle] = useState(1);\n\n  useEffect(() => {\n    const arr = ['Win16', 'Win32', 'Win64', 'Mac', 'MacIntel'];\n    if (arr.includes(navigator.platform)) {\n      console.log(test.current.style);\n      if (isOn > 2) {\n        test.current.style.display = 'none';\n      }\n    }\n  });\n\n  return (\n    <div className={styles.main}>\n      <div className={styles.main}> </div>\n      <div className={styles.flexBox}>\n        <div className={styles.listBox} ref={test}>\n          <div className={styles.profile}>\n            <img className={styles.image} src={iguanaImg} alt=\"profile\" />\n            <div className={styles.name}>{username}</div>\n            <div className={styles.breed}>{breedname}</div>\n          </div>\n          <div className={styles.userlist}>\n            <div className={styles.profileBlock}>모바일 버전용</div>\n            <ChatUser\n              idValue={3}\n              state={isOn}\n              stateFunc={isOntoggle}\n              ref={test}\n            />\n            <ChatUser\n              idValue={5}\n              state={isOn}\n              stateFunc={isOntoggle}\n              ref={test}\n            />\n            <ChatUser\n              idValue={20}\n              state={isOn}\n              stateFunc={isOntoggle}\n              ref={test}\n            />\n          </div>\n        </div>\n        <div className={styles.chatBox}>\n          <div className={styles.chatonBoard}>\n            <div className={styles.block}> </div>\n            <div className={styles.talkBox}>\n              <img\n                className={styles.chatProfile}\n                src={iguanaImg}\n                alt=\"chatprofile_img\"\n              />\n              <div className={styles.message}>{messageContent}</div>\n              <div className={styles.dates}>2020-11-30-MON</div>\n            </div>\n            <div className={styles.talkBox} ref={test2}>\n              <img\n                className={styles.chatProfile}\n                src={iguanaImg}\n                alt=\"chatprofile_img\"\n              />\n              <div className={styles.message}>{messageContent}</div>\n              <div className={styles.dates}>2020-11-30-MON</div>\n            </div>\n\n            <div className={styles.talkBox}>\n              <img\n                className={styles.chatProfile}\n                src={iguanaImg}\n                alt=\"chatprofile_img\"\n              />\n              <div className={styles.message}>{messageContent}</div>\n              <div className={styles.dates}>2020-11-30-MON</div>\n            </div>\n            <MyChat />\n          </div>\n          <input\n            className={styles.chatPost}\n            type=\"text\"\n            placeholder=\"메시지 입력..\"\n            onKeyDown={myFunction}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatPage;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/MypageModal/MypageModal.jsx",["133","134","135"],"import { createRef, React, useState } from 'react';\nimport axios from 'axios';\n\nimport styles from './MypageModal.module.css';\nimport Modal from '../Modal/Modal';\nimport defaultProfile from '../../images/defaultProfile.png';\nimport logoImg from '../../images/logo.png';\nimport DeleteModal from '../DeleteModal/DeleteModal';\nimport CropModal from '../CropModal/CropModal';\n\nconst MypageModal = ({ isModalOn, handleClose }) => {\n  // img 변경관련 로직\n  const [cropModalOn, setCropModalOn] = useState(false);\n  const handleCropModalOn = () => {\n    setCropModalOn(!cropModalOn);\n  };\n  const [imgSrc, setImgSrc] = useState(null);\n  const [nowImg, setNowImg] = useState(defaultProfile);\n  // const handleNowImg = (newImg) => {\n  //   setNowImg(newImg);\n  // };\n\n  const changeProfile = (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      // html5의 fileAPI\n      const reader = new FileReader();\n      reader.readAsDataURL(e.target.files[0]);\n      reader.addEventListener('load', () => {\n        setImgSrc(reader.result);\n      });\n      handleCropModalOn();\n    }\n  };\n\n  // 서버에서 보내준 정보를 렌더링(초기)할 때 useState 디폴트 값으로 받기\n  // + 유효성 검사 로직\n  const [nowPetName, setNowPetName] = useState('스눕독');\n  const [nowBreed, setNowBreed] = useState('시바견');\n  const petnameRef = createRef();\n  const breedRef = createRef();\n\n  const [petName, setPetname] = useState(nowPetName);\n  const [breed, setBreed] = useState(nowBreed);\n  const [checked, setChecked] = useState({ petname: true, breed: true });\n\n  // 유효성 검사 로직\n  const checkInform = (e) => {\n    if (e.target.name === 'petname') {\n      setChecked({ ...checked, petname: true });\n      if (e.target.value.length > 18 || e.target.value.length === 0) {\n        setChecked({ ...checked, petname: false });\n      }\n      setPetname(e.target.value);\n    } else if (e.target.name === 'breed') {\n      setChecked({ ...checked, breed: true });\n      if (e.target.value.length > 18 || e.target.value.length === 0) {\n        setChecked({ ...checked, breed: false });\n      }\n      setBreed(e.target.value);\n    }\n  };\n\n  // 실제 펫네임을 변경하기 위해 서버에 PATCH 요청을 보내는 로직\n  const changePetname = async () => {\n    if (checked.petname) {\n      try {\n        const response = await axios.patch(\n          'https://server.codestates-project.tk/user/petname',\n          {\n            petName,\n          },\n          { withCredentials: true },\n        );\n        if (response.status === 201) {\n          setNowPetName(petName);\n          setPetname(petName);\n          petnameRef.current.blur(); // 해결하기\n        }\n      } catch (err) {\n        // 중복 펫네임 409\n        if (err.response.status === 501) {\n          alert('some errors occur at server, please try again');\n        } else if (err.response.status === 404) {\n          setChecked({ ...checked, petname: false });\n        } else {\n          console.log(err);\n        }\n      }\n    }\n  };\n\n  // 실제 품종을 변경하기 위해 서버에 PATCH 요청을 보내는 로직\n  const changeBreed = async () => {\n    if (checked.breed) {\n      try {\n        const response = await axios.patch(\n          'https://server.codestates-project.tk/user/breed',\n          {\n            breed,\n          },\n          { withCredentials: true },\n        );\n        if (response.status === 201) {\n          setNowBreed(breed);\n          setBreed(breed);\n          breedRef.current.blur();\n        }\n      } catch (err) {\n        if (err.response.status === 501) {\n          alert('some errors occur at server, please try again');\n        } else if (err.response.status === 404) {\n          setChecked({ ...checked, breed: false });\n        }\n      }\n    }\n  };\n\n  const resetAndTurnOffTheModal = () => {\n    setPetname(nowPetName);\n    setBreed(nowBreed);\n    setChecked({ petname: true, breed: true });\n    handleClose();\n  };\n\n  // 회원 탈퇴 모달은 디폴트 모달을 재활용하지 않는 것이기에 따로 state로 관리\n  const [deleteModalOn, setDeleteModalOn] = useState(false);\n  const viewDeleteModal = () => {\n    setDeleteModalOn(!deleteModalOn);\n  };\n\n  return (\n    <>\n      <DeleteModal isModalOn={deleteModalOn} handleClose={viewDeleteModal} />\n      <Modal isModalOn={isModalOn} handleClose={resetAndTurnOffTheModal}>\n        <div className={styles.MypageModal}>\n          <div className={styles.profile}>\n            <div className={styles.imgPart}>\n              <img src={nowImg} className={styles.profileImg} alt=\"profile\" />\n            </div>\n            <div className={styles.informPart}>\n              <div className={styles.title}>프로필 사진</div>\n              <input\n                id=\"profileImgInput\"\n                type=\"file\"\n                className={styles.profileImgInput}\n                onChange={changeProfile}\n              />\n              <label htmlFor=\"profileImgInput\">\n                <div className={styles.editButton}>Edit Picture</div>\n              </label>\n            </div>\n          </div>\n          <div className={styles.editPart}>\n            <div className={styles.petnameEdit}>\n              <div className={styles.petnameTitle}>\n                <img className={styles.logoImg} src={logoImg} alt=\"logo\" />\n                Pet Name\n              </div>\n              <div className={styles.petnameEditPart}>\n                <input\n                  ref={petnameRef}\n                  className={styles.myPageInput}\n                  spellCheck={false}\n                  onChange={checkInform}\n                  value={petName}\n                  name=\"petname\"\n                />\n                <button\n                  className={`${styles.informEditButton} ${\n                    checked.petname && styles.isOn\n                  }`}\n                  type=\"button\"\n                  onClick={changePetname}\n                >\n                  Edit\n                </button>\n              </div>\n              {checked.petname ? null : (\n                <div className={styles.caution}>\n                  펫네임은 최소 1글자 이상 18글자 이하로 작성해주세요\n                </div>\n              )}\n            </div>\n            <div className={styles.breedEdit}>\n              <div className={styles.breedTitle}>\n                <img className={styles.logoImg} src={logoImg} alt=\"logo\" />\n                Breed\n              </div>\n              <div className={styles.breedEditPart}>\n                <input\n                  ref={breedRef}\n                  className={styles.myPageInput}\n                  spellCheck={false}\n                  name=\"breed\"\n                  value={breed}\n                  onChange={checkInform}\n                />\n                <button\n                  className={`${styles.informEditButton} ${\n                    checked.breed && styles.isOn\n                  }`}\n                  type=\"button\"\n                  onClick={changeBreed}\n                >\n                  Edit\n                </button>\n              </div>\n              {checked.breed ? null : (\n                <div className={styles.caution}>\n                  품종은 최소 1글자 이상 18글자 이하로 작성해주세요\n                </div>\n              )}\n            </div>\n            <div className={styles.deleteEdit}>\n              <div className={styles.deleteTitle}>\n                <img className={styles.logoImg} src={logoImg} alt=\"logo\" />\n                Delete Account\n              </div>\n              <button\n                id={styles.deleteButton}\n                className={styles.deleteEditButton}\n                type=\"button\"\n                onClick={viewDeleteModal}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      </Modal>\n      <CropModal\n        setNowImg={setNowImg}\n        imgSrc={imgSrc}\n        setImgSrc={setImgSrc}\n        isModalOn={cropModalOn}\n        handleClose={handleCropModalOn}\n      />\n    </>\n  );\n};\n\nexport default MypageModal;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Posts/Posts.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostModal/PostModal.jsx",["136","137"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/ChatUser/ChatUser.jsx",["138","139","140","141","142","143"],"import React, { createRef, useEffect, useState } from 'react';\nimport styles from './ChatUser.module.css';\nimport iguanaImg from '../../images/iguana.jpeg';\n\nconst ChatUser = ({ idValue, state, stateFunc }) => {\n  const Card = createRef();\n  console.log(idValue);\n\n  const [changes, changeToggle] = useState(state);\n\n  useEffect(() => {\n    if (state !== idValue) {\n      Card.current.style.backgroundColor = 'white';\n      console.log(changes);\n      console.log(changeToggle);\n    }\n  });\n\n  const handleCard = function () {\n    const arr = ['Win16', 'Win32', 'Win64', 'Mac', 'MacIntel'];\n    stateFunc(idValue);\n    Card.current.style.backgroundColor = 'rgba(255,198,0)';\n    if (arr.includes(navigator.platform)) {\n      if (state === 1) {\n        stateFunc(2);\n      } else {\n        stateFunc(idValue);\n        console.log(state);\n      }\n    }\n  };\n\n  return (\n    <div className={styles.usercard} ref={Card} onClick={handleCard}>\n      <img className={styles.userProfile} src={iguanaImg} alt=\"userprofile\" />\n      <div className={styles.username}>닉네임은팔글자요</div>\n      <div className={styles.userbreed}>글자수는열다섯으로기준을잡겠다</div>\n      <div className={styles.status}>안 읽은 메시지가 있습니다.</div>\n    </div>\n  );\n};\nexport default ChatUser;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/MyChat/MyChat.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Modal/Modal.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/DeleteModal/DeleteModal.jsx",["144","145"],"import { React, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport styles from './DeleteModal.module.css';\nimport deleteMotionImg from '../../images/deleteMotion.png';\nimport SimpleModal from '../SimpleModal/SimpleModal';\n\nconst DeleteModal = ({ isModalOn, handleClose }) => {\n  const history = useHistory();\n  const [deleted, setDeleted] = useState(false);\n\n  const deleteAccount = async () => {\n    try {\n      const response = await axios.delete(\n        'https://server.codestates-project.tk/user',\n      );\n      if (response.status === 201) {\n        setDeleted(true);\n        setTimeout(() => {\n          // 탈퇴 완료후에 랜딩페이지로 자동 이동(4초후에)\n          history.push('/');\n        }, 5000);\n      }\n    } catch (err) {\n      if (err.response.status === 501) {\n        alert('some errors occur at server, please try again');\n      } else {\n        console.log(err);\n      }\n    }\n  };\n\n  return (\n    <SimpleModal isModalOn={isModalOn} handleClose={handleClose}>\n      <img\n        className={styles.deleteMotion}\n        src={deleteMotionImg}\n        alt=\"handsign\"\n      />\n      {deleted ? (\n        <>\n          <div className={styles.message}>정상적으로 처리되었습니다</div>\n          <div className={styles.message}>이용해주셔서 감사합니다</div>\n          <div className={styles.caution} id={styles.deleteMessage}>\n            4초 후에 로그인 페이지로 이동합니다\n          </div>\n        </>\n      ) : (\n        <>\n          <div className={styles.message}>정말로 회원 탈퇴를 원하시나요?</div>\n          <div id={styles.deleteMessage} className={styles.message}>\n            삭제 요청은 되돌릴 수 없습니다\n          </div>\n          <div className={styles.yesOrNoButton}>\n            <button\n              className={styles.yesButton}\n              type=\"button\"\n              onClick={deleteAccount}\n            >\n              Yes\n            </button>\n            <button\n              className={styles.noButton}\n              type=\"button\"\n              onClick={handleClose}\n            >\n              No\n            </button>\n          </div>\n        </>\n      )}\n    </SimpleModal>\n  );\n};\n\nexport default DeleteModal;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/CropModal/CropModal.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/useIntersectionObserver/useIntersectionObserver.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comment/Comment.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SimpleModal/SimpleModal.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComment/SubComment.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Nav/Nav.jsx",[],["146","147","148","149"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/App.jsx",[],["150","151","152","153"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostCropModal/PostCropModal.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostNewFormModal/PostNewFormModal.jsx",["154"],"import { createRef, React, useState } from 'react';\n// import axios from 'axios';\nimport styles from './PostNewFormModal.module.css';\nimport close from '../../images/close.png';\nimport PostCropModal from '../PostCropModal/PostCropModal';\n\nconst PostNewFormModal = ({ isModalOn, handleClose }) => {\n  const imgInput1 = createRef();\n  const imgInput2 = createRef();\n  const imgInput3 = createRef();\n  const textAreaRef = createRef();\n  const [isCropModalOn, setIsCropModalOn] = useState(false);\n  const [inputNum, setInputNum] = useState(null);\n  const [checked, setChecked] = useState(false);\n  const [imgChecked, setImgChecked] = useState(false);\n\n  const handleCropModal = () => {\n    setIsCropModalOn(!isCropModalOn);\n  };\n  const [imgSrc, setImgSrc] = useState(null);\n  const [imgSrcs, setImgSrcs] = useState({ 1: '+', 2: '+', 3: '+' });\n\n  const setImgSrcsFunc = (inputNumber, urlSrc) => {\n    if (inputNumber === 1) {\n      setImgSrcs({ ...imgSrcs, 1: urlSrc });\n    } else if (inputNumber === 2) {\n      setImgSrcs({ ...imgSrcs, 2: urlSrc });\n    } else if (inputNumber === 3) {\n      setImgSrcs({ ...imgSrcs, 3: urlSrc });\n    }\n  };\n\n  const imgOnChange = (e) => {\n    setImgChecked(false);\n    try {\n      const urlSrc = URL.createObjectURL(e.target.files[0]);\n      if (e.target.name === 'imgInput1') {\n        setInputNum(1);\n        setImgSrc(urlSrc);\n        handleCropModal();\n      } else if (e.target.name === 'imgInput2') {\n        setInputNum(2);\n        setImgSrc(urlSrc);\n        handleCropModal();\n      } else if (e.target.name === 'imgInput3') {\n        setInputNum(3);\n        setImgSrc(urlSrc);\n        handleCropModal();\n      }\n    } catch (err) {\n      alert('we only accept image files');\n    }\n  };\n\n  const resetAndCloseModal = () => {\n    setImgSrcs({ 1: '+', 2: '+', 3: '+' });\n    setChecked(false);\n    setImgChecked(false);\n    textAreaRef.current.value = null;\n    handleClose();\n  };\n\n  const sendNewPost = async () => {\n    if (textAreaRef.current.value.trim().length === 0) {\n      setChecked(true);\n    } else {\n      // 이미지가 1개 미만이면 즉, 0개 업로딩이면 못보내게 하기\n      const formData = new FormData();\n      formData.append('text', textAreaRef.current.value);\n      const dataArr = [];\n      for (const el of Object.values(imgSrcs)) {\n        if (el !== '+') {\n          const encodeData = el.replace('data:image/png;base64,', '');\n          const decodImg = atob(encodeData);\n          const array = [];\n          for (let i = 0; i < decodImg.length; i += 1) {\n            array.push(decodImg.charCodeAt(i));\n          }\n          const file = new Blob([new Uint8Array(array)], { type: 'image/png' });\n          dataArr.push(file);\n        }\n      }\n      // 현재 dataArr 에 이미지가 있음 (Blob 타입의)\n      let image1;\n      if (dataArr[0]) {\n        // eslint-disable-next-line prefer-destructuring\n        image1 = dataArr[0];\n      } else {\n        setImgChecked(true);\n        return null;\n      }\n      const image2 = dataArr[1] ? dataArr[1] : null;\n      const image3 = dataArr[2] ? dataArr[2] : null;\n\n      const fileName = 'canvas_img_'.concat(\n        new Date().getMilliseconds(),\n        '.png',\n      );\n\n      if (image1) formData.append('image1', image1, fileName);\n      if (image2) formData.append('image2', image2, fileName);\n      if (image3) formData.append('image3', image3, fileName);\n\n      // const response = await axios({\n      //   method: 'post',\n      //   url: 'https://server.codestates-project.tk/post',\n      //   data: formData,\n      //   headers: {\n      //     'Content-Type': `multipart/form-data`,\n      //   },\n      // });\n      // console.log(response);\n      resetAndCloseModal();\n    }\n  };\n\n  return (\n    <>\n      <PostCropModal\n        setImgSrcs={setImgSrcsFunc}\n        inputNum={inputNum}\n        setImgSrc={setImgSrc}\n        imgSrc={imgSrc}\n        isModalOn={isCropModalOn}\n        handleClose={handleCropModal}\n      />\n      <div className={`${styles.modal} ${isModalOn && styles.isOn}`}>\n        <div className={styles.box}>\n          <img\n            className={styles.close}\n            src={close}\n            alt=\"close\"\n            onClick={resetAndCloseModal}\n          />\n          <div className={styles.postNewFormModal}>\n            <div className={styles.imgInputPart}>\n              <input\n                className={styles.imgInput}\n                type=\"file\"\n                accept=\"image/gif, image/jpeg, image/png\"\n                name=\"imgInput1\"\n                id=\"imgInput1\"\n                ref={imgInput1}\n                onChange={imgOnChange}\n              />\n              <input\n                className={styles.imgInput}\n                type=\"file\"\n                accept=\"image/gif, image/jpeg, image/png\"\n                name=\"imgInput2\"\n                id=\"imgInput2\"\n                ref={imgInput2}\n                onChange={imgOnChange}\n              />\n              <input\n                className={styles.imgInput}\n                type=\"file\"\n                accept=\"image/gif, image/jpeg, image/png\"\n                name=\"imgInput3\"\n                id=\"imgInput3\"\n                ref={imgInput3}\n                onChange={imgOnChange}\n              />\n              <label className={styles.labels} htmlFor=\"imgInput1\">\n                {imgSrcs[1] === '+' ? (\n                  '+'\n                ) : (\n                  <img\n                    className={styles.uploadedImg}\n                    src={imgSrcs[1]}\n                    alt=\"upload img\"\n                  />\n                )}\n              </label>\n              <label className={styles.labels} htmlFor=\"imgInput2\">\n                {imgSrcs[2] === '+' ? (\n                  '+'\n                ) : (\n                  <img\n                    className={styles.uploadedImg}\n                    src={imgSrcs[2]}\n                    alt=\"upload img\"\n                  />\n                )}\n              </label>\n              <label className={styles.labels} htmlFor=\"imgInput3\">\n                {imgSrcs[3] === '+' ? (\n                  '+'\n                ) : (\n                  <img\n                    className={styles.uploadedImg}\n                    src={imgSrcs[3]}\n                    alt=\"upload img\"\n                  />\n                )}\n              </label>\n            </div>\n            {imgChecked && (\n              <div className={styles.imgCheck}>\n                하나 이상의 이미지를 업로드 해주세요\n              </div>\n            )}\n            <div className={styles.textInputPart}>\n              <textarea\n                onKeyDown={() => {\n                  setChecked(false);\n                }}\n                ref={textAreaRef}\n                placeholder=\"내용을 입력해주세요\"\n                spellCheck={false}\n                className={`${styles.textInput} ${checked && styles.isOn}`}\n              />\n            </div>\n            <div className={styles.btnInputPart}>\n              <button\n                className={styles.barkBtn}\n                type=\"button\"\n                onClick={sendNewPost}\n              >\n                Bark\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PostNewFormModal;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Post/Post.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comments/Comments.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComments/SubComments.jsx",[],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"155","replacedBy":"163"},{"ruleId":"157","replacedBy":"164"},{"ruleId":"159","replacedBy":"165"},{"ruleId":"161","replacedBy":"166"},{"ruleId":"155","replacedBy":"167"},{"ruleId":"157","replacedBy":"168"},{"ruleId":"159","replacedBy":"169"},{"ruleId":"161","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":13,"column":7,"nodeType":"173","messageId":"174","endLine":13,"endColumn":29},{"ruleId":"171","severity":1,"message":"172","line":18,"column":7,"nodeType":"173","messageId":"174","endLine":18,"endColumn":29},{"ruleId":"175","severity":1,"message":"176","line":13,"column":5,"nodeType":"177","messageId":"174","endLine":13,"endColumn":16},{"ruleId":"178","severity":1,"message":"179","line":16,"column":22,"nodeType":"180","messageId":"181","endLine":16,"endColumn":31},{"ruleId":"175","severity":1,"message":"176","line":18,"column":7,"nodeType":"177","messageId":"174","endLine":18,"endColumn":18},{"ruleId":"171","severity":1,"message":"172","line":19,"column":7,"nodeType":"173","messageId":"174","endLine":19,"endColumn":40},{"ruleId":"175","severity":1,"message":"176","line":27,"column":7,"nodeType":"177","messageId":"174","endLine":27,"endColumn":18},{"ruleId":"171","severity":1,"message":"172","line":82,"column":11,"nodeType":"173","messageId":"174","endLine":82,"endColumn":65},{"ruleId":"175","severity":1,"message":"176","line":86,"column":11,"nodeType":"177","messageId":"174","endLine":86,"endColumn":22},{"ruleId":"171","severity":1,"message":"172","line":110,"column":11,"nodeType":"173","messageId":"174","endLine":110,"endColumn":65},{"ruleId":"175","severity":1,"message":"176","line":68,"column":21,"nodeType":"177","messageId":"174","endLine":68,"endColumn":32},{"ruleId":"175","severity":1,"message":"176","line":153,"column":21,"nodeType":"177","messageId":"174","endLine":153,"endColumn":32},{"ruleId":"175","severity":1,"message":"176","line":7,"column":3,"nodeType":"177","messageId":"174","endLine":7,"endColumn":14},{"ruleId":"182","severity":1,"message":"183","line":11,"column":3,"nodeType":"184","endLine":11,"endColumn":12,"suggestions":"185"},{"ruleId":"175","severity":1,"message":"176","line":14,"column":7,"nodeType":"177","messageId":"174","endLine":14,"endColumn":18},{"ruleId":"175","severity":1,"message":"176","line":15,"column":7,"nodeType":"177","messageId":"174","endLine":15,"endColumn":18},{"ruleId":"178","severity":1,"message":"179","line":19,"column":22,"nodeType":"180","messageId":"181","endLine":19,"endColumn":31},{"ruleId":"175","severity":1,"message":"176","line":28,"column":9,"nodeType":"177","messageId":"174","endLine":28,"endColumn":20},{"ruleId":"171","severity":1,"message":"172","line":26,"column":9,"nodeType":"173","messageId":"174","endLine":26,"endColumn":63},{"ruleId":"175","severity":1,"message":"176","line":28,"column":9,"nodeType":"177","messageId":"174","endLine":28,"endColumn":20},{"ruleId":"155","replacedBy":"186"},{"ruleId":"157","replacedBy":"187"},{"ruleId":"159","replacedBy":"188"},{"ruleId":"161","replacedBy":"189"},{"ruleId":"155","replacedBy":"190"},{"ruleId":"157","replacedBy":"191"},{"ruleId":"159","replacedBy":"192"},{"ruleId":"161","replacedBy":"193"},{"ruleId":"171","severity":1,"message":"172","line":51,"column":7,"nodeType":"173","messageId":"174","endLine":51,"endColumn":42},"lines-around-directive",["194"],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],["194"],[],[],[],["194"],[],[],[],"no-alert","Unexpected alert.","CallExpression","unexpected","no-console","Unexpected console statement.","MemberExpression","func-names","Unexpected unnamed function.","FunctionExpression","unnamed","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'changeToggle'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [state, idValue, Card, changes] as a second argument to the useEffect Hook.","Identifier",["195"],["194"],[],[],[],["194"],[],[],[],"padding-line-between-statements",{"desc":"196","fix":"197"},"Add dependencies array: [state, idValue, Card, changes]",{"range":"198","text":"199"},[488,488],", [state, idValue, Card, changes]"]