[{"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/Chatpage/ChatPage.jsx":"1","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/MainPage/MainPage.jsx":"2","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/EachSlide/EachSlide.jsx":"3","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComments/SubComments.jsx":"4","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComment/SubComment.jsx":"5","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/fakeData.js":"6","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/App.jsx":"7","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Post/Post.jsx":"8","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/ImageSlide/ImageSlide.jsx":"9","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostCropModal/PostCropModal.jsx":"10","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostModal/PostModal.jsx":"11","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Posts/Posts.jsx":"12","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comments/Comments.jsx":"13","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comment/Comment.jsx":"14","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostDeleteModal/PostDeleteModal.jsx":"15","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Nav/Nav.jsx":"16","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/MypageModal/MypageModal.jsx":"17","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/CropModal/CropModal.jsx":"18","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/LandingPage/LandingPage.jsx":"19","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/useIntersectionObserver/useIntersectionObserver.jsx":"20","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostNewFormModal/PostNewFormModal.jsx":"21"},{"size":6464,"mtime":1607396806746,"results":"22","hashOfConfig":"23"},{"size":6133,"mtime":1607476993661,"results":"24","hashOfConfig":"23"},{"size":330,"mtime":1607072594693,"results":"25","hashOfConfig":"23"},{"size":1006,"mtime":1607485679902,"results":"26","hashOfConfig":"23"},{"size":4252,"mtime":1607486001671,"results":"27","hashOfConfig":"23"},{"size":2521,"mtime":1607400361280,"results":"28","hashOfConfig":"23"},{"size":5153,"mtime":1607494429213,"results":"29","hashOfConfig":"23"},{"size":413,"mtime":1607350751434,"results":"30","hashOfConfig":"31"},{"size":2178,"mtime":1607078376154,"results":"32","hashOfConfig":"23"},{"size":3570,"mtime":1606905749699,"results":"33","hashOfConfig":"23"},{"size":13459,"mtime":1607500450224,"results":"34","hashOfConfig":"23"},{"size":1933,"mtime":1607495285767,"results":"35","hashOfConfig":"23"},{"size":1155,"mtime":1607438156152,"results":"36","hashOfConfig":"23"},{"size":4656,"mtime":1607493394948,"results":"37","hashOfConfig":"23"},{"size":2058,"mtime":1607492822766,"results":"38","hashOfConfig":"23"},{"size":1324,"mtime":1607498942314,"results":"39","hashOfConfig":"23"},{"size":8148,"mtime":1607493781268,"results":"40","hashOfConfig":"23"},{"size":4266,"mtime":1607406811587,"results":"41","hashOfConfig":"23"},{"size":2195,"mtime":1607396806747,"results":"42","hashOfConfig":"31"},{"size":503,"mtime":1606996654303,"results":"43","hashOfConfig":"31"},{"size":8203,"mtime":1607490627042,"results":"44","hashOfConfig":"31"},{"filePath":"45","messages":"46","errorCount":2,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":null},"cnzfbj",{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1n26zk8",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/Chatpage/ChatPage.jsx",["89","90","91"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/MainPage/MainPage.jsx",["92","93","94","95"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/EachSlide/EachSlide.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComments/SubComments.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComment/SubComment.jsx",["96","97"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/fakeData.js",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/App.jsx",["98"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Post/Post.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/ImageSlide/ImageSlide.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostCropModal/PostCropModal.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostModal/PostModal.jsx",["99","100","101","102","103"],"import React, { useState, useRef, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport styles from './PostModal.module.css';\nimport ImageSlide from '../ImageSlide/ImageSlide';\nimport close from '../../images/close.png';\nimport Comments from '../Comments/Comments';\nimport likeImg from '../../images/fulfilledHeart.png';\nimport unLikeImg from '../../images/unfulfilledHeart.png';\nimport updateBtn from '../../images/updateBtn.png';\nimport PostDeleteModal from '../PostDeleteModal/PostDeleteModal';\n\nconst PostModal = ({\n  setPostModalData,\n  refreshPost,\n  getPosts,\n  getUserData,\n  postData,\n  isModalOn,\n  handleClose,\n  deletePost,\n}) => {\n  const history = useHistory();\n  // rerender 될 때마다 바뀔 수 있도록 변수로 post와 user정보는 const 변수로 선언\n  const userInform = postData.user;\n  const postDatas = postData.post;\n  const commentsInform = postData.comments;\n  const commentInputRef = useRef(null);\n  const textRef = useRef(null);\n  const [commentToggle, setCommentToggle] = useState(false);\n  const [updateBtnToggle, setUpdateBtnToggle] = useState(false);\n  const [textUpdateToggled, setTextUpdateToggled] = useState(false);\n  const [isDeleteOn, setIsDeleteOn] = useState(false);\n\n  const [textVal, setTextVal] = useState(null);\n\n  // post에 대한 댓글인지, 댓글에 대한 대댓글인지\n  const [whichComment, setWhichComment] = useState('comment');\n  const [commentToWhom, setCommentToWhom] = useState(null);\n  const [comment, setComment] = useState(null);\n  const [commentId, setCommentId] = useState(null);\n\n  // ################################################ <+------여기 좀 더 고쳐야함\n  // postModal 창 닫을 때 전부다 디폴트로 돌리는고 꺼주는 세팅\n  const makePostDefaultSetting = () => {\n    commentInputRef.current.value = null;\n    handleClose();\n  };\n  // ################################################\n\n  // ################################################\n  // 좋아요 버튼 눌렀을 때 처리 logic\n  const handleLike = async () => {\n    try {\n      const response = await axios.post(\n        'https://server.codestates-project.tk/post/togglelike',\n        {\n          postId: postDatas.postId,\n          likeChecked: !postDatas.likeChecked,\n        },\n        {\n          withCredentials: true,\n        },\n      );\n\n      // test용도\n      // let response = 0;\n      // if (like === false) {\n      //   response = 1;\n      // } else {\n      //   response = -1;\n      // }\n      setPostModalData((prev) => {\n        return {\n          ...prev,\n          post: {\n            ...prev.post,\n            likeChecked: !prev.post.likeChecked,\n            likeCount: prev.post.likeCount + Number(response.data),\n          },\n        };\n      });\n    } catch (err) {\n      if (err.response.status === 401) {\n        history.push('/');\n      } else {\n        console.log(err);\n      }\n    }\n  };\n  // ################################################\n\n  // ################################################\n  // 답글 달기 버튼 눌렀을 때 처리 logic\n  const handleCommentBtn = async () => {\n    await setWhichComment('subComment');\n    commentInputRef.current.focus();\n  };\n  // ################################################\n  // 포스트 제거 버튼을 눌렀을 때 나오는 모달창 on off logic\n  const closeDeleteModal = async (deleted) => {\n    if (isDeleteOn && deleted) {\n      // 만약 모달창이 켜져있는데, 삭제가 이미 이루어졌다면, 삭제 모달창과 postModal 창 둘다 끄기\n      await setIsDeleteOn(false);\n      handleClose();\n    } else if (isDeleteOn) {\n      // 삭제는 안됐고, 모달창만 켜져있다면, 삭제 모달창만 끄기\n      await setIsDeleteOn(false);\n    } else {\n      // 모달창이 켜져있지 않다면 켜기\n      await setIsDeleteOn(true);\n    }\n  };\n  // ################################################\n\n  // ################################################\n  // 특정 유저 프로필 + 그에 따른 grid 데이터 불러오기(댓글 및 대댓글 창의 프로필을 클릭했을 때에도 이 function을 씀)\n  const getSpecificUser = async (id) => {\n    getPosts(id, 0, 0, 15);\n    getUserData(id);\n    handleClose();\n  };\n  // ################################################\n\n  const checkEnterPress = (e) => {\n    if (e.keyCode === 13) {\n      e.target.blur();\n    }\n  };\n\n  // 포스트 수정\n  const updatePost = async () => {\n    if (textUpdateToggled === true) {\n      try {\n        await axios.patch(\n          `https://server.codestates-project.tk/post`,\n          {\n            postId: postDatas.postId,\n            text: textVal,\n          },\n          { withCredentials: true },\n        );\n        setPostModalData((prev) => {\n          return { ...prev, post: { ...prev.post, text: textVal } };\n        });\n        await setTextUpdateToggled(false);\n        setUpdateBtnToggle(false);\n      } catch (err) {\n        if (err.response.status === 401) {\n          history.push('/');\n        } else {\n          console.log(err);\n        }\n      }\n      // test 용도\n      // await setPostInform({ ...postInform, text: textRef.current.value });\n      // await setTextUpdateToggled(false);\n      // setUpdateBtnToggle(false);\n    } else {\n      setTextVal(postDatas.text);\n      await setTextUpdateToggled(true);\n      textRef.current.focus();\n    }\n  };\n\n  // 코멘트 남기기\n  const postComment = async () => {\n    if (whichComment === 'comment') {\n      try {\n        const response = await axios.post(\n          'https://server.codestates-project.tk/post/comment',\n          {\n            postId: postDatas.postId,\n            text: comment,\n          },\n          {\n            withCredentials: true,\n          },\n        );\n        commentInputRef.current.value = null;\n        refreshPost(response.data.comments);\n      } catch (err) {\n        if (err.response.status === 401) {\n          history.push('/');\n        } else {\n          console.log(err);\n        }\n      }\n    } else if (whichComment === 'subComment') {\n      try {\n        const response = await axios.post(\n          'https://server.codestates-project.tk/post/reply',\n          {\n            postId: postDatas.postId,\n            commentId,\n            text: comment,\n          },\n          {\n            withCredentials: true,\n          },\n        );\n        refreshPost(response.data.comments);\n      } catch (err) {\n        if (err.response.status === 401) {\n          history.push('/');\n        } else {\n          console.log(err);\n        }\n      }\n    }\n  };\n\n  // 코멘트 삭제\n  const deleteComment = async (id) => {\n    try {\n      const response = await axios.delete(\n        'https://server.codestates-project.tk/post/comment',\n        {\n          postId: postDatas.postId,\n          commentId: id,\n        },\n        {\n          withCredentials: true,\n        },\n      );\n      refreshPost(response.data.comments);\n    } catch (err) {\n      if (err.response.status === 401) {\n        history.push('/');\n      } else {\n        console.log(err);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(max-width: 65rem)');\n    if (mediaQuery.matches) {\n      setCommentToggle(false);\n    } else {\n      setCommentToggle(true);\n    }\n  }, []);\n\n  return (\n    <>\n      <PostDeleteModal\n        postId={postDatas.postId}\n        deletePost={deletePost}\n        isModalOn={isDeleteOn}\n        handleClose={closeDeleteModal}\n      />\n      <div className={`${styles.modal} ${isModalOn && styles.isOn}`}>\n        <div className={styles.box}>\n          <img\n            className={styles.close}\n            src={close}\n            alt=\"close\"\n            onClick={\n              // 무슨 액션이던지 중간에 모달창을 닫으면 다 리셋시켜줘야함\n              makePostDefaultSetting\n            }\n          />\n          <div className={styles.postModal}>\n            <ImageSlide\n              imageUrls={[\n                postDatas.picture_1,\n                postDatas.picture_2,\n                postDatas.picture_3,\n              ]}\n            />\n            <div className={styles.contents}>\n              <div\n                className={styles.userArea}\n                onClick={() => {\n                  getSpecificUser(userInform.userId);\n                }}\n              >\n                <div className={styles.profile_imgage}>\n                  <img\n                    className={styles.profile_image_img}\n                    src={userInform.thumbnail}\n                    alt=\"profile\"\n                  />\n                </div>\n                <div className={styles.profile_inform}>\n                  <div className={styles.nickname}>{userInform.petName}</div>\n                  <div className={styles.breed}>{userInform.breed}</div>\n                </div>\n                {updateBtnToggle ? (\n                  <div className={styles.updateBtns}>\n                    <img\n                      className={styles.closeUpdateBtn}\n                      src={updateBtn}\n                      alt=\"updateBtn\"\n                      onClick={() => {\n                        setTextUpdateToggled(false);\n                        setTextVal(postDatas.text);\n                        setUpdateBtnToggle(false);\n                      }}\n                    />\n                    <i className=\"far fa-edit\" onClick={updatePost} />\n                    <i\n                      className=\"fas fa-trash-alt\"\n                      id={styles.deleteBtn}\n                      onClick={closeDeleteModal}\n                    />\n                  </div>\n                ) : (\n                  <img\n                    className={styles.updateBtn}\n                    src={updateBtn}\n                    alt=\"updateBtn\"\n                    onClick={() => {\n                      setUpdateBtnToggle(true);\n                    }}\n                  />\n                )}\n              </div>\n              {textUpdateToggled ? (\n                <textarea\n                  onBlur={updatePost}\n                  onKeyDown={checkEnterPress}\n                  ref={textRef}\n                  spellCheck={false}\n                  className={styles.updateText}\n                  value={textVal}\n                  onChange={(e) => {\n                    setTextVal(e.target.value);\n                  }}\n                />\n              ) : (\n                <div className={styles.textArea}>{postDatas.text}</div>\n              )}\n\n              <div className={styles.date}>{postDatas.time}</div>\n              <div className={styles.buttonArea}>\n                {postDatas.likeChecked ? (\n                  <img\n                    className={styles.like}\n                    src={likeImg}\n                    alt=\"like\"\n                    onClick={handleLike}\n                  />\n                ) : (\n                  <img\n                    className={styles.unLike}\n                    src={unLikeImg}\n                    alt=\"unlike\"\n                    onClick={handleLike}\n                  />\n                )}\n                <div className={styles.likeCount}>\n                  {`좋아요 ${postDatas.likeCount}개`}\n                </div>\n              </div>\n              {commentToggle ? (\n                <>\n                  <div\n                    className={styles.commentFolder}\n                    onClick={() => {\n                      setCommentToggle(false);\n                    }}\n                  >\n                    댓글 접기\n                  </div>\n                  <Comments\n                    getSpecificUser={getSpecificUser}\n                    setCommentId={setCommentId}\n                    setCommentToWhom={setCommentToWhom}\n                    setWhichComment={setWhichComment}\n                    postComment={postComment}\n                    postId={postDatas.postId}\n                    refreshPost={refreshPost}\n                    deleteComment={deleteComment}\n                    commentsInform={commentsInform}\n                    handleCommentBtn={handleCommentBtn}\n                  />\n                </>\n              ) : (\n                <div\n                  onClick={() => {\n                    setCommentToggle(true);\n                  }}\n                  className={styles.commentFolder}\n                >\n                  댓글 펼치기...\n                </div>\n              )}\n              <div className={styles.inputPart}>\n                <input\n                  onChange={(e) => {\n                    setComment(e.target.value);\n                  }}\n                  ref={commentInputRef}\n                  className={styles.commentInput}\n                  spellCheck=\"false\"\n                  type=\"text\"\n                  placeholder=\"댓글 달기..\u001c\"\n                />\n                {whichComment === 'subComment' ? (\n                  <div\n                    className={styles.subCommentMessage}\n                    onClick={() => {\n                      setWhichComment('comment');\n                    }}\n                  >\n                    {`${commentToWhom}님께 답글 달기 취소`}\n                  </div>\n                ) : null}\n                <span onClick={postComment} className={styles.commentBtn}>\n                  게시\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PostModal;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Posts/Posts.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comments/Comments.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comment/Comment.jsx",["104","105"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostDeleteModal/PostDeleteModal.jsx",["106"],"import { React, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport styles from './PostDeleteModal.module.css';\nimport deleteMotionImg from '../../images/trashcan.png';\nimport SimpleModal from '../SimpleModal/SimpleModal';\n\nconst PostDeleteModal = ({ postId, deletePost, isModalOn, handleClose }) => {\n  const [deleted, setDeleted] = useState(false);\n\n  // 포스트 삭제\n  const deletePostFunc = async () => {\n    try {\n      await axios.delete(\n        `https://server.codestates-project.tk/post`,\n        { data: { postId } },\n        {\n          withCredentials: true,\n        },\n      );\n      deletePost(postId);\n      await setDeleted(true);\n    } catch (err) {\n      if (err.response.status === 401) {\n        history.push('/');\n      } else {\n        console.log(err);\n      }\n    }\n  };\n\n  return (\n    <SimpleModal isModalOn={isModalOn} handleClose={handleClose}>\n      <img\n        className={styles.deleteMotion}\n        src={deleteMotionImg}\n        alt=\"trash can\"\n      />\n      {deleted ? (\n        <>\n          <div className={styles.completedMessage}>\n            정상적으로 처리되었습니다\n          </div>\n        </>\n      ) : (\n        <>\n          <div id={styles.firstMessage} className={styles.message}>\n            정말로 삭제를 원하시나요?\n          </div>\n          <div id={styles.deleteMessage} className={styles.message}>\n            삭제 요청은 되돌릴 수 없습니다\n          </div>\n          <div className={styles.yesOrNoButton}>\n            <button\n              className={styles.yesButton}\n              type=\"button\"\n              onClick={deletePostFunc}\n            >\n              Yes\n            </button>\n            <button\n              className={styles.noButton}\n              type=\"button\"\n              onClick={() => {\n                handleClose();\n              }}\n            >\n              No\n            </button>\n          </div>\n        </>\n      )}\n    </SimpleModal>\n  );\n};\n\nexport default PostDeleteModal;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Nav/Nav.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/MypageModal/MypageModal.jsx",["107","108","109"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/CropModal/CropModal.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/LandingPage/LandingPage.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/useIntersectionObserver/useIntersectionObserver.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostNewFormModal/PostNewFormModal.jsx",["110","111"],{"ruleId":"112","severity":2,"message":"113","line":37,"column":5,"nodeType":"114","messageId":"115","endLine":37,"endColumn":16,"fix":"116"},{"ruleId":"117","severity":2,"message":"118","line":40,"column":10,"nodeType":"119","messageId":"120","endLine":42,"endColumn":4,"fix":"121"},{"ruleId":"122","severity":1,"message":"123","line":49,"column":22,"nodeType":"124","messageId":"125","endLine":49,"endColumn":31},{"ruleId":"126","severity":1,"message":"127","line":48,"column":9,"nodeType":"128","messageId":"120","endLine":48,"endColumn":20},{"ruleId":"126","severity":1,"message":"127","line":73,"column":11,"nodeType":"128","messageId":"120","endLine":73,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":100,"column":9,"nodeType":"128","messageId":"120","endLine":100,"endColumn":20},{"ruleId":"129","severity":1,"message":"130","line":131,"column":6,"nodeType":"131","endLine":131,"endColumn":8,"suggestions":"132"},{"ruleId":"126","severity":1,"message":"127","line":44,"column":9,"nodeType":"128","messageId":"120","endLine":44,"endColumn":20},{"ruleId":"126","severity":1,"message":"127","line":67,"column":11,"nodeType":"128","messageId":"120","endLine":67,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":89,"column":9,"nodeType":"128","messageId":"120","endLine":89,"endColumn":20},{"ruleId":"126","severity":1,"message":"127","line":87,"column":9,"nodeType":"128","messageId":"120","endLine":87,"endColumn":20},{"ruleId":"126","severity":1,"message":"127","line":152,"column":11,"nodeType":"128","messageId":"120","endLine":152,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":186,"column":11,"nodeType":"128","messageId":"120","endLine":186,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":207,"column":11,"nodeType":"128","messageId":"120","endLine":207,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":231,"column":9,"nodeType":"128","messageId":"120","endLine":231,"endColumn":20},{"ruleId":"126","severity":1,"message":"127","line":31,"column":5,"nodeType":"128","messageId":"120","endLine":31,"endColumn":16},{"ruleId":"126","severity":1,"message":"127","line":52,"column":11,"nodeType":"128","messageId":"120","endLine":52,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":27,"column":9,"nodeType":"128","messageId":"120","endLine":27,"endColumn":20},{"ruleId":"133","severity":1,"message":"134","line":83,"column":11,"nodeType":"135","messageId":"120","endLine":83,"endColumn":65},{"ruleId":"126","severity":1,"message":"127","line":87,"column":11,"nodeType":"128","messageId":"120","endLine":87,"endColumn":22},{"ruleId":"133","severity":1,"message":"134","line":111,"column":11,"nodeType":"135","messageId":"120","endLine":111,"endColumn":65},{"ruleId":"133","severity":1,"message":"134","line":55,"column":7,"nodeType":"135","messageId":"120","endLine":55,"endColumn":42},{"ruleId":"133","severity":1,"message":"134","line":128,"column":11,"nodeType":"135","messageId":"120","endLine":128,"endColumn":64},"prefer-const","'testContent' is never reassigned. Use 'const' instead.","Identifier","useConst",{"range":"136","text":"137"},"no-else-return","Unnecessary 'else' after 'return'.","BlockStatement","unexpected",{"range":"138","text":"139"},"func-names","Unexpected unnamed function.","FunctionExpression","unnamed","no-console","Unexpected console statement.","MemberExpression","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'acceptUserData' and 'getPosts'. Either include them or remove the dependency array. If 'getPosts' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["140"],"no-alert","Unexpected alert.","CallExpression",[957,960],"const",[988,1163],"(el) => {\n  if (el.userId === 1) {\n    return <MyChat textData={el.text} dateData={el.time} />;\n  } \n    return <UserChat textData={el.text} dateData={el.time} />;\n  \n}",{"desc":"141","fix":"142"},"Update the dependencies array to be: [acceptUserData, getPosts]",{"range":"143","text":"144"},[3912,3914],"[acceptUserData, getPosts]"]