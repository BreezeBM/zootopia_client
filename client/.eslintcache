[{"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/Chatpage/ChatPage.jsx":"1","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/MainPage/MainPage.jsx":"2","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/App.jsx":"3","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Nav/Nav.jsx":"4","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/MypageModal/MypageModal.jsx":"5","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Post/Post.jsx":"6","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comment/Comment.jsx":"7","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComment/SubComment.jsx":"8","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Posts/Posts.jsx":"9","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostModal/PostModal.jsx":"10","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComments/SubComments.jsx":"11","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostDeleteModal/PostDeleteModal.jsx":"12","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SimpleModal/SimpleModal.jsx":"13","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostCropModal/PostCropModal.jsx":"14","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/LandingPage/LandingPage.jsx":"15","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/DeleteModal/DeleteModal.jsx":"16","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/ImageSlide/ImageSlide.jsx":"17","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comments/Comments.jsx":"18","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostNewFormModal/PostNewFormModal.jsx":"19","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/CropModal/CropModal.jsx":"20","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Modal/Modal.jsx":"21","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/EachSlide/EachSlide.jsx":"22"},{"size":5012,"mtime":1607661750834,"results":"23","hashOfConfig":"24"},{"size":5030,"mtime":1607934056712,"results":"25","hashOfConfig":"24"},{"size":5040,"mtime":1607952760204,"results":"26","hashOfConfig":"24"},{"size":1640,"mtime":1607929917262,"results":"27","hashOfConfig":"24"},{"size":9228,"mtime":1607903499054,"results":"28","hashOfConfig":"24"},{"size":413,"mtime":1607578991112,"results":"29","hashOfConfig":"24"},{"size":5914,"mtime":1607840915897,"results":"30","hashOfConfig":"24"},{"size":5365,"mtime":1607903471237,"results":"31","hashOfConfig":"24"},{"size":1380,"mtime":1607952721706,"results":"32","hashOfConfig":"24"},{"size":16211,"mtime":1607927729326,"results":"33","hashOfConfig":"24"},{"size":1065,"mtime":1607680529659,"results":"34","hashOfConfig":"24"},{"size":2401,"mtime":1607903386659,"results":"35","hashOfConfig":"24"},{"size":553,"mtime":1606809858418,"results":"36","hashOfConfig":"24"},{"size":3570,"mtime":1606905749699,"results":"37","hashOfConfig":"24"},{"size":2195,"mtime":1607396806747,"results":"38","hashOfConfig":"24"},{"size":2288,"mtime":1606876971766,"results":"39","hashOfConfig":"24"},{"size":2501,"mtime":1607749934588,"results":"40","hashOfConfig":"24"},{"size":1279,"mtime":1607680550795,"results":"41","hashOfConfig":"24"},{"size":8171,"mtime":1607903452010,"results":"42","hashOfConfig":"24"},{"size":4526,"mtime":1607677741351,"results":"43","hashOfConfig":"24"},{"size":573,"mtime":1607691408373,"results":"44","hashOfConfig":"24"},{"size":330,"mtime":1607072594693,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14pakxi",{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/Chatpage/ChatPage.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/MainPage/MainPage.jsx",["95","96"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport styles from './MainPage.module.css';\nimport Posts from '../../components/Posts/Posts';\nimport addPostImg from '../../images/bark.png';\nimport PostModal from '../../components/PostModal/PostModal';\nimport PostNewFormModal from '../../components/PostNewFormModal/PostNewFormModal';\nimport Spinner from '../../components/Spinner/Spinner';\n\n// test용 fakedata\n// import fakedata from '../../fakeData';\n\nconst MainPage = ({\n  spinnerIsOn,\n  from,\n  offsetCount,\n  acceptUserData,\n  kind,\n  setProfileForDeleteAndAdd,\n  userProfile,\n  isDone,\n  setUserProfile,\n  setPosts,\n  posts,\n  getPosts,\n  profile,\n  deletePost,\n  getMorePosts,\n}) => {\n  // 1) ComponentDidMount(첫 렌더링시에)로 유저 정보와 latest posts 정보를 받아오고 re render\n  const firstOptionFunc = () => {\n    getPosts(0);\n    acceptUserData(0);\n  };\n\n  useEffect(() => {\n    firstOptionFunc();\n  }, []);\n\n  const history = useHistory();\n\n  // 새로운 포스트를 만드는 모달창을 끄고, 켜는 state & functions\n  const [isAddPostOn, setIsAddPostOn] = useState(false);\n  const viewAddPost = () => {\n    setIsAddPostOn(!isAddPostOn);\n  };\n  // #######################################################\n\n  // #######################################################\n  // postModal창이 켜져있는지 아닌지, default : false\n  // PostModal창의 내용들 refresh 하는 function\n  const [postModaldata, setPostModalData] = useState({});\n  const refreshPost = async (data) => {\n    setPostModalData((prev) => {\n      return { ...prev, comments: data };\n    });\n  };\n  // #######################################################\n\n  // #######################################################\n  // 포스트 보기\n  const [isPostOn, setIsPostOn] = useState(false);\n  const viewPost = async (postId) => {\n    if (isPostOn) {\n      // 만약에 켜져있으면, false로 다시 끄기\n      setIsPostOn(false);\n    } else {\n      try {\n        const response = await axios.get(\n          // `https://71f44c60960a.ngrok.io/post/${postId}`,\n          `https://server.codestates-project.tk/post/${postId}`,\n          { withCredentials: true },\n        );\n        setPostModalData(response.data);\n      } catch (err) {\n        if (err.response.status === 401) {\n          history.push('/');\n        } else {\n          console.log(err);\n        }\n      } finally {\n        setIsPostOn(true);\n      }\n      // setPostModalData(fakedata.post);\n      // setIsPostOn(true);\n    }\n  };\n  // #######################################################\n\n  // #######################################################\n  // 프로필 div를 눌렀을 때 해당 프로필 grid data를 불러오는 logic\n  const viewProfile = () => {\n    getPosts(profile.userId);\n  };\n  // #######################################################\n\n  return (\n    <>\n      <Spinner spinIsOn={spinnerIsOn} />\n      <PostNewFormModal\n        setProfileForDeleteAndAdd={setProfileForDeleteAndAdd}\n        setUserProfile={setUserProfile}\n        postsKind={posts.kind}\n        setPosts={setPosts}\n        isModalOn={isAddPostOn}\n        handleClose={viewAddPost}\n      />\n      {isPostOn ? (\n        <PostModal\n          posts={posts}\n          kind={kind}\n          setProfileForDeleteAndAdd={setProfileForDeleteAndAdd}\n          setUserProfile={setUserProfile}\n          userProfileId={userProfile.userId}\n          setPostModalData={setPostModalData}\n          refreshPost={refreshPost}\n          setPosts={setPosts}\n          getPosts={getPosts}\n          getUserData={acceptUserData}\n          postData={postModaldata}\n          isModalOn={isPostOn}\n          handleClose={viewPost}\n          deletePost={deletePost}\n        />\n      ) : null}\n      <div className={styles.gridFrame} />\n      <div className={styles.profile} onClick={viewProfile}>\n        <img\n          src={profile.thumbnail}\n          className={styles.image}\n          alt=\"profile_img\"\n        />\n        <div className={styles.userInform}>\n          <div className={styles.petName}>{profile.petName}</div>\n          <div className={styles.breed}>{profile.breed}</div>\n          <div className={styles.postCountPart}>\n            <div className={styles.postsCount}>Posts</div>\n            <div className={styles.postsCountNumber}>{profile.postCount}</div>\n          </div>\n        </div>\n      </div>\n      <Posts\n        getMorePosts={getMorePosts}\n        from={from}\n        offsetCount={offsetCount}\n        setPosts={setPosts}\n        userProfile={userProfile}\n        isDone={isDone}\n        userId={profile.userId}\n        addPosts={getPosts}\n        kind={posts.kind}\n        posts={posts.postData}\n        postsCount={posts.postsCount}\n        viewPost={viewPost}\n      />\n      <div className={styles.addButton} onClick={viewAddPost}>\n        <img className={styles.addPostImg} src={addPostImg} alt=\"addPost\" />\n      </div>\n    </>\n  );\n};\n\nexport default MainPage;\n",["97","98","99","100"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/App.jsx",["101","102","103","104"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Nav/Nav.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/MypageModal/MypageModal.jsx",["105","106","107","108","109"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Post/Post.jsx",[],["110","111","112","113"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comment/Comment.jsx",["114","115","116"],"/* eslint-disable no-nested-ternary */\nimport { React, useState, useRef, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport styles from './Comment.module.css';\nimport SubComments from '../SubComments/SubComments';\nimport updateBtn from '../../images/commentUpdateBtn.jpg';\n\nconst Comment = ({\n  userProfileId,\n  userId,\n  getSpecificUser,\n  setCommentId,\n  setCommentToWhom,\n  refreshPost,\n  postId,\n  replies,\n  deleteComment,\n  commentId,\n  thumbnail,\n  petName,\n  text,\n  time,\n  handleCommentBtn,\n}) => {\n  // 수정권한이 있는지에 관한 처리\n  const [today, setToday] = useState(null);\n  const [hasRights, setHasRights] = useState(false);\n  const textRef = useRef(null);\n  const [updateToggled, setUpdateToggled] = useState(false);\n  const [textUpdateToggled, setTextUpdateToggled] = useState(false);\n  const [textInput, setTextInput] = useState(null);\n\n  // 댓글 수정\n  const updateComment = async () => {\n    console.log(commentId);\n    if (textUpdateToggled === true) {\n      try {\n        const response = await axios.patch(\n          'https://71f44c60960a.ngrok.io/post/comment',\n          {\n            postId,\n            commentId,\n            text: textInput,\n          },\n          {\n            withCredentials: true,\n          },\n        );\n        refreshPost(response.data.comments);\n        setTextUpdateToggled(false);\n        setUpdateToggled(false);\n      } catch (err) {\n        if (err.response.status === 401) {\n          history.push('/');\n        } else {\n          console.log(err);\n        }\n      }\n    } else {\n      setTextInput(text);\n      await setTextUpdateToggled(true);\n      textRef.current.focus();\n    }\n  };\n\n  const checkEnterPress = (e) => {\n    if (e.keyCode === 13) {\n      updateComment();\n    }\n  };\n\n  // 수정권한이 있는지에 관한 처리\n  useEffect(() => {\n    if (userProfileId === userId) {\n      setHasRights(true);\n    }\n  }, [userProfileId, userId]);\n\n  const getDateType = () => {\n    const date = new Date(time);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const dates = date.getDate();\n    let day = date.getDay();\n    if (day === 1) day = '월';\n    if (day === 2) day = '화';\n    if (day === 3) day = '수';\n    if (day === 4) day = '목';\n    if (day === 5) day = '금';\n    if (day === 6) day = '토';\n    if (day === 0) day = '일';\n    const dateForm = `${year}/${month}/${dates} (${day})`;\n    return dateForm;\n  };\n\n  useEffect(() => {\n    setToday(getDateType());\n  }, []);\n  return (\n    <>\n      <div className={styles.eachComment}>\n        <div className={styles.subComment}>\n          <div className={styles.contentsPart}>\n            <img\n              className={styles.profile}\n              onClick={() => {\n                getSpecificUser(userId);\n              }}\n              src={thumbnail}\n              alt=\"profile\"\n            />\n            <div className={styles.commentPart}>\n              <span\n                className={styles.nickname}\n                onClick={() => {\n                  getSpecificUser(userId);\n                }}\n              >\n                {petName}\n              </span>\n              {textUpdateToggled ? (\n                <input\n                  onKeyDown={checkEnterPress}\n                  spellCheck={false}\n                  ref={textRef}\n                  className={styles.textInput}\n                  type=\"text\"\n                  value={textInput}\n                  onChange={(e) => {\n                    setTextInput(e.target.value);\n                  }}\n                />\n              ) : (\n                <span className={styles.textPart}>{text}</span>\n              )}\n            </div>\n          </div>\n          <div className={styles.dateAndBtnPart}>\n            <span className={styles.date}>{today}</span>\n            <span\n              className={styles.commentBtn}\n              onClick={async () => {\n                await setCommentId(commentId);\n                await setCommentToWhom(petName);\n                handleCommentBtn();\n              }}\n            >\n              답글 달기\n            </span>\n            {hasRights ? (\n              updateToggled ? (\n                <div className={styles.updateBtns}>\n                  <img\n                    className={styles.closeUpdateBtn}\n                    src={updateBtn}\n                    alt=\"updateBtn\"\n                    onClick={() => {\n                      setTextUpdateToggled(false);\n                      setTextInput(text);\n                      setUpdateToggled(false);\n                    }}\n                  />\n                  <i\n                    id={styles.goToInputBtn}\n                    className=\"far fa-edit\"\n                    onClick={updateComment}\n                  />\n                  <i\n                    id={styles.commentDeleteBtn}\n                    className=\"fas fa-trash-alt\"\n                    onClick={() => {\n                      deleteComment(commentId);\n                      setUpdateToggled(false);\n                    }}\n                  />\n                </div>\n              ) : (\n                <img\n                  className={styles.updateBtn}\n                  src={updateBtn}\n                  alt=\"updateBtn\"\n                  onClick={() => {\n                    setUpdateToggled(true);\n                  }}\n                />\n              )\n            ) : null}\n          </div>\n        </div>\n        <SubComments\n          userProfileId={userProfileId}\n          getSpecificUser={getSpecificUser}\n          commentId={commentId}\n          setCommentId={setCommentId}\n          setCommentToWhom={setCommentToWhom}\n          postId={postId}\n          refreshPost={refreshPost}\n          replies={replies}\n          handleCommentBtn={handleCommentBtn}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Comment;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComment/SubComment.jsx",["117","118","119"],"/* eslint-disable no-nested-ternary */\nimport { React, useRef, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport styles from './SubComment.module.css';\nimport updateBtn from '../../images/commentUpdateBtn.jpg';\n\nconst SubComment = ({\n  userProfileId,\n  getSpecificUser,\n  postId,\n  refreshPost,\n  replyId,\n  userId,\n  commentId,\n  setCommentId,\n  setCommentToWhom,\n  thumbnail,\n  petName,\n  text,\n  time,\n  handleCommentBtn,\n}) => {\n  const [today, setToday] = useState(null);\n  const [hasRights, setHasRights] = useState(false);\n  const textRef = useRef(null);\n  const [updateToggled, setUpdateToggled] = useState(false);\n  const [textUpdateToggled, setTextUpdateToggled] = useState(false);\n  const [textInput, setTextInput] = useState(null);\n\n  // 대댓글 삭제\n  const deleteSubComment = async () => {\n    try {\n      const response = await axios.delete(\n        `https://server.codestates-project.tk/post/reply`,\n        {\n          data: {\n            postId,\n            replyId,\n          },\n        },\n        { withCredentials: true },\n      );\n      refreshPost(response.data.comments);\n      setUpdateToggled(false);\n    } catch (err) {\n      if (err.response.status === 401) {\n        history.push('/');\n      } else {\n        console.log(err);\n      }\n    }\n  };\n\n  // 대댓글 수정\n  const updateSubComment = async () => {\n    if (textUpdateToggled === true) {\n      try {\n        const response = await axios.patch(\n          `https://server.codestates-project.tk/post/reply`,\n          {\n            postId,\n            replyId,\n            text: textInput,\n          },\n          { withCredentials: true },\n        );\n        refreshPost(response.data.comments);\n      } catch (err) {\n        if (err.response.status === 401) {\n          history.push('/');\n        } else {\n          console.log(err);\n        }\n      }\n      setTextUpdateToggled(false);\n      setUpdateToggled(false);\n    } else {\n      await setTextInput(text);\n      await setTextUpdateToggled(true);\n      textRef.current.focus();\n    }\n  };\n\n  const checkEnterPress = (e) => {\n    if (e.keyCode === 13) {\n      updateSubComment();\n    }\n  };\n\n  const getDateType = () => {\n    const date = new Date(time);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const dates = date.getDate();\n    let day = date.getDay();\n    if (day === 1) day = '월';\n    if (day === 2) day = '화';\n    if (day === 3) day = '수';\n    if (day === 4) day = '목';\n    if (day === 5) day = '금';\n    if (day === 6) day = '토';\n    if (day === 0) day = '일';\n    const dateForm = `${year}/${month}/${dates} (${day})`;\n    return dateForm;\n  };\n  useEffect(() => {\n    setToday(getDateType());\n  });\n  useEffect(() => {\n    if (userId === userProfileId) {\n      setHasRights(true);\n    }\n  }, [userProfileId, userId]);\n\n  return (\n    <div className={styles.subComment}>\n      <div className={styles.contentsPart}>\n        <img\n          onClick={() => {\n            getSpecificUser(userId);\n          }}\n          className={styles.profile}\n          src={thumbnail}\n          alt=\"profile\"\n        />\n        <div className={styles.commentPart}>\n          <span\n            className={styles.nickname}\n            onClick={() => {\n              getSpecificUser(userId);\n            }}\n          >\n            {petName}\n          </span>\n          {textUpdateToggled ? (\n            <input\n              onKeyDown={checkEnterPress}\n              spellCheck={false}\n              ref={textRef}\n              className={styles.textInput}\n              type=\"text\"\n              value={textInput}\n              onChange={(e) => {\n                setTextInput(e.target.value);\n              }}\n            />\n          ) : (\n            <span className={styles.textPart}>{text}</span>\n          )}\n        </div>\n      </div>\n      <div className={styles.dateAndBtnPart}>\n        <span className={styles.date}>{today}</span>\n        <span\n          className={styles.commentBtn}\n          onClick={async () => {\n            await setCommentId(commentId);\n            await setCommentToWhom(petName);\n            handleCommentBtn();\n          }}\n        >\n          답글 달기\n        </span>\n        {hasRights ? (\n          updateToggled ? (\n            <div className={styles.updateBtns}>\n              <img\n                className={styles.closeUpdateBtn}\n                src={updateBtn}\n                alt=\"updateBtn\"\n                onClick={() => {\n                  setTextUpdateToggled(false);\n                  setTextInput(text);\n                  setUpdateToggled(false);\n                }}\n              />\n              <i\n                id={styles.goToInputBtn}\n                className=\"far fa-edit\"\n                onClick={updateSubComment}\n              />\n              <i\n                id={styles.commentDeleteBtn}\n                className=\"fas fa-trash-alt\"\n                onClick={deleteSubComment}\n              />\n            </div>\n          ) : (\n            <img\n              className={styles.updateBtn}\n              src={updateBtn}\n              alt=\"updateBtn\"\n              onClick={() => {\n                setUpdateToggled(true);\n              }}\n            />\n          )\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default SubComment;\n","/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Posts/Posts.jsx",["120"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostModal/PostModal.jsx",["121","122","123","124","125","126"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SubComments/SubComments.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostDeleteModal/PostDeleteModal.jsx",["127"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/SimpleModal/SimpleModal.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostCropModal/PostCropModal.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/pages/LandingPage/LandingPage.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/DeleteModal/DeleteModal.jsx",["128","129"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/ImageSlide/ImageSlide.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Comments/Comments.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/PostNewFormModal/PostNewFormModal.jsx",["130","131"],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/CropModal/CropModal.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/Modal/Modal.jsx",[],"/Users/hong-yong-gi/Desktop/zootopia_client/client/src/components/EachSlide/EachSlide.jsx",[],{"ruleId":"132","severity":1,"message":"133","line":39,"column":6,"nodeType":"134","endLine":39,"endColumn":8,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":80,"column":11,"nodeType":"138","messageId":"139","endLine":80,"endColumn":22},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"136","severity":1,"message":"137","line":45,"column":5,"nodeType":"138","messageId":"139","endLine":45,"endColumn":16},{"ruleId":"136","severity":1,"message":"137","line":73,"column":9,"nodeType":"138","messageId":"139","endLine":73,"endColumn":20},{"ruleId":"136","severity":1,"message":"137","line":109,"column":9,"nodeType":"138","messageId":"139","endLine":109,"endColumn":20},{"ruleId":"136","severity":1,"message":"137","line":129,"column":9,"nodeType":"138","messageId":"139","endLine":129,"endColumn":20},{"ruleId":"136","severity":1,"message":"137","line":99,"column":9,"nodeType":"138","messageId":"139","endLine":99,"endColumn":20},{"ruleId":"148","severity":1,"message":"149","line":101,"column":11,"nodeType":"150","messageId":"139","endLine":101,"endColumn":65},{"ruleId":"136","severity":1,"message":"137","line":106,"column":11,"nodeType":"138","messageId":"139","endLine":106,"endColumn":22},{"ruleId":"148","severity":1,"message":"149","line":134,"column":11,"nodeType":"150","messageId":"139","endLine":134,"endColumn":65},{"ruleId":"132","severity":1,"message":"151","line":162,"column":6,"nodeType":"134","endLine":162,"endColumn":17,"suggestions":"152"},{"ruleId":"140","replacedBy":"153"},{"ruleId":"142","replacedBy":"154"},{"ruleId":"144","replacedBy":"155"},{"ruleId":"146","replacedBy":"156"},{"ruleId":"136","severity":1,"message":"137","line":36,"column":5,"nodeType":"138","messageId":"139","endLine":36,"endColumn":16},{"ruleId":"136","severity":1,"message":"137","line":57,"column":11,"nodeType":"138","messageId":"139","endLine":57,"endColumn":22},{"ruleId":"132","severity":1,"message":"157","line":99,"column":6,"nodeType":"134","endLine":99,"endColumn":8,"suggestions":"158"},{"ruleId":"136","severity":1,"message":"137","line":50,"column":9,"nodeType":"138","messageId":"139","endLine":50,"endColumn":20},{"ruleId":"136","severity":1,"message":"137","line":73,"column":11,"nodeType":"138","messageId":"139","endLine":73,"endColumn":22},{"ruleId":"132","severity":1,"message":"159","line":107,"column":3,"nodeType":"160","endLine":107,"endColumn":12,"suggestions":"161"},{"ruleId":"132","severity":1,"message":"162","line":23,"column":6,"nodeType":"134","endLine":23,"endColumn":8,"suggestions":"163"},{"ruleId":"136","severity":1,"message":"137","line":105,"column":9,"nodeType":"138","messageId":"139","endLine":105,"endColumn":20},{"ruleId":"136","severity":1,"message":"137","line":177,"column":11,"nodeType":"138","messageId":"139","endLine":177,"endColumn":22},{"ruleId":"136","severity":1,"message":"137","line":211,"column":11,"nodeType":"138","messageId":"139","endLine":211,"endColumn":22},{"ruleId":"136","severity":1,"message":"137","line":234,"column":11,"nodeType":"138","messageId":"139","endLine":234,"endColumn":22},{"ruleId":"136","severity":1,"message":"137","line":260,"column":9,"nodeType":"138","messageId":"139","endLine":260,"endColumn":20},{"ruleId":"132","severity":1,"message":"157","line":290,"column":6,"nodeType":"134","endLine":290,"endColumn":8,"suggestions":"164"},{"ruleId":"136","severity":1,"message":"137","line":43,"column":9,"nodeType":"138","messageId":"139","endLine":43,"endColumn":20},{"ruleId":"148","severity":1,"message":"149","line":26,"column":9,"nodeType":"150","messageId":"139","endLine":26,"endColumn":63},{"ruleId":"136","severity":1,"message":"137","line":28,"column":9,"nodeType":"138","messageId":"139","endLine":28,"endColumn":20},{"ruleId":"148","severity":1,"message":"149","line":62,"column":7,"nodeType":"150","messageId":"139","endLine":62,"endColumn":42},{"ruleId":"148","severity":1,"message":"149","line":141,"column":11,"nodeType":"150","messageId":"139","endLine":141,"endColumn":64},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'firstOptionFunc'. Either include it or remove the dependency array.","ArrayExpression",["165"],"no-console","Unexpected console statement.","MemberExpression","unexpected","lines-around-directive",["166"],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-alert","Unexpected alert.","CallExpression","React Hook useEffect has missing dependencies: 'nowBreed' and 'nowPetName'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPetname' needs the current value of 'nowPetName'.",["167"],["166"],[],[],[],"React Hook useEffect has a missing dependency: 'getDateType'. Either include it or remove the dependency array.",["168"],"React Hook useEffect contains a call to 'setToday'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [getDateType] as a second argument to the useEffect Hook.","Identifier",["169"],"React Hook useEffect has a missing dependency: 'observer'. Either include it or remove the dependency array.",["170"],["171"],{"desc":"172","fix":"173"},"padding-line-between-statements",{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"176","fix":"182"},"Update the dependencies array to be: [firstOptionFunc]",{"range":"183","text":"184"},"Update the dependencies array to be: [isModalOn, nowBreed, nowPetName]",{"range":"185","text":"186"},"Update the dependencies array to be: [getDateType]",{"range":"187","text":"188"},"Add dependencies array: [getDateType]",{"range":"189","text":"190"},"Update the dependencies array to be: [observer]",{"range":"191","text":"192"},{"range":"193","text":"188"},[972,974],"[firstOptionFunc]",[4946,4957],"[isModalOn, nowBreed, nowPetName]",[2480,2482],"[getDateType]",[2734,2734],", [getDateType]",[707,709],"[observer]",[8250,8252]]